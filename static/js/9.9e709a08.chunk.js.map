{"version":3,"file":"static/js/9.9e709a08.chunk.js","mappings":"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","sources":["src/components/PagePal/PagePal.js","src/firebase/firebase.js"],"sourcesContent":["import React, { Component } from 'react';\nimport Firebase from \"../../firebase/firebase.js\";\nconst { Configuration, OpenAIApi } = require(\"openai\");\n\nimport './PagePal.css';\n\nclass PagePal extends Component {\n  state = {\n    url: '',\n    extractedData: null,\n    chatInput: '',\n    chats: [],\n    placeholder: '',\n    isDataExtracted: false,\n    openai: null,\n    placeholder: 'Ask questions about the extracted data...'\n  };\n\n    componentDidMount = async () =>{\n        await this.CreateOpenAIModel();\n\n        const extractedData = await this.extractDataFromPage(\"https://jsonplaceholder.typicode.com/\");\n        this.sendPageContentToModel(extractedData);\n        this.setState({\n            extractedData: extractedData,\n            isDataExtracted: true,\n        });\n    }\n\n    handleUrlSubmit = async (e) => {\n        const { url } = this.state;\n\n        const extractedData = await this.extractDataFromPage(url);\n        this.setState({\n            extractedData: extractedData,\n            isDataExtracted: true,\n            chats: [],\n        }, () => {\n            this.sendPageContentToModel(extractedData);\n        });\n    };\n\n    CreateOpenAIModel = async () => {\n        const openAIAPI = await Firebase.getOpenAIAPI();\n        const openaiApiKey = Array.isArray(openAIAPI) ? openAIAPI.join(\"\") : openAIAPI;\n        const configuration = new Configuration({ apiKey: openaiApiKey });\n        delete configuration.baseOptions.headers['User-Agent'];\n        const openai = new OpenAIApi(configuration);\n\n        this.setState({openai: openai});\n    }\n\n    sendPageContentToModel = async (extractedData) => {\n        const prompt = `MUST READ NOTE: The person chatting with you thinks they are talking to \n                        the content of ${this.state.url}. Please interact with them as if you \n                        were the content of ${this.state.url} and chat with them. Find attached \n                        the content of ${this.state.url}: \\n\\n${extractedData.paragraphs}\\n\\nUser:`\n\n        const GPT35TurboMessage = [\n            {\n                role: \"user\",\n                content: prompt\n            },\n        ];\n\n        const response = await this.state.openai.createChatCompletion({\n            model: \"gpt-3.5-turbo\",\n            messages: GPT35TurboMessage,\n        });\n        const aiResponse = response.data.choices[0].message.content;\n\n\n        this.setState((prevState) => ({\n            chats: [...prevState.chats, GPT35TurboMessage[0]]\n        }));\n    };\n\n    extractDataFromPage = async (url) => {\n        try {\n            const response = await fetch(url);\n            const html = await response.text();\n\n            const parser = new DOMParser();\n            const doc = parser.parseFromString(html, 'text/html');\n            const paragraphs = Array.from(doc.querySelectorAll('p')).map((p) => p.textContent);\n            const extractedData = {\n                paragraphs: paragraphs,\n            };\n\n            return extractedData;\n        } catch (error) {\n            console.error('Error extracting data:', error);\n            return {};\n        }\n    };\n  \n\n    handleSendMessage = async () => {\n        const { chatInput } = this.state;\n\n        if (this.state.isDataExtracted) {\n\n            // Add user's input to chat history\n            const newChat = { \n                role: 'user', \n                content: chatInput \n            };\n            \n            this.setState(\n                (prevState) => ({\n                  chats: [...prevState.chats, newChat],\n                  chatInput: ''\n                }),\n                async () => {\n                  console.log(\"this.state.chats\", this.state.chats)\n\n                  const response = await this.state.openai.createChatCompletion({\n                    model: \"gpt-3.5-turbo\",\n                    messages: this.state.chats,\n                  });\n                  const aiResponse = response.data.choices[0].message.content;\n              \n                  // add AI's response to chat history\n                  let newChatAI = {\n                    role: 'assistant',\n                    content: aiResponse\n                  };\n                  this.setState((prevState) => ({\n                    chats: [...prevState.chats, newChatAI]\n                  }));\n                }\n            );\n\n        } else {\n            // Handle case where data extraction is not complete or activeModel is not set\n            // ...\n        }\n    };\n\n    render() {\n        const { url, extractedData, chatInput, chats, placeholder, isDataExtracted } = this.state;\n\n        return (\n            <div className='PagePal l-container'>\n                <div className='PagePal-extractURL'>\n                    <input\n                        className='PagePal-extractDataInput'\n                        type=\"text\"\n                        value={url}\n                        onChange={(e) => this.setState({ url: e.target.value })}\n                        placeholder=\"Enter a URL\"\n                    />\n                    <button onClick={this.handleUrlSubmit} type=\"submit\">Extract Data</button>\n                </div>\n\n                {isDataExtracted &&\n                    // Render the text messaging interface\n                    <div className='PagePal-bottomSection'>\n                        {/* Render extracted data */}\n                        {extractedData && (\n                            <div className='PagePal-extractedData'>\n                                <h2>Extracted Data</h2>\n                                <ul>\n                                    {extractedData.paragraphs.map((paragraph, index) => (\n                                        <li key={index}>{paragraph}</li>\n                                    ))}\n                                </ul>\n                            </div>\n                        )}\n\n                        <div className='PagePal-chatInterface'>\n                            {/* Render chat history */}\n                            <div className='PagePal-chatHistory'>\n                                <h2>Chat History</h2>\n                                <ul className='PagePal-chatHistoryList'>\n                                    {chats.slice(1).map((chat, index) => (\n                                        <li className='PagePal-chatHistoryList-li' key={index}>\n                                            {chat.role}: {chat.content}\n                                        </li>\n                                    ))}\n                                </ul>\n                            </div>\n                            <input\n                                className='PagePal-messageInput'\n                                type=\"text\"\n                                value={chatInput}\n                                onChange={(e) => this.setState({ chatInput: e.target.value })}\n                                placeholder={placeholder}\n                            />\n                            <button type=\"submit\" onClick={this.handleSendMessage}>\n                                Send\n                            </button>\n                        </div>\n                    </div>\n                }\n            </div>\n        );\n    }\n}\n\nexport default PagePal;\n","import firebase from \"firebase\";\n\nclass Firebase {\n  getScripts = () =>{\n    return new Promise(resolve => {\n      firebase.database()\n      .ref('/scripts/')\n      .once('value')\n      .then(snapshot => {\n        if (snapshot.val()){\n          resolve(Object.values(snapshot.val()))\n        }else{\n          resolve({})\n        }\n      })\n    })\n  }\n\n  getFylds = () =>{\n    return new Promise(resolve => {\n      firebase.database()\n      .ref('/fylds/')\n      .once('value')\n      .then(snapshot => {\n        if (snapshot.val()){\n          resolve(Object.values(snapshot.val()))\n        }else{\n          resolve({})\n        }\n      })\n    })\n  }\n\n  createFyld = (fyld) => {\n    return new Promise(resolve => {\n      firebase.database()\n      .ref('/fylds/' + fyld.name.replace(/\\s/g, '') + '/')\n      .set(\n        {\n          name: fyld.name,\n          dateCreated: fyld.dateCreated,\n          description: fyld.description,\n          image: fyld.image,\n          friends: fyld.friends,\n        }\n      )\n      .then((response) => {\n        console.log(\"response\", response)\n        resolve(true)\n      })\n      .catch(error => {\n        console.log(\"error\", error)\n      })\n    })\n  }\n\n  createNewScript = (script) => {\n    return new Promise(resolve => {\n      firebase.database()\n      .ref('/scripts/' + script.id + '/')\n      .set(\n        {\n          id: script.id,\n          name: script.name,\n          dateCreated: script.dateCreated,\n          cast: script.cast,\n          crew: script.crew,\n          messages: script.messages,\n          isPrivateScript: script.isPrivateScript,\n        }\n      )\n      .then((response) => {\n        console.log(\"response\", response)\n        resolve(true)\n      })\n      .catch(error => {\n        console.log(\"error\", error)\n      })\n    })\n  }\n\n  updateScript = (script) => {\n    return new Promise(resolve => {\n      firebase.database()\n      .ref('/scripts/' + script.id + '/')\n      .update(\n        {\n          id: script.id,\n          name: script.name,\n          dateCreated: script.dateCreated,\n          cast: script.cast,\n          crew: script.crew,\n          messages: script.messages,\n          scenes: script.scenes,\n          readerReactionMap: script.readerReactionMap,\n          isPrivateScript: script.isPrivateScript,\n        }\n      )\n      .then((response) => {\n        console.log(\"response\", response)\n        resolve(true)\n      })\n      .catch(error => {\n        console.log(\"error\", error)\n      })\n    })\n  }\n\n  getOpenAIAPI = () => {\n    return new Promise(resolve => {\n      firebase.database()\n      .ref('/openAIAPI/')\n      .once('value')\n      .then(snapshot => {\n        if (snapshot.val()){\n          resolve(Object.values(snapshot.val()))\n        }else{\n          resolve({})\n        }\n      })\n    })\n  }\n\n  getConversationHistory = () => {\n    return new Promise(resolve => {\n      firebase.database()\n      .ref('/conversationHistory/')\n      .once('value')\n      .then(snapshot => {\n        if (snapshot.val()){\n          resolve(Object.values(snapshot.val()))\n        }else{\n          resolve({})\n        }\n      })\n    })\n  }\n\n  getRimiSenTitles = () =>{\n    return new Promise(resolve => {\n      firebase.database()\n      .ref('/rimiLyrics/')\n      .once('value')\n      .then(snapshot => {\n        if (snapshot.val()){\n          resolve(Object.values(snapshot.val()))\n        }else{\n          resolve({})\n        }\n      })\n    })\n  }\n\n  postChats = (seller, buyer, message, productId, senderID) => {\n    return new Promise(resolve => {\n      firebase.database().\n      ref('/chats/' + seller + '/' + productId + '/' + buyer + '/').\n      push({\n        content: message,\n        timestamp: Date.now(),\n        uid: senderID,\n      }).\n      then(() => {\n        resolve(true)\n      }).catch(error =>{\n        resolve({})\n      })\n    })\n  }\n\n  storage = () => {\n    return firebase.storage()\n  }\n\n  getRimiSenTitles = () =>{\n    return new Promise(resolve => {\n      firebase.database()\n      .ref('/rimiLyrics/')\n      .once('value')\n      .then(snapshot => {\n        if (snapshot.val()){\n          resolve(Object.values(snapshot.val()))\n        }else{\n          resolve({})\n        }\n      })\n    })\n  }\n\n  getScriptById = (id) => {\n    return new Promise(resolve => {\n      firebase.database()\n      .ref('/scripts/'+id)\n      .once('value')\n      .then(snapshot => {\n        if (snapshot.val()){\n          resolve(Object(snapshot.val()))\n        }else{\n          resolve({})\n        }\n      })\n    })\n  }\n\n  updateSenTitle = (update) =>{\n    return new Promise(resolve => {\n      firebase.database()\n      .ref(`/rimis/${update.id}/`)\n      .update(\n        {\n          senTitle: update.newSenTitle,\n        },\n      )\n      .then((response) => {\n        return new Promise(resolve => {\n          firebase.database()\n          .ref(`/rimis/${update.id}/updates/${update.updateId}`)\n          .remove()\n          .then(() => {\n            resolve(true)\n          }).catch( (error) =>{\n            console.log(\"error\", error)\n          })\n        })\n        .then((response) => {\n          resolve(true)\n        })\n        .catch(error => {\n          console.log(\"error\", error)\n        })\n      })\n      .catch(error => {\n        console.log(\"error\", error)\n      })\n    })\n\n  }\n\n  sendForApproval = (item) => {\n    return new Promise(resolve => {\n      firebase.database()\n      .ref('/rimis/'+item.id+'/updates/' + item.updateId + '/')\n      .set(item)\n      .then((response) => {\n        console.log(\"response\", response)\n        resolve(true)\n      })\n      .catch(error => {\n        console.log(\"error\", error)\n      })\n    })\n  }\n\n  updateVideoSnippetURL = (orderId, snippetVideoURL) => {\n    return new Promise(resolve => {\n      firebase.database()\n      .ref('/orders/' + orderId + '/')\n      .update({snippetVideoURL})\n      .then((response) => {\n        console.log(\"response\", response)\n        resolve(true)\n      })\n      .catch(error => {\n        console.log(\"error\", error)\n      })\n    })\n  }\n}\n\nexport default new Firebase();\n"],"names":["_require","require","Configuration","OpenAIApi","PagePal","_Component","_inherits","_super","_createSuper","_this","_classCallCheck","_len","arguments","length","args","Array","_key","call","apply","concat","state","url","extractedData","chatInput","chats","placeholder","isDataExtracted","openai","componentDidMount","_regeneratorRuntime","_context","prev","next","CreateOpenAIModel","extractDataFromPage","sent","sendPageContentToModel","setState","stop","Promise","handleUrlSubmit","e","_context2","openAIAPI","openaiApiKey","configuration","_context3","Firebase","isArray","join","apiKey","baseOptions","headers","prompt","GPT35TurboMessage","response","_context4","paragraphs","role","content","createChatCompletion","model","messages","data","choices","message","prevState","_toConsumableArray","html","parser","doc","_context5","fetch","text","DOMParser","parseFromString","from","querySelectorAll","map","p","textContent","abrupt","t0","console","error","handleSendMessage","newChat","_context7","aiResponse","newChatAI","_context6","log","_createClass","key","value","_this2","_this$state","this","React","className","type","onChange","target","onClick","paragraph","index","slice","chat","Component","getScripts","resolve","firebase","ref","once","then","snapshot","val","Object","values","getFylds","createFyld","fyld","name","replace","set","dateCreated","description","image","friends","catch","createNewScript","script","id","cast","crew","isPrivateScript","updateScript","update","scenes","readerReactionMap","getOpenAIAPI","getConversationHistory","getRimiSenTitles","postChats","seller","buyer","productId","senderID","push","timestamp","Date","now","uid","storage","getScriptById","updateSenTitle","senTitle","newSenTitle","updateId","remove","sendForApproval","item","updateVideoSnippetURL","orderId","snippetVideoURL"],"sourceRoot":""}