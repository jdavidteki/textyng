{"version":3,"file":"static/js/893.3b83e9f2.chunk.js","mappings":"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","sources":["src/components/GroupChat/GroupChat.js","src/firebase/firebase.js"],"sourcesContent":["import React from \"react\";\nimport Firebase from \"../../firebase/firebase.js\";\n\n\nimport \"./GroupChat.css\";\n\nclass GroupChat extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      messageHistory: [], // array of message objects\n      userInput: \"\",\n      aiResponse: \"\",\n      username: \"yokki\",\n    };\n    this.handleUserInputChange = this.handleUserInputChange.bind(this);\n    this.handleFormSubmit = this.handleFormSubmit.bind(this);\n    this.pollOpenAI = this.pollOpenAI.bind(this);\n  }\n\n  async pollOpenAI() {\n    const { messageHistory } = this.state;\n\n    const openAIAPI = await Firebase.getOpenAIAPI();\n    const openaiApiKey = Array.isArray(openAIAPI) ? openAIAPI.join(\"\") : openAIAPI;\n    const { Configuration, OpenAIApi } = require(\"openai\");\n    const configuration = new Configuration({\n      apiKey: openaiApiKey,\n    });\n    delete configuration.baseOptions.headers['User-Agent'];\n\n    const openai = new OpenAIApi(configuration);\n\n    // construct prompt with message history and username\n    const prompt = `NOTE FOR AI: Imagine that you are in a group chat with a user named \n                    ${this.state.username}. The user believes they are chatting with \n                    both Beyonce and James Bond. Your task is to respond \n                    to the user's messages as if you are one of these \n                    characters based on this chat history provided in a JSON format:\n                    \\n${JSON.stringify(messageHistory, null, 2)}\\n  \n                    You can choose which character you want to play and whether \n                    they will or will not respond to the user's messages. \n                    You can also make it conditional on certain words or phrases. \n                    The goal is to create a realistic human-like experience. \n                    Please respond to the user's messages in a way that the character \n                    you are playing would respond if they were in a group chat.\n                    Send your responses in the format [character name]: [response]\n                    so our reactjs front end will be able to parse them correctly.\n                    Remember, always read messageHistory before responding to the user.\n                    Please make it a nice and friendly experience like this is a real chat.\n                    \\n\\nHuman: ${this.state.username}\\nAI:\n                `;\n\n    try{\n        const response = await openai.createCompletion({\n            model: \"text-davinci-003\",\n            prompt: prompt,\n            temperature: 0.9,\n            max_tokens: 150,\n            n: 1,\n            top_p: 1,\n            frequency_penalty: 0,\n            presence_penalty: 0.6,\n            stop: [\" Human:\", \" AI:\"],\n        });\n\n        const aiResponse = response.data.choices[0].text;\n\n        const newMessage = {\n            sender: \"AI\",\n            message: aiResponse,\n            timestamp: new Date().toLocaleString(),\n            mood: \"neutral\", // add mood property if desired\n        };\n\n        const newMessageHistory = [...messageHistory, newMessage];\n        this.setState({\n            messageHistory: newMessageHistory,\n        });\n    } catch (error) {\n        console.log(error);\n    }\n\n    // schedule next poll\n    setTimeout(this.pollOpenAI, 200000);\n  }\n\n  componentDidMount() {\n    // start polling OpenAI\n    this.pollOpenAI();\n  }\n\n  async handleFormSubmit(event) {\n    event.preventDefault();\n    const { messageHistory, userInput } = this.state;\n\n    // create new message object and add to message history\n    const newMessage = {\n      sender: \"user114\",\n      message: userInput,\n      timestamp: new Date().toLocaleString(),\n      mood: \"neutral\", // add mood property if desired\n    };\n    const newMessageHistory = [...messageHistory, newMessage];\n    this.setState({\n      messageHistory: newMessageHistory,\n      userInput: \"\",\n    }, () => {\n        // scroll to bottom of message history\n        const messageHistoryContainer = document.querySelector(\".message-history\");\n        messageHistoryContainer.scrollTop = messageHistoryContainer.scrollHeight;\n\n        //hit API endpoint\n        this.pollOpenAI();\n\n    });\n  }\n\n  handleUserInputChange(event) {\n    this.setState({ userInput: event.target.value });\n  }\n\n  render() {\n    const { messageHistory, aiResponse } = this.state;\n    return (\n      <div className=\"group-chat-container\">\n        <div className=\"message-history\">\n          {messageHistory.map((message, index) => (\n            <div\n              key={index}\n            >\n              <div className=\"message-sender\">{message.sender}</div>\n              <div className=\"message-text\">{message.message}</div>\n              <div className=\"message-timestamp\">{message.timestamp}</div>\n            </div>\n          ))}\n        </div>\n        <form onSubmit={this.handleFormSubmit} className=\"user-input\">\n          <input\n            type=\"text\"\n            value={this.state.userInput}\n            onChange={this.handleUserInputChange}\n            placeholder=\"Type a message...\"\n          />\n          <button type=\"submit\">Send</button>\n        </form>\n      </div>\n    );\n  }\n}\n\nexport default GroupChat;\n","import firebase from \"firebase\";\n\nclass Firebase {\n  getScripts = () =>{\n    return new Promise(resolve => {\n      firebase.database()\n      .ref('/scripts/')\n      .once('value')\n      .then(snapshot => {\n        if (snapshot.val()){\n          resolve(Object.values(snapshot.val()))\n        }else{\n          resolve({})\n        }\n      })\n    })\n  }\n\n  getFylds = () =>{\n    return new Promise(resolve => {\n      firebase.database()\n      .ref('/fylds/')\n      .once('value')\n      .then(snapshot => {\n        if (snapshot.val()){\n          resolve(Object.values(snapshot.val()))\n        }else{\n          resolve({})\n        }\n      })\n    })\n  }\n\n  createFyld = (fyld) => {\n    return new Promise(resolve => {\n      firebase.database()\n      .ref('/fylds/' + fyld.name.replace(/\\s/g, '') + '/')\n      .set(\n        {\n          name: fyld.name,\n          dateCreated: fyld.dateCreated,\n          description: fyld.description,\n          image: fyld.image,\n          friends: fyld.friends,\n        }\n      )\n      .then((response) => {\n        console.log(\"response\", response)\n        resolve(true)\n      })\n      .catch(error => {\n        console.log(\"error\", error)\n      })\n    })\n  }\n\n  createNewScript = (script) => {\n    return new Promise(resolve => {\n      firebase.database()\n      .ref('/scripts/' + script.id + '/')\n      .set(\n        {\n          id: script.id,\n          name: script.name,\n          dateCreated: script.dateCreated,\n          cast: script.cast,\n          crew: script.crew,\n          messages: script.messages,\n          isPrivateScript: script.isPrivateScript,\n        }\n      )\n      .then((response) => {\n        console.log(\"response\", response)\n        resolve(true)\n      })\n      .catch(error => {\n        console.log(\"error\", error)\n      })\n    })\n  }\n\n  updateScript = (script) => {\n    return new Promise(resolve => {\n      firebase.database()\n      .ref('/scripts/' + script.id + '/')\n      .update(\n        {\n          id: script.id,\n          name: script.name,\n          dateCreated: script.dateCreated,\n          cast: script.cast,\n          crew: script.crew,\n          messages: script.messages,\n          scenes: script.scenes,\n          readerReactionMap: script.readerReactionMap,\n          isPrivateScript: script.isPrivateScript,\n        }\n      )\n      .then((response) => {\n        console.log(\"response\", response)\n        resolve(true)\n      })\n      .catch(error => {\n        console.log(\"error\", error)\n      })\n    })\n  }\n\n  getOpenAIAPI = () => {\n    return new Promise(resolve => {\n      firebase.database()\n      .ref('/openAIAPI/')\n      .once('value')\n      .then(snapshot => {\n        if (snapshot.val()){\n          resolve(Object.values(snapshot.val()))\n        }else{\n          resolve({})\n        }\n      })\n    })\n  }\n\n  getConversationHistory = () => {\n    return new Promise(resolve => {\n      firebase.database()\n      .ref('/conversationHistory/')\n      .once('value')\n      .then(snapshot => {\n        if (snapshot.val()){\n          resolve(Object.values(snapshot.val()))\n        }else{\n          resolve({})\n        }\n      })\n    })\n  }\n\n  getRimiSenTitles = () =>{\n    return new Promise(resolve => {\n      firebase.database()\n      .ref('/rimiLyrics/')\n      .once('value')\n      .then(snapshot => {\n        if (snapshot.val()){\n          resolve(Object.values(snapshot.val()))\n        }else{\n          resolve({})\n        }\n      })\n    })\n  }\n\n  postChats = (seller, buyer, message, productId, senderID) => {\n    return new Promise(resolve => {\n      firebase.database().\n      ref('/chats/' + seller + '/' + productId + '/' + buyer + '/').\n      push({\n        content: message,\n        timestamp: Date.now(),\n        uid: senderID,\n      }).\n      then(() => {\n        resolve(true)\n      }).catch(error =>{\n        resolve({})\n      })\n    })\n  }\n\n  storage = () => {\n    return firebase.storage()\n  }\n\n  getRimiSenTitles = () =>{\n    return new Promise(resolve => {\n      firebase.database()\n      .ref('/rimiLyrics/')\n      .once('value')\n      .then(snapshot => {\n        if (snapshot.val()){\n          resolve(Object.values(snapshot.val()))\n        }else{\n          resolve({})\n        }\n      })\n    })\n  }\n\n  getScriptById = (id) => {\n    return new Promise(resolve => {\n      firebase.database()\n      .ref('/scripts/'+id)\n      .once('value')\n      .then(snapshot => {\n        if (snapshot.val()){\n          resolve(Object(snapshot.val()))\n        }else{\n          resolve({})\n        }\n      })\n    })\n  }\n\n  updateSenTitle = (update) =>{\n    return new Promise(resolve => {\n      firebase.database()\n      .ref(`/rimis/${update.id}/`)\n      .update(\n        {\n          senTitle: update.newSenTitle,\n        },\n      )\n      .then((response) => {\n        return new Promise(resolve => {\n          firebase.database()\n          .ref(`/rimis/${update.id}/updates/${update.updateId}`)\n          .remove()\n          .then(() => {\n            resolve(true)\n          }).catch( (error) =>{\n            console.log(\"error\", error)\n          })\n        })\n        .then((response) => {\n          resolve(true)\n        })\n        .catch(error => {\n          console.log(\"error\", error)\n        })\n      })\n      .catch(error => {\n        console.log(\"error\", error)\n      })\n    })\n\n  }\n\n  sendForApproval = (item) => {\n    return new Promise(resolve => {\n      firebase.database()\n      .ref('/rimis/'+item.id+'/updates/' + item.updateId + '/')\n      .set(item)\n      .then((response) => {\n        console.log(\"response\", response)\n        resolve(true)\n      })\n      .catch(error => {\n        console.log(\"error\", error)\n      })\n    })\n  }\n\n  updateVideoSnippetURL = (orderId, snippetVideoURL) => {\n    return new Promise(resolve => {\n      firebase.database()\n      .ref('/orders/' + orderId + '/')\n      .update({snippetVideoURL})\n      .then((response) => {\n        console.log(\"response\", response)\n        resolve(true)\n      })\n      .catch(error => {\n        console.log(\"error\", error)\n      })\n    })\n  }\n}\n\nexport default new Firebase();\n"],"names":["GroupChat","_React$Component","_inherits","_super","_createSuper","props","_this","_classCallCheck","call","state","messageHistory","userInput","aiResponse","username","handleUserInputChange","bind","_assertThisInitialized","handleFormSubmit","pollOpenAI","_createClass","key","value","openAIAPI","openaiApiKey","_require","Configuration","OpenAIApi","configuration","openai","prompt","response","newMessage","newMessageHistory","_regeneratorRuntime","_context","prev","next","this","Firebase","sent","Array","isArray","join","require","apiKey","baseOptions","headers","JSON","stringify","createCompletion","model","temperature","max_tokens","n","top_p","frequency_penalty","presence_penalty","stop","data","choices","text","sender","message","timestamp","Date","toLocaleString","mood","concat","_toConsumableArray","setState","t0","console","log","setTimeout","Promise","event","_this$state","_this2","_context2","preventDefault","messageHistoryContainer","document","querySelector","scrollTop","scrollHeight","target","_this$state2","React","className","map","index","onSubmit","type","onChange","placeholder","getScripts","resolve","firebase","ref","once","then","snapshot","val","Object","values","getFylds","createFyld","fyld","name","replace","set","dateCreated","description","image","friends","catch","error","createNewScript","script","id","cast","crew","messages","isPrivateScript","updateScript","update","scenes","readerReactionMap","getOpenAIAPI","getConversationHistory","getRimiSenTitles","postChats","seller","buyer","productId","senderID","push","content","now","uid","storage","getScriptById","updateSenTitle","senTitle","newSenTitle","updateId","remove","sendForApproval","item","updateVideoSnippetURL","orderId","snippetVideoURL"],"sourceRoot":""}