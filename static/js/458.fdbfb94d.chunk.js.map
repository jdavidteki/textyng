{"version":3,"file":"static/js/458.fdbfb94d.chunk.js","mappings":"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","sources":["src/components/Conversation/Conversation.js","src/firebase/firebase.js"],"sourcesContent":["import React, { Component } from 'react';\nimport axios from 'axios';\nimport Firebase from \"../../firebase/firebase.js\";\n\nimport './Conversation.css';\n\nclass Conversation extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      userInput: '',\n      conversationHistory: [],\n      isTyping: false // added state for typing indicator\n    };\n    this.handleInputChange = this.handleInputChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.scrollDown = this.scrollDown.bind(this); // bind scrollDown function to this component\n  }\n\n  handleInputChange(event) {\n    this.setState({ userInput: event.target.value });\n  }\n\n  async handleSubmit(event) {\n    event.preventDefault();\n    const userInput = this.state.userInput.trim();\n    if (!userInput) return;\n    const conversationHistory = [\n      ...this.state.conversationHistory,\n      { speaker: \"user\", text: userInput },\n    ];\n    this.setState({\n      conversationHistory,\n      userInput: \"\",\n      isTyping: true,\n    });\n  \n    let aiResponse = \"\";\n  \n    try {  \n      if (process.env.NODE_ENV != \"production\") {    \n        const openAIAPI = await Firebase.getOpenAIAPI();\n        const openaiApiKey = Array.isArray(openAIAPI) ? openAIAPI.join(\"\") : openAIAPI;\n        const conversationHistory = await Firebase.getConversationHistory()\n        const conversationHistoryString = conversationHistory.join(\"\");\n\n        const { Configuration, OpenAIApi } = require(\"openai\");\n        const configuration = new Configuration({\n          apiKey: openaiApiKey,\n        });\n\n        delete configuration.baseOptions.headers['User-Agent'];\n\n        const openai = new OpenAIApi(configuration);\n        const response = await openai.createCompletion({\n          model: \"text-davinci-003\",\n          prompt: `${conversationHistoryString}\\nUser: ${userInput}\\nAI:`,\n          max_tokens: 150,\n          n: 1,\n          stop: [\"\\nUser:\", \"AI:\"]\n        });\n  \n        aiResponse = response.data.choices[0].text.trim();\n      } else {\n        const response = await axios.post(\"http://localhost:5000/ask\", {\n          inputText: userInput,\n        });\n\n        aiResponse = response.data\n      }\n  \n      const newConversationHistory = [\n        ...this.state.conversationHistory,\n        { speaker: \"ai\", text: aiResponse },\n      ];\n      this.setState(\n        { conversationHistory: newConversationHistory, isTyping: false },\n        this.scrollDown\n      );\n    } catch (error) {\n      console.log(error);\n    }\n  }\n  \n  // this function will scroll the conversationHistory div to the bottom\n  scrollDown() {\n    const conversationHistory = document.querySelector('.Conversation-history');\n    conversationHistory.scrollTop = conversationHistory.scrollHeight;\n  }\n\n  oncloseCoonversationClick() {\n    this.props.oncloseCoonversationClick();\n  }\n  \n  render() {\n    const { conversationHistory, userInput, isTyping } = this.state;\n\n    return (\n      <div className=\"Conversation-container l-container\">\n        <div className=\"Conversation-history\">\n          {conversationHistory.map((message, i) => (\n            <div key={i} className={\"Conversation-message\"}>\n              <div className=\"message-text\">{message.text}</div>\n            </div>\n          ))}\n          {isTyping && // render typing indicator if isTyping is true\n            <div className=\"Conversation-message ai Conversation-loader\">\n              <div className=\"message-text\">\n                <div className=\"typing-indicator\">\n                  <span></span>\n                  <span></span>\n                  <span></span>\n                </div>\n              </div>\n            </div>\n          }\n        </div>\n        <form className=\"Conversation-input\" onSubmit={this.handleSubmit}>\n          <input type=\"text\" value={userInput} onChange={this.handleInputChange} />\n          <button type=\"submit\">Send</button>\n        </form>\n      </div>\n    );\n  }\n}\n\nexport default Conversation;\n","import firebase from \"firebase\";\n\nclass Firebase {\n  getScripts = () =>{\n    return new Promise(resolve => {\n      firebase.database()\n      .ref('/scripts/')\n      .once('value')\n      .then(snapshot => {\n        if (snapshot.val()){\n          resolve(Object.values(snapshot.val()))\n        }else{\n          resolve({})\n        }\n      })\n    })\n  }\n\n  getFylds = () =>{\n    return new Promise(resolve => {\n      firebase.database()\n      .ref('/fylds/')\n      .once('value')\n      .then(snapshot => {\n        if (snapshot.val()){\n          resolve(Object.values(snapshot.val()))\n        }else{\n          resolve({})\n        }\n      })\n    })\n  }\n\n  createFyld = (fyld) => {\n    return new Promise(resolve => {\n      firebase.database()\n      .ref('/fylds/' + fyld.name.replace(/\\s/g, '') + '/')\n      .set(\n        {\n          name: fyld.name,\n          dateCreated: fyld.dateCreated,\n          description: fyld.description,\n          image: fyld.image,\n          friends: fyld.friends,\n        }\n      )\n      .then((response) => {\n        console.log(\"response\", response)\n        resolve(true)\n      })\n      .catch(error => {\n        console.log(\"error\", error)\n      })\n    })\n  }\n\n  createNewScript = (script) => {\n    return new Promise(resolve => {\n      firebase.database()\n      .ref('/scripts/' + script.id + '/')\n      .set(\n        {\n          id: script.id,\n          name: script.name,\n          dateCreated: script.dateCreated,\n          cast: script.cast,\n          crew: script.crew,\n          messages: script.messages,\n          isPrivateScript: script.isPrivateScript,\n        }\n      )\n      .then((response) => {\n        console.log(\"response\", response)\n        resolve(true)\n      })\n      .catch(error => {\n        console.log(\"error\", error)\n      })\n    })\n  }\n\n  updateScript = (script) => {\n    return new Promise(resolve => {\n      firebase.database()\n      .ref('/scripts/' + script.id + '/')\n      .update(\n        {\n          id: script.id,\n          name: script.name,\n          dateCreated: script.dateCreated,\n          cast: script.cast,\n          crew: script.crew,\n          messages: script.messages,\n          scenes: script.scenes,\n          readerReactionMap: script.readerReactionMap,\n          isPrivateScript: script.isPrivateScript,\n        }\n      )\n      .then((response) => {\n        console.log(\"response\", response)\n        resolve(true)\n      })\n      .catch(error => {\n        console.log(\"error\", error)\n      })\n    })\n  }\n\n  getOpenAIAPI = () => {\n    return new Promise(resolve => {\n      firebase.database()\n      .ref('/openAIAPI/')\n      .once('value')\n      .then(snapshot => {\n        if (snapshot.val()){\n          resolve(Object.values(snapshot.val()))\n        }else{\n          resolve({})\n        }\n      })\n    })\n  }\n\n  getConversationHistory = () => {\n    return new Promise(resolve => {\n      firebase.database()\n      .ref('/conversationHistory/')\n      .once('value')\n      .then(snapshot => {\n        if (snapshot.val()){\n          resolve(Object.values(snapshot.val()))\n        }else{\n          resolve({})\n        }\n      })\n    })\n  }\n\n  getRimiSenTitles = () =>{\n    return new Promise(resolve => {\n      firebase.database()\n      .ref('/rimiLyrics/')\n      .once('value')\n      .then(snapshot => {\n        if (snapshot.val()){\n          resolve(Object.values(snapshot.val()))\n        }else{\n          resolve({})\n        }\n      })\n    })\n  }\n\n  postChats = (seller, buyer, message, productId, senderID) => {\n    return new Promise(resolve => {\n      firebase.database().\n      ref('/chats/' + seller + '/' + productId + '/' + buyer + '/').\n      push({\n        content: message,\n        timestamp: Date.now(),\n        uid: senderID,\n      }).\n      then(() => {\n        resolve(true)\n      }).catch(error =>{\n        resolve({})\n      })\n    })\n  }\n\n  storage = () => {\n    return firebase.storage()\n  }\n\n  getRimiSenTitles = () =>{\n    return new Promise(resolve => {\n      firebase.database()\n      .ref('/rimiLyrics/')\n      .once('value')\n      .then(snapshot => {\n        if (snapshot.val()){\n          resolve(Object.values(snapshot.val()))\n        }else{\n          resolve({})\n        }\n      })\n    })\n  }\n\n  getScriptById = (id) => {\n    return new Promise(resolve => {\n      firebase.database()\n      .ref('/scripts/'+id)\n      .once('value')\n      .then(snapshot => {\n        if (snapshot.val()){\n          resolve(Object(snapshot.val()))\n        }else{\n          resolve({})\n        }\n      })\n    })\n  }\n\n  updateSenTitle = (update) =>{\n    return new Promise(resolve => {\n      firebase.database()\n      .ref(`/rimis/${update.id}/`)\n      .update(\n        {\n          senTitle: update.newSenTitle,\n        },\n      )\n      .then((response) => {\n        return new Promise(resolve => {\n          firebase.database()\n          .ref(`/rimis/${update.id}/updates/${update.updateId}`)\n          .remove()\n          .then(() => {\n            resolve(true)\n          }).catch( (error) =>{\n            console.log(\"error\", error)\n          })\n        })\n        .then((response) => {\n          resolve(true)\n        })\n        .catch(error => {\n          console.log(\"error\", error)\n        })\n      })\n      .catch(error => {\n        console.log(\"error\", error)\n      })\n    })\n\n  }\n\n  sendForApproval = (item) => {\n    return new Promise(resolve => {\n      firebase.database()\n      .ref('/rimis/'+item.id+'/updates/' + item.updateId + '/')\n      .set(item)\n      .then((response) => {\n        console.log(\"response\", response)\n        resolve(true)\n      })\n      .catch(error => {\n        console.log(\"error\", error)\n      })\n    })\n  }\n\n  updateVideoSnippetURL = (orderId, snippetVideoURL) => {\n    return new Promise(resolve => {\n      firebase.database()\n      .ref('/orders/' + orderId + '/')\n      .update({snippetVideoURL})\n      .then((response) => {\n        console.log(\"response\", response)\n        resolve(true)\n      })\n      .catch(error => {\n        console.log(\"error\", error)\n      })\n    })\n  }\n}\n\nexport default new Firebase();\n"],"names":["Conversation","_Component","_inherits","_super","_createSuper","props","_this","_classCallCheck","call","state","userInput","conversationHistory","isTyping","handleInputChange","bind","_assertThisInitialized","handleSubmit","scrollDown","_createClass","key","value","event","this","setState","target","aiResponse","openAIAPI","openaiApiKey","_conversationHistory","conversationHistoryString","_require","Configuration","OpenAIApi","configuration","openai","response","_response","newConversationHistory","_regeneratorRuntime","_context","prev","next","preventDefault","trim","abrupt","concat","_toConsumableArray","speaker","text","sent","Array","isArray","join","Firebase","require","apiKey","baseOptions","headers","createCompletion","model","prompt","max_tokens","n","stop","data","choices","axios","inputText","t0","console","log","Promise","document","querySelector","scrollTop","scrollHeight","oncloseCoonversationClick","_this$state","React","className","map","message","i","onSubmit","type","onChange","Component","getScripts","resolve","firebase","ref","once","then","snapshot","val","Object","values","getFylds","createFyld","fyld","name","replace","set","dateCreated","description","image","friends","catch","error","createNewScript","script","id","cast","crew","messages","isPrivateScript","updateScript","update","scenes","readerReactionMap","getOpenAIAPI","getConversationHistory","getRimiSenTitles","postChats","seller","buyer","productId","senderID","push","content","timestamp","Date","now","uid","storage","getScriptById","updateSenTitle","senTitle","newSenTitle","updateId","remove","sendForApproval","item","updateVideoSnippetURL","orderId","snippetVideoURL"],"sourceRoot":""}