{"version":3,"file":"static/js/725.8bb21574.chunk.js","mappings":"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","sources":["src/components/Conversation/Conversation.js","src/components/ReaderView/ReaderView.js","src/components/Script/Script.js","src/firebase/firebase.js"],"sourcesContent":["import React, { Component } from 'react';\nimport axios from 'axios';\nimport Firebase from \"../../firebase/firebase.js\";\n\nimport './Conversation.css';\n\nclass Conversation extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      userInput: '',\n      conversationHistory: [],\n      isTyping: false // added state for typing indicator\n    };\n    this.handleInputChange = this.handleInputChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.scrollDown = this.scrollDown.bind(this); // bind scrollDown function to this component\n  }\n\n  handleInputChange(event) {\n    this.setState({ userInput: event.target.value });\n  }\n\n  async handleSubmit(event) {\n    event.preventDefault();\n    const userInput = this.state.userInput.trim();\n    if (!userInput) return;\n    const conversationHistory = [\n      ...this.state.conversationHistory,\n      { speaker: \"user\", text: userInput },\n    ];\n    this.setState({\n      conversationHistory,\n      userInput: \"\",\n      isTyping: true,\n    });\n  \n    let aiResponse = \"\";\n  \n    try {  \n      if (process.env.NODE_ENV != \"production\") {    \n        const openAIAPI = await Firebase.getOpenAIAPI();\n        const openaiApiKey = Array.isArray(openAIAPI) ? openAIAPI.join(\"\") : openAIAPI;\n        const conversationHistory = await Firebase.getConversationHistory()\n        const conversationHistoryString = conversationHistory.join(\"\");\n\n        const { Configuration, OpenAIApi } = require(\"openai\");\n        const configuration = new Configuration({\n          apiKey: openaiApiKey,\n        });\n\n        delete configuration.baseOptions.headers['User-Agent'];\n\n        const openai = new OpenAIApi(configuration);\n        const response = await openai.createCompletion({\n          model: \"text-davinci-003\",\n          prompt: `${conversationHistoryString}\\nUser: ${userInput}\\nAI:`,\n          max_tokens: 150,\n          n: 1,\n          stop: [\"\\nUser:\", \"AI:\"]\n        });\n  \n        aiResponse = response.data.choices[0].text.trim();\n      } else {\n        const response = await axios.post(\"http://localhost:5000/ask\", {\n          inputText: userInput,\n        });\n\n        aiResponse = response.data\n      }\n  \n      const newConversationHistory = [\n        ...this.state.conversationHistory,\n        { speaker: \"ai\", text: aiResponse },\n      ];\n      this.setState(\n        { conversationHistory: newConversationHistory, isTyping: false },\n        this.scrollDown\n      );\n    } catch (error) {\n      console.log(error);\n    }\n  }\n  \n  // this function will scroll the conversationHistory div to the bottom\n  scrollDown() {\n    const conversationHistory = document.querySelector('.Conversation-history');\n    conversationHistory.scrollTop = conversationHistory.scrollHeight;\n  }\n\n  oncloseCoonversationClick() {\n    this.props.oncloseCoonversationClick();\n  }\n  \n  render() {\n    const { conversationHistory, userInput, isTyping } = this.state;\n\n    return (\n      <div className=\"Conversation-container l-container\">\n        <div className=\"Conversation-history\">\n          {conversationHistory.map((message, i) => (\n            <div key={i} className={\"Conversation-message\"}>\n              <div className=\"message-text\">{message.text}</div>\n            </div>\n          ))}\n          {isTyping && // render typing indicator if isTyping is true\n            <div className=\"Conversation-message ai Conversation-loader\">\n              <div className=\"message-text\">\n                <div className=\"typing-indicator\">\n                  <span></span>\n                  <span></span>\n                  <span></span>\n                </div>\n              </div>\n            </div>\n          }\n        </div>\n        <form className=\"Conversation-input\" onSubmit={this.handleSubmit}>\n          <input type=\"text\" value={userInput} onChange={this.handleInputChange} />\n          <button type=\"submit\">Send</button>\n        </form>\n      </div>\n    );\n  }\n}\n\nexport default Conversation;\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { withRouter } from \"react-router-dom\";\nimport Script from \"../Script/Script.js\";\nimport { Emoji } from 'emoji-mart'\nimport Conversation from \"../Conversation/Conversation.js\";\n\nimport \"./ReaderView.css\";\n\nclass ConnectedReaderView extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      script: null,\n      allMessages: [],\n      currentNodeIndex: 0,\n      selectedSceneId: 1,\n      timeoutId: null,\n      isPlaying: true,\n      showConversation: false,\n    };\n\n    this.emojis = [\n      {name: \"rolling_on_the_floor_laughing\", set: \"twitter\", size: 14, className: \"ReaderView-reactionEmoji\"},\n      {name: \"relaxed\", set: \"twitter\", size: 14, className: \"ReaderView-reactionEmoji\"},\n      {name: \"angry\", set: \"twitter\", size: 14, className: \"ReaderView-reactionEmoji\"},\n      {name: \"astonished\", set: \"twitter\", size: 14, className: \"ReaderView-reactionEmoji\"},\n      {name: \"kissing_heart\", set: \"twitter\", size: 14, className: \"ReaderView-reactionEmoji\"},\n      {name: \"exploding_head\", set: \"twitter\", size: 14, className: \"ReaderView-reactionEmoji\"},\n      {name: \"pensive\", set: \"twitter\", size: 14, className: \"ReaderView-reactionEmoji\"},\n      {name: \"scream\", set: \"twitter\", size: 14, className: \"ReaderView-reactionEmoji\"},\n    ]\n  }\n\n  componentDidUpdate(){\n    if(document.querySelector('.ReaderView-chatArea')){\n      const chatArea = document.querySelector(\".ReaderView-chatArea\");\n      const startPosition = chatArea.scrollTop;\n      const endPosition = chatArea.scrollHeight;\n      const duration = 1000; // 1 second\n      const numberOfSteps = 10;\n      const stepDuration = duration / numberOfSteps;\n      const scrollAmount = (endPosition - startPosition) / numberOfSteps;\n      \n      let currentStep = 0;\n    \n      const animateScrollStep = function() {\n        chatArea.scrollTop += scrollAmount;\n        currentStep++;\n        if (currentStep < numberOfSteps) {\n          setTimeout(animateScrollStep, stepDuration);\n        }\n      }\n    \n      setTimeout(animateScrollStep, stepDuration);\n    }\n\n    const currentScene = document.querySelector(\".ReaderView-scene--currentScene\");\n    const scenes = document.querySelector(\".ReaderView-scenes\");\n    if (currentScene) {\n      scenes.scrollLeft = currentScene.offsetLeft - scenes.offsetLeft - (scenes.offsetWidth - currentScene.offsetWidth) / 2;\n    }\n\n    if(document.querySelector('.ReaderView-readerReaction')){\n      const chatArea = document.querySelector(\".ReaderView-readerReaction\");\n      chatArea.scrollLeft = chatArea.scrollWidth;\n    }\n\n    const msgElements = document.querySelectorAll(\".ReaderView-chatArea-msg\");\n    for (const msgElement of msgElements) {\n      if (msgElement.getAttribute(\"data-attribute-ispotagonist\") === \"true\") {\n        msgElement.classList.add(\"isProtagonist\");\n      }\n    }\n  }\n\n  componentDidMount() {\n    let scriptId = this.props.match.params.id\n    if (scriptId == \"\") {\n      scriptId = \"NewScript1674709550\"\n    }\n\n    let textyng = new Script(scriptId);\n    textyng\n      .grabScriptFromFirebase(scriptId)\n      .then(() => {\n        this.setState({ script: textyng }, () => {\n          this.updateCurrentNode();\n          // this.startAutoPlay(); TODO: uncomment this line to autoplay\n          this.handleNextClick();\n        });\n      });\n  }\n\n  updateCurrentNode(index = this.state.currentNodeIndex + 1) {\n    if (!this.state.script || !this.state.script.getNthMessageNode(index)) {\n      return;\n    }\n  \n    let sceneId = this.state.script.getNthMessageNode(index).sceneId;\n    if (sceneId === undefined) {\n        sceneId = this.state.script.getTotalNumScenes();\n    }\n    this.setState({\n        currentNodeIndex: index,\n        allMessages: this.state.script.getAllMessagesAsNodes().slice(0, index),\n        selectedSceneId: sceneId\n    });\n  }\n\n  startAutoPlay() {\n    if (this.state.isPlaying && this.state.currentNodeIndex < this.state.script.getAllMessagesAsNodes().length) {\n      this.setState({\n        timeoutId: setTimeout(() => {\n          this.handleNextClick();\n        }, this.state.script.getNthMessageNode(this.state.currentNodeIndex).tslmsg * 20)\n      });\n    }\n  }\n\n  handlePreviousClick = () => {\n    // check if script is null\n    if (!this.state.script) {\n        return;\n    }\n    clearTimeout(this.state.timeoutId);\n    this.setState(prevState => {\n        if (prevState.currentNodeIndex === 0) {\n            return {}; // no further action needed\n        }\n        let prevNodeIndex = prevState.currentNodeIndex - 1;\n        let sceneId = this.state.script.getNthMessageNode(prevNodeIndex).sceneId;\n        if (sceneId === undefined) {\n            sceneId = this.state.script.getTotalNumScenes();\n        }\n        let newAllMessages = prevState.allMessages.slice();\n        if (prevState.allMessages.length === 1) {\n            newAllMessages = prevState.allMessages; // don't update to an empty array\n        } else {\n            newAllMessages = this.state.script.getAllMessagesAsNodes().slice(0, prevNodeIndex);\n        }\n        return {\n            currentNodeIndex: prevNodeIndex,\n            allMessages: newAllMessages,\n            selectedSceneId: sceneId\n        };\n    });\n  };\n\n  handleSpanClick = () => {\n    this.setState({ showConversation: true });\n  }\n\n  handlePlayPauseClick = () => {\n    clearTimeout(this.state.timeoutId);\n    this.setState(prevState => ({ isPlaying: !prevState.isPlaying }));\n  };\n\n  handleNextClick = () => {\n    clearTimeout(this.state.timeoutId);\n    this.updateCurrentNode(this.state.currentNodeIndex + 1);\n    // this.startAutoPlay(); //TODO: uncomment this line to autoplay\n  };\n\n  getScriptName = (name) => {\n    return name[1]\n  }\n\n  selectThisScene = (sceneId) => {\n    this.setState({\n      selectedSceneId: sceneId,\n      allMessages: this.state.script.getAllMessagesAsNodes(),\n    })\n  }\n\n  reactionClicked = (emojiName, messageId, event) => {\n    event.currentTarget.classList.add('shake');\n    this.state.script.updateReaderReaction(emojiName, messageId)\n  }\n\n  getReaderReactionFromMsg = () => {\n    let reactionArray = [];\n    this.state.allMessages.forEach(message => {\n      if(this.state.script.getReaderReactionMap().has(message.id.toString())) {\n        reactionArray.push(...this.state.script.getReaderReactionMap().get(message.id.toString()));\n      }\n    });\n\n    let readerEmojiReactions = reactionArray.map((emoji, index) => (\n      <Emoji\n        emoji={emoji}\n        set={\"twitter\"}\n        size={14}\n        key={index}\n        className=\"ReaderView-reactionEmoji\"\n      />\n    ));\n\n    return readerEmojiReactions\n  }\n\n  closeConversation = () => {\n    this.setState({ showConversation: false });\n  }\n\n  render() {\n    const { script, selectedMessageIndex } = this.state;\n    const senderName = (message) => script.getSenderNameFromID(message.senderId);\n    \n\t\tif(this.state.allMessages && this.state.allMessages.length > 0){\n\t\t\treturn (\n        <div className=\"ReaderView\">\n          <div className=\"ReaderView-container l-container\">\n            <div className=\"ReaderView-title\">\n              {this.state.script.getScriptName()}\n            </div>\n            <div className=\"ReaderView-scenes\">\n              {this.state.script.getScenes()\n              .map((scene, index) =>\n                scene.id == this.state.selectedSceneId ? (\n                  <div key={index} onClick={() => this.selectThisScene(scene.id)} className=\"ReaderView-scene ReaderView-scene--currentScene\">\n                    {scene.name}\n                  </div>\n                ) : (\n                  <div key={index} onClick={() => this.selectThisScene(scene.id)} className=\"ReaderView-scene\">\n                    {scene.name}\n                  </div>\n                )\n              )}\n            </div>\n            <div className=\"ReaderView-msgCounts\">\n              {this.state.allMessages.length} / {this.state.script.getAllMessagesAsNodes().length}\n            </div>\n            <div className=\"ReaderView-textView\">\n              <div id=\"ReaderView-chatArea-id\" className=\"ReaderView-chatArea\">\n                {this.state.allMessages\n                .map((message, index) => (\n                  (message.sceneId == this.state.selectedSceneId)\n                  &&\n                  <div key={index} className=\"ReaderView-chatArea-msg\" data-attribute-ispotagonist={message.senderId === 1 ? true : false}>\n                    {message.isImg &&\n                      <img\n                        className=\"ReaderView-imgMsg\"\n                        src={message.url}\n                      />\n                    }\n                    {message.isAudio &&\n                      <audio\n                        className=\"ReaderView-audioMsg\"\n                        src={message.url}\n                        controls\n                      />\n                    }\n                    {message.isVideo &&\n                      <video\n                        className=\"ReaderView-videoMsg\"\n                        src={message.url}\n                        controls\n                      />\n                    }\n                    {/* //TODO: delete very msgtype like of an original message if original message was deleted */}\n                    {message.msgType == \"like\" && this.state.script.getNodeByMessageId(message.idOfMsgLiked) &&\n                      <div\n                        className=\"ReaderView-msgLike\"\n                      >\n                        <span>\n                          {this.state.script.getSenderNameFromID(message.whoLikedMsg)}&nbsp;\n                          liked message&nbsp;\n                          {this.state.script.getNodeByMessageId(message.idOfMsgLiked).data.MsgIndex}&nbsp;\n                          by&nbsp;\n                          {this.state.script.getSenderNameFromID(message.whoSentLikedMsg)}&nbsp;\n                        </span>\n                      </div>\n                    }\n                    {message.msgType == \"action\" &&\n                      <div\n                        className=\"ReaderView-msgTypeAction glowing-text\"\n                      >\n                          <span className=\"ReaderView-senderName\">{this.state.script.getSenderNameFromID(message.senderId)}</span>\n                          <span>y: {message.content}</span> \n                      </div>\n                    }\n                    {message.msgType == \"authorAction\" &&\n                      <div\n                        className=\"ReaderView-msgTypeAuthorAction glowing-text\"\n                      >\n                        <div className=\"ReaderView-content\">\n                          yy: {message.content}\n                        </div>\n                      </div>\n                    }\n                    {message.msgType != \"action\" && message.msgType != \"authorAction\" &&\n                      <div className=\"ReaderView-isnotactionMsg\">\n                        {this.state.showConversation ? (\n                          <div className=\"ReaderView-conversation-container\">\n                            <div className=\"ReaderView-conversation-close\" onClick={this.closeConversation}>\n                              X\n                            </div>\n                            <Conversation\n                              className = \"ReaderView-conversation\"\n                              messages={script.messages}\n                              selectedMessageIndex={selectedMessageIndex}\n                              oncloseCoonversationClick={this.closeConversation}\n                              senderName={senderName}  \n                            />\n                          </div>\n                        ) : (\n                          <span className=\"ReaderView-senderName checking something!\" onClick={this.handleSpanClick}>\n                            {this.state.script.getSenderNameFromID(message.senderId)}\n                          </span>\n                        )}\n                        <span className=\"ReaderView-senderEmotion\">{message.emotion ? '('+message.emotion + ')': ''}</span>\n                        <span>{message.content}</span>\n                      </div>\n                    }  \n                    <span className=\"ReaderView-msgIndex\">{message.MsgIndex}</span>\n                    <div className=\"ReaderView-reactionEmojis-container\">\n                      <div className=\"ReaderView-reactionEmojis\">\n                        {this.emojis.map((emoji, index)=> \n                          <div\n                            key={index}\n                            className=\"ReaderView-reactionEmoji\"\n                            onClick={(e) => this.reactionClicked(emoji.name, message.id, e)}\n                          >\n                            <Emoji \n                              emoji={emoji.name}\n                              set={emoji.set} \n                              size={emoji.size} \n                              key={emoji.name} \n                              className=\"ReaderView-reactionEmoji\"\n                            />\n                          </div>\n                        )}\n                      </div>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </div>\n            <div className=\"ReaderView-readerReaction--wrapper\">\n              <div className=\"ReaderView-readerReaction\"> {this.getReaderReactionFromMsg()}</div>                       \n            </div>\n            <div className=\"ReaderView-navigation\">\n              <div className=\"ReaderView-navigation--wrapper\">\n                <div className=\"previous-button\" onClick={this.handlePreviousClick}>\n                  <i className=\"fas fa-arrow-left\"></i>\n                </div>\n                {/* <div className=\"play-pause-button\" onClick={this.handlePlayPauseClick}>\n                  {this.state.isPlaying ? \n                    <i className=\"fas fa-pause\"></i> : \n                    <i className=\"fas fa-play\"></i>\n                  }  //TODO: add play pause functionality\n                </div> */}\n                <div className=\"next-button\" onClick={this.handleNextClick}>\n                  <i className=\"fas fa-arrow-right\"></i>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n    \t);\n\t\t}else{\n\t\t\treturn (\n        <div className=\"ReaderView is-loading\">\n\t\t\t\t\trytriving script\n        </div>\n    \t);\n\t\t}\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {};\n};\n\nlet ReaderView = withRouter(connect(mapStateToProps)(ConnectedReaderView));\nexport default withRouter(ReaderView);\n","import { DataArray } from \"@mui/icons-material\";\nimport React, { Component } from \"react\";\nimport firebase from \"../../firebase/firebase\";\n\nclass MessageNode {\n  constructor(data) {\n    this.data = data;\n    this.next = null;\n  }\n}\n\nclass Script {\n  constructor(name) {\n    var milliseconds = Math.floor(Date.now() / 1000)\n\n    this.name = name;\n    this.dateCreated = milliseconds\n    this.id = name + milliseconds\n    this.cast = [];\n    this.crew = [];\n    this.scenes = [];\n    this.head = null;\n    this.messages = new MessageNode();\n    this.node = {};\n    this.totalNoMsgs = 0;\n    this.readerReactionMap = new Map();\n    this.isPrivateScript = false;\n  }\n\n  updateScriptName(name){\n    this.name = name\n    this.updateIsPrivateScript()\n  }\n\n  updateIsPrivateScript(){\n    if(this.name.startsWith(\"yyyy\")){\n      this.isPrivateScript = true\n    }\n  }\n\n  numberOfMessages() {\n    let count = 0;\n    let node = this.head;\n    while (node) {\n      count++;\n      node = node.next;\n    }\n    return count;\n  }\n\n  getScenes(){\n    return this.scenes\n  }\n\n  updateReaderReaction(emojiName, messageId){\n    if (!this.readerReactionMap.has(messageId)) {\n      this.readerReactionMap.set(messageId, []);\n    }\n    this.readerReactionMap.get(messageId).push(emojiName);\n\n    this.updateScriptFirebase()\n  }\n\n  getReaderReactionMap(){\n    return this.readerReactionMap\n  }\n\n  getTotalNumScenes(){\n    return this.getScenes().length\n  }\n\n  deleteScript() {\n    this.head = null;\n  }\n\n  getLastMessage() {\n    let lastNode = this.head;\n    if (lastNode) {\n      while (lastNode.next) {\n        lastNode = lastNode.next;\n      }\n    }\n    return lastNode;\n  }\n\n  getFirstMessage() {\n    return this.head;\n  }\n\n  addNewMessage(data) {\n    this.totalNoMsgs += 1\n    data.MsgIndex = this.totalNoMsgs\n\n    let newNode = new MessageNode(data);\n\n    if (!this.head) {\n      this.head = newNode;\n      return this.head;\n    }\n\n    let current = this.head;\n    while (current.next) {\n      current = current.next;\n    }\n    current.next = newNode;\n  }\n\n  deleteMessage(id){\n    if (this.head.data.id === id) {\n      this.head = this.head.next;\n    } else {\n      let current = this.head;\n      while (current.next) {\n        if (current.next.data.id === id) {\n          current.next = current.next.next;\n          break;\n        }\n        current = current.next;\n      }\n    }\n    return this.head;\n  }\n\n  getLastMessage() {\n    let current = this.head;\n\n    while (current.next) {\n      current = current.next;\n    }\n\n    return current.data.content\n  }\n\n  getNthMessage(n) {\n    n -= 1\n    let current = this.head;\n\n    for(var i = 0; i < n; i++){\n      if (current){\n        current = current.next;\n      }else{\n        //nth message doesn't exist\n        return \"\"\n      }\n    }\n\n    return current.data.content\n  }\n\n  getNthMessageNode(n) {\n    n -= 1\n    let current = this.head;\n\n    for(var i = 0; i < n; i++){\n      if (current.next){\n        current = current.next;\n      }else{\n        //nth message doesn't exist\n        return \"\"\n      }\n    }\n\n    if (current){\n      return current.data\n    }\n\n    return null\n  }\n\n  getAllMessagesStringList() {\n    let messages = []\n    let current = this.head;\n\n    while (current) {\n      messages.push(current.data.content)\n      current = current.next;\n    }\n\n    return messages\n  }\n\n  getAllMessagesStringListBySenderId(senderId){\n    let messages = []\n    let current = this.head;\n\n    while (current) {\n      if (current.data.senderId == senderId){\n        messages.push(current.data)\n      }\n      current = current.next;\n    }\n\n    return messages\n  }\n\n  getOnlyTextMsgsAsNodes(){\n    let messages = []\n    let current = this.head;\n\n    while (current) {\n      if(current.data.msgType == \"textMsg\"){\n        messages.push(current.data)\n      }\n      current = current.next;\n    }\n\n    return messages\n  }\n\n  getOnlyCommentsAsNodes(){\n    let messages = []\n    let current = this.head;\n\n    while (current) {\n      if(current.data.msgType == \"comment\"){\n        messages.push(current.data)\n      }\n      current = current.next;\n    }\n\n    return messages\n  }\n\n  getCommentByCastIdMsgId(castId, msgId) {\n    let allComments = this.getOnlyCommentsAsNodes()\n\n    const result = allComments.find(obj => obj.whoCommentedMsg === castId && obj.idOfMsgCommented === msgId);\n\n    if(result){\n      return result.content\n    }\n\n    return ''\n  }\n\n  getCommentNodeByCastIdMsgId(castId, msgId) {\n    let allComments = this.getOnlyCommentsAsNodes()\n    return allComments.find(obj => obj.whoCommentedMsg === castId && obj.idOfMsgCommented === msgId);\n  }\n\n  editNodeContent(nodeId, newContent){\n    let currentNode = this.head;\n    while (currentNode) {\n\n      if (currentNode.data.id === nodeId) {\n        currentNode.data.content = newContent;\n        break;\n      }\n      currentNode = currentNode.next;\n    }\n\n    this.updateScriptFirebase()\n  }\n\n  getOnlyLikedMsgsAsNodes(){\n    let messages = []\n    let current = this.head;\n\n    while (current) {\n      if(current.data.msgType == \"like\"){\n        messages.push(current.data)\n      }\n      current = current.next;\n    }\n\n    return messages\n  }\n\n  getAllMessagesAsNodes() {\n    let messages = []\n    let current = this.head;\n\n    while (current) {\n      messages.push(current.data)\n      current = current.next;\n    }\n\n    return messages\n  }\n\n  getSenderNameFromID(senderId){\n    const mergedArray = this.getAllCast().concat(this.getAllCrew());\n\n    const sender = mergedArray.find(obj => obj.id === senderId);\n    if(sender){\n      return sender.name\n    }else{\n      return \"\"\n    }\n  }\n\n  sendScriptToFirebase() {\n    let script = {\n      id: this.id,\n      name: this.name,\n      dateCreated: this.dateCreated,\n      cast: this.getAllCast(),\n      crew: this.getAllCrew(),\n      messages: this.getAllMessagesAsNodes(),\n      scenes: this.getAllScenes(),\n      isPrivateScript: this.isPrivateScript,\n    }\n\n    firebase.createNewScript(script)\n  }\n\n  updateCast(cast){\n    this.cast = cast\n  }\n\n  updateScene(scenes){\n    this.scenes = scenes\n  }\n\n  //might have to update how we should understand this\n  isEmptyScript(){\n    return this.name == \"NewScript\"\n  }\n\n  updateScriptFirebase(){\n\n    if (!this.isEmptyScript()){\n      let script = {\n        id: this.id,\n        name: this.name,\n        dateCreated: this.dateCreated,\n        cast: this.getAllCast(),\n        crew: this.getAllCrew(),\n        messages: this.getAllMessagesAsNodes(),\n        scenes: this.getAllScenes(),\n        readerReactionMap: JSON.stringify(Object.fromEntries(this.readerReactionMap)),\n        isPrivateScript: this.isPrivateScript,\n      }\n  \n      firebase.updateScript(script)\n    }\n  }\n\n  removeCast(cast){\n    let newCast = []\n\n    this.cast.forEach((existingCast) => {\n      if (existingCast.id != cast.id){\n        newCast.push(existingCast)\n      }\n    })\n\n    this.cast = newCast\n  }\n\n  addNewCrew(crew){\n    this.crew.push(crew)\n  }\n\n  getAllCast(){\n    return this.cast\n  }\n\n  getAllScenes(){\n    return this.scenes\n  }\n\n  getCastIdToName(){\n    const idNameMap = new Map();\n    for (const object of this.getAllCast) {\n      idNameMap.set(object.id, object.name);\n    }\n    return idNameMap;\n  }\n\n  getAllCrew(){\n    return this.crew\n  }\n\n  removeCrew(crew){\n    let newCrew = []\n\n    this.crew.forEach((existingCrew) => {\n      if (existingCrew.id != crew.id){\n        newCrew.push(existingCrew)\n      }\n    })\n\n    this.crew = newCrew\n  }\n\n  getScriptName() {\n    return this.name;\n  }\n  \n  grabScriptFromFirebase(scriptId){\n    return new Promise(resolve => {\n      firebase.getScriptById(scriptId)\n      .then(val => {\n\n        if(val.messages){\n          let messages = val.messages\n          for(var i=0; i<messages.length; i++){\n            this.addNewMessage(messages[i])\n          }\n        }\n\n        //grab user reactions\n        let readerReactionMap = new Map();\n        if(val.readerReactionMap){\n          let javascriptObject = JSON.parse(val.readerReactionMap);\n          readerReactionMap = new Map(Object.entries(javascriptObject));\n        }\n\n        this.name = val.name;\n        this.dateCreated = val.dateCreated\n        this.id = val.id\n        this.cast = val.cast ? val.cast : []\n        this.crew = val.crew ? val.crew : []\n        this.scenes = val.scenes ? val.scenes : []\n        this.readerReactionMap = readerReactionMap\n        this.isPrivateScript = val.isPrivateScript ? val.isPrivateScript : false\n      })\n      .then(() => {\n        resolve(this)\n      })\n    })\n  }\n\n  getNodeByMessageId(messageId){\n    let currentNode = this.head;\n    while (currentNode) {\n      if (currentNode.data.id === messageId) {\n        return currentNode;\n      }\n      currentNode = currentNode.next;\n    }\n    return null;\n  }\n\n  getMsgType(messageId){\n    let message = getNodeByMessageId(messageId)\n\n    if (message.msgType){\n      return message.msgType\n    }\n\n    return \"textMsg\"\n  }\n}\n\nexport default Script;","import firebase from \"firebase\";\n\nclass Firebase {\n  getScripts = () =>{\n    return new Promise(resolve => {\n      firebase.database()\n      .ref('/scripts/')\n      .once('value')\n      .then(snapshot => {\n        if (snapshot.val()){\n          resolve(Object.values(snapshot.val()))\n        }else{\n          resolve({})\n        }\n      })\n    })\n  }\n\n  getFylds = () =>{\n    return new Promise(resolve => {\n      firebase.database()\n      .ref('/fylds/')\n      .once('value')\n      .then(snapshot => {\n        if (snapshot.val()){\n          resolve(Object.values(snapshot.val()))\n        }else{\n          resolve({})\n        }\n      })\n    })\n  }\n\n  createFyld = (fyld) => {\n    return new Promise(resolve => {\n      firebase.database()\n      .ref('/fylds/' + fyld.name.replace(/\\s/g, '') + '/')\n      .set(\n        {\n          name: fyld.name,\n          dateCreated: fyld.dateCreated,\n          description: fyld.description,\n          image: fyld.image,\n          friends: fyld.friends,\n        }\n      )\n      .then((response) => {\n        console.log(\"response\", response)\n        resolve(true)\n      })\n      .catch(error => {\n        console.log(\"error\", error)\n      })\n    })\n  }\n\n  createGrypcht = (grypcht) => {\n    return new Promise(resolve => {\n      firebase.database()\n      .ref('/grypchts/' + grypcht.id + '/')\n      .set(\n        {\n          id: grypcht.id,\n          groupName: grypcht.groupName,\n          members: grypcht.members,\n          dateCreated: grypcht.dateCreated,\n          description: grypcht.description,\n          isPrivateGrypcht: grypcht.isPrivateGrypcht,\n        }\n      )\n      .then((response) => {\n        console.log(\"response\", response)\n        resolve(true)\n      })\n      .catch(error => {\n        console.log(\"error\", error)\n      })\n    })\n  }\n\n\n  createNewScript = (script) => {\n    return new Promise(resolve => {\n      firebase.database()\n      .ref('/scripts/' + script.id + '/')\n      .set(\n        {\n          id: script.id,\n          name: script.name,\n          dateCreated: script.dateCreated,\n          cast: script.cast,\n          crew: script.crew,\n          messages: script.messages,\n          isPrivateScript: script.isPrivateScript,\n        }\n      )\n      .then((response) => {\n        console.log(\"response\", response)\n        resolve(true)\n      })\n      .catch(error => {\n        console.log(\"error\", error)\n      })\n    })\n  }\n\n  updateScript = (script) => {\n    return new Promise(resolve => {\n      firebase.database()\n      .ref('/scripts/' + script.id + '/')\n      .update(\n        {\n          id: script.id,\n          name: script.name,\n          dateCreated: script.dateCreated,\n          cast: script.cast,\n          crew: script.crew,\n          messages: script.messages,\n          scenes: script.scenes,\n          readerReactionMap: script.readerReactionMap,\n          isPrivateScript: script.isPrivateScript,\n        }\n      )\n      .then((response) => {\n        console.log(\"response\", response)\n        resolve(true)\n      })\n      .catch(error => {\n        console.log(\"error\", error)\n      })\n    })\n  }\n\n  getOpenAIAPI = () => {\n    return new Promise(resolve => {\n      firebase.database()\n      .ref('/openAIAPI/')\n      .once('value')\n      .then(snapshot => {\n        if (snapshot.val()){\n          resolve(Object.values(snapshot.val()))\n        }else{\n          resolve({})\n        }\n      })\n    })\n  }\n\n  getConversationHistory = () => {\n    return new Promise(resolve => {\n      firebase.database()\n      .ref('/conversationHistory/')\n      .once('value')\n      .then(snapshot => {\n        if (snapshot.val()){\n          resolve(Object.values(snapshot.val()))\n        }else{\n          resolve({})\n        }\n      })\n    })\n  }\n\n  getRimiSenTitles = () =>{\n    return new Promise(resolve => {\n      firebase.database()\n      .ref('/rimiLyrics/')\n      .once('value')\n      .then(snapshot => {\n        if (snapshot.val()){\n          resolve(Object.values(snapshot.val()))\n        }else{\n          resolve({})\n        }\n      })\n    })\n  }\n\n  postChats = (seller, buyer, message, productId, senderID) => {\n    return new Promise(resolve => {\n      firebase.database().\n      ref('/chats/' + seller + '/' + productId + '/' + buyer + '/').\n      push({\n        content: message,\n        timestamp: Date.now(),\n        uid: senderID,\n      }).\n      then(() => {\n        resolve(true)\n      }).catch(error =>{\n        resolve({})\n      })\n    })\n  }\n\n  storage = () => {\n    return firebase.storage()\n  }\n\n  getRimiSenTitles = () =>{\n    return new Promise(resolve => {\n      firebase.database()\n      .ref('/rimiLyrics/')\n      .once('value')\n      .then(snapshot => {\n        if (snapshot.val()){\n          resolve(Object.values(snapshot.val()))\n        }else{\n          resolve({})\n        }\n      })\n    })\n  }\n\n  getScriptById = (id) => {\n    return new Promise(resolve => {\n      firebase.database()\n      .ref('/scripts/'+id)\n      .once('value')\n      .then(snapshot => {\n        if (snapshot.val()){\n          resolve(Object(snapshot.val()))\n        }else{\n          resolve({})\n        }\n      })\n    })\n  }\n\n  updateSenTitle = (update) =>{\n    return new Promise(resolve => {\n      firebase.database()\n      .ref(`/rimis/${update.id}/`)\n      .update(\n        {\n          senTitle: update.newSenTitle,\n        },\n      )\n      .then((response) => {\n        return new Promise(resolve => {\n          firebase.database()\n          .ref(`/rimis/${update.id}/updates/${update.updateId}`)\n          .remove()\n          .then(() => {\n            resolve(true)\n          }).catch( (error) =>{\n            console.log(\"error\", error)\n          })\n        })\n        .then((response) => {\n          resolve(true)\n        })\n        .catch(error => {\n          console.log(\"error\", error)\n        })\n      })\n      .catch(error => {\n        console.log(\"error\", error)\n      })\n    })\n\n  }\n\n  sendForApproval = (item) => {\n    return new Promise(resolve => {\n      firebase.database()\n      .ref('/rimis/'+item.id+'/updates/' + item.updateId + '/')\n      .set(item)\n      .then((response) => {\n        console.log(\"response\", response)\n        resolve(true)\n      })\n      .catch(error => {\n        console.log(\"error\", error)\n      })\n    })\n  }\n\n  updateVideoSnippetURL = (orderId, snippetVideoURL) => {\n    return new Promise(resolve => {\n      firebase.database()\n      .ref('/orders/' + orderId + '/')\n      .update({snippetVideoURL})\n      .then((response) => {\n        console.log(\"response\", response)\n        resolve(true)\n      })\n      .catch(error => {\n        console.log(\"error\", error)\n      })\n    })\n  }\n}\n\nexport default new Firebase();\n"],"names":["Conversation","_Component","_inherits","_super","_createSuper","props","_this","_classCallCheck","call","state","userInput","conversationHistory","isTyping","handleInputChange","bind","_assertThisInitialized","handleSubmit","scrollDown","_createClass","key","value","event","this","setState","target","aiResponse","openAIAPI","openaiApiKey","_conversationHistory","conversationHistoryString","_require","Configuration","OpenAIApi","configuration","openai","response","_response","newConversationHistory","_regeneratorRuntime","_context","prev","next","preventDefault","trim","abrupt","concat","_toConsumableArray","speaker","text","sent","Array","isArray","join","Firebase","require","apiKey","baseOptions","headers","createCompletion","model","prompt","max_tokens","n","stop","data","choices","axios","inputText","t0","console","log","Promise","document","querySelector","scrollTop","scrollHeight","oncloseCoonversationClick","_this$state","React","className","map","message","i","onSubmit","type","onChange","Component","ConnectedReaderView","handlePreviousClick","script","clearTimeout","timeoutId","prevState","currentNodeIndex","prevNodeIndex","sceneId","getNthMessageNode","undefined","getTotalNumScenes","allMessages","slice","length","getAllMessagesAsNodes","selectedSceneId","handleSpanClick","showConversation","handlePlayPauseClick","isPlaying","handleNextClick","updateCurrentNode","getScriptName","name","selectThisScene","reactionClicked","emojiName","messageId","currentTarget","classList","add","updateReaderReaction","getReaderReactionFromMsg","reactionArray","forEach","getReaderReactionMap","has","id","toString","push","apply","get","emoji","index","Emoji","set","size","closeConversation","emojis","chatArea","startPosition","endPosition","scrollAmount","currentStep","setTimeout","animateScrollStep","duration","currentScene","scenes","scrollLeft","offsetLeft","offsetWidth","scrollWidth","_step","_iterator","_createForOfIteratorHelperLoose","querySelectorAll","done","msgElement","getAttribute","_this2","scriptId","match","params","textyng","Script","grabScriptFromFirebase","then","arguments","_this3","tslmsg","_this4","selectedMessageIndex","senderName","getSenderNameFromID","senderId","getScenes","scene","onClick","isImg","src","url","isAudio","controls","isVideo","msgType","getNodeByMessageId","idOfMsgLiked","whoLikedMsg","MsgIndex","whoSentLikedMsg","content","messages","emotion","e","ReaderView","withRouter","connect","MessageNode","milliseconds","Math","floor","Date","now","dateCreated","cast","crew","head","node","totalNoMsgs","readerReactionMap","Map","isPrivateScript","updateIsPrivateScript","startsWith","count","updateScriptFirebase","current","newNode","castId","msgId","result","getOnlyCommentsAsNodes","find","obj","whoCommentedMsg","idOfMsgCommented","nodeId","newContent","currentNode","sender","getAllCast","getAllCrew","getAllScenes","firebase","isEmptyScript","JSON","stringify","Object","fromEntries","newCast","existingCast","idNameMap","object","newCrew","existingCrew","resolve","val","addNewMessage","javascriptObject","parse","entries","getScripts","ref","once","snapshot","values","getFylds","createFyld","fyld","replace","description","image","friends","catch","error","createGrypcht","grypcht","groupName","members","isPrivateGrypcht","createNewScript","updateScript","update","getOpenAIAPI","getConversationHistory","getRimiSenTitles","postChats","seller","buyer","productId","senderID","timestamp","uid","storage","getScriptById","updateSenTitle","senTitle","newSenTitle","updateId","remove","sendForApproval","item","updateVideoSnippetURL","orderId","snippetVideoURL"],"sourceRoot":""}