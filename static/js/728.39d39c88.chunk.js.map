{"version":3,"file":"static/js/728.39d39c88.chunk.js","mappings":"sOA4CA,QAtCA,SAAuBA,GACrB,IAAIC,EAAU,UAEXD,EAAME,OACPD,EAAUD,EAAME,MAElB,IAAAC,EAAwBC,EAAAA,SAAeH,GAAQI,GAAAC,EAAAA,EAAAA,SAAAH,EAAA,GAAxCD,EAAIG,EAAA,GAAEE,EAAOF,EAAA,GACpBG,EAA2CJ,EAAAA,UAAe,GAAMK,GAAAH,EAAAA,EAAAA,SAAAE,EAAA,GAAzDE,EAAaD,EAAA,GAAEE,EAAiBF,EAAA,GAOvC,OACEL,EAAAA,cAAA,OAAKQ,UAAU,iBACXF,EASAN,EAAAA,cAACS,EAAAA,QAAS,CACRC,WAAS,EACTC,WAAY,CAACC,UAAW,GAAIC,MAAO,CAACC,SAAUlB,EAAMkB,SAAWlB,EAAMkB,SAAW,KAChFC,MAAOjB,EACPkB,SAAU,SAACC,GAAK,OAAKd,EAAQc,EAAMC,OAAOH,MAAM,EAChDI,OAAQ,SAACF,GAAK,OApBpBV,GAAkB,QAClBX,EAAMwB,cAAc,CAACxB,EAAMyB,GAAIvB,GAmBU,IAbrCE,EAAAA,cAAA,OACEsB,QAAS,WACPf,GAAkB,EACpB,GAECT,GAcX,E,cCoCA,QAzEA,SAAqBF,GACnB,IAAI2B,EAAc,CAChB,CACEzB,KAAM,OACNuB,GAAI,GAEN,CACEvB,KAAM,cACNuB,GAAI,IAIRtB,EAAyBC,EAAAA,SAAeJ,EAAM4B,MAAQ5B,EAAM4B,KAAKC,OAAS,EAAI7B,EAAM4B,KAAOD,GAAYtB,GAAAC,EAAAA,EAAAA,SAAAH,EAAA,GAAhG2B,EAAKzB,EAAA,GAAE0B,EAAO1B,EAAA,GACrBG,EAAkCJ,EAAAA,SAAeJ,EAAM4B,MAAQ5B,EAAM4B,KAAKC,OAAS,EAAI7B,EAAM4B,KAAKC,OAASF,EAAYE,QAAOpB,GAAAH,EAAAA,EAAAA,SAAAE,EAAA,GAAvHwB,EAASvB,EAAA,GAAEwB,EAAYxB,EAAA,GAY9B,SAASyB,EAAehC,GAItB,IAHA,IAAIuB,EAAKvB,EAAK,GACViC,EAAUjC,EAAK,GAEVkC,EAAI,EAAGA,EAAIN,EAAMD,OAAQO,IAC5BN,EAAMM,GAAGX,IAAMA,IACjBK,EAAMM,GAAGlC,KAAOiC,GAIpBJ,GAAQ,SAAAD,GAAK,OAAAO,EAAAA,EAAAA,SAAQP,EAAK,IAC1B9B,EAAMsC,WAAWR,EACnB,CAcA,OACE1B,EAAAA,cAAA,OAAKQ,UAAU,eACZkB,EAAMS,KACL,SAACpB,EAAOqB,GAAK,OACXpC,EAAAA,cAAA,OACEqB,GAAI,sBAAwBN,EAAMM,GAClCb,UAAU,mBACV6B,IAAKD,EACLd,QAAS,kBApBnB,SAA4BP,GAG1B,IAFA,IAAIuB,EAAKC,SAASC,iBAAiB,qBAE1BR,EAAI,EAAGA,EAAIM,EAAGb,OAAQO,IAC7BM,EAAGN,GAAGS,UAAUC,OAAO,UAGzBH,SAASI,eAAe,sBAAwB5B,EAAMM,IAAIoB,UAAUG,IAAI,WAExEhD,EAAMiD,cAAejD,EAAMiD,aAAa9B,EAC1C,CAUyB+B,CAAmB/B,EAAM,GAExCf,EAAAA,cAAC+C,EAAa,CAACjD,KAAMiB,EAAMjB,KAAMuB,GAAIN,EAAMM,GAAIP,SAAU,GAAIM,cAAeU,IACxE,IAIV9B,EAAAA,cAAA,OAAKQ,UAAU,uCAAuCc,QAAS,kBAnDnE,WACE,IAAI0B,EAAU,CACZlD,KAAM,cACNuB,GAAIO,EAAY,GAElBD,GAAQ,SAAAD,GAAK,SAAAuB,QAAAhB,EAAAA,EAAAA,SAAQP,GAAK,CAAEsB,GAAU,IACtCnB,EAAaD,EAAY,GACzBhC,EAAMsC,WAAWR,EACnB,CA2CyEwB,EAAkB,GAAE,KAK/F,ECEA,QAzEA,SAAgBtD,GACd,IAAIuD,EAAgB,CAClB,CACErD,KAAM,SACNuB,GAAI,GAEN,CACEvB,KAAM,kBACNuB,GAAI,IAIRtB,EAA4BC,EAAAA,SAAeJ,EAAMwD,QAAUxD,EAAMwD,OAAO3B,OAAS,EAAI7B,EAAMwD,OAASD,GAAclD,GAAAC,EAAAA,EAAAA,SAAAH,EAAA,GAA3GqD,EAAMnD,EAAA,GAAEoD,EAASpD,EAAA,GACxBG,EAAsCJ,EAAAA,SAAeJ,EAAMwD,QAAUxD,EAAMwD,OAAO3B,OAAS,EAAI7B,EAAMwD,OAAO3B,OAAS0B,EAAc1B,QAAOpB,GAAAH,EAAAA,EAAAA,SAAAE,EAAA,GAAnIkD,EAAWjD,EAAA,GAAEkD,EAAclD,EAAA,GAYlC,SAASmD,EAAgB1D,GAIvB,IAHA,IAAIuB,EAAKvB,EAAK,GACViC,EAAUjC,EAAK,GAEVkC,EAAI,EAAGA,EAAIoB,EAAO3B,OAAQO,IAC7BoB,EAAOpB,GAAGX,IAAMA,IAClB+B,EAAOpB,GAAGlC,KAAOiC,GAIrBsB,GAAU,SAAAD,GAAM,OAAAnB,EAAAA,EAAAA,SAAQmB,EAAM,IAC9BxD,EAAM6D,aAAaL,EACrB,CAcA,OACEpD,EAAAA,cAAA,OAAKQ,UAAU,UACZ4C,EAAOjB,KACN,SAACpB,EAAOqB,GAAK,OACXpC,EAAAA,cAAA,OACEqB,GAAI,kBAAoBN,EAAMM,GAC9Bb,UAAU,eACV6B,IAAKD,EACLd,QAAS,kBApBnB,SAA4BP,GAG1B,IAFA,IAAIuB,EAAKC,SAASC,iBAAiB,iBAE1BR,EAAI,EAAGA,EAAIM,EAAGb,OAAQO,IAC7BM,EAAGN,GAAGS,UAAUC,OAAO,UAGzBH,SAASI,eAAe,kBAAoB5B,EAAMM,IAAIoB,UAAUG,IAAI,WAEpEhD,EAAM8D,eAAgB9D,EAAM8D,cAAc3C,EAC5C,CAUyB+B,CAAmB/B,EAAM,GAExCf,EAAAA,cAAC+C,EAAa,CAACjD,KAAMiB,EAAMjB,KAAMuB,GAAIN,EAAMM,GAAIP,SAAU,GAAIM,cAAeoC,IACxE,IAIVxD,EAAAA,cAAA,OAAKQ,UAAU,+BAA+Bc,QAAS,kBAnD3D,WACE,IAAIqC,EAAW,CACb7D,KAAM,QACNuB,GAAIiC,EAAc,GAEpBD,GAAU,SAAAD,GAAM,SAAAH,QAAAhB,EAAAA,EAAAA,SAAQmB,GAAM,CAAEO,GAAW,IAC3CJ,EAAeD,EAAc,GAC7B1D,EAAM6D,aAAaL,EACrB,CA2CiEQ,EAAa,GAAE,KAKlF,E,cC7CA,QA1BmB,SAAChE,GAClB,IAAMiE,GAAYC,EAAAA,EAAAA,QAAO,MAYzB,OACE9D,EAAAA,cAAA,OAAKQ,UAAU,cACXR,EAAAA,cAAA,YAAOJ,EAAMmE,SACb/D,EAAAA,cAAA,SACEQ,UAAU,aACVwD,KAAK,OACLC,IAAKJ,EACL7C,SAjBiB,SAACC,GACxB,IAAMiD,EAAOjD,EAAMC,OAAOiD,MAAM,GAE1BC,EADaC,EAAAA,QAAAA,UAAmBJ,IAAIrE,EAAMmE,QAAQO,QAAQ,KAAM,IAAM,KACjDC,MAAML,EAAKpE,MACtCsE,EAAQI,IAAIN,GAAMO,MAAK,WACrBL,EAAQM,iBAAiBD,MAAK,SAAAE,GAC5B/E,EAAMgF,UAAUD,EAClB,GACF,GACF,IAYF,E,qBC8BA,QApDA,SAAqB/E,GACnB,IAAAG,EAAsCC,EAAAA,UAAe,GAAMC,GAAAC,EAAAA,EAAAA,SAAAH,EAAA,GAApD8E,EAAW5E,EAAA,GAAE6E,EAAc7E,EAAA,GAClCG,EAAgCJ,EAAAA,SAAe,MAAKK,GAAAH,EAAAA,EAAAA,SAAAE,EAAA,GAA7C2E,EAAQ1E,EAAA,GAAE2E,EAAW3E,EAAA,GA8B5B,OACEL,EAAAA,cAAA,OAAKQ,UAAU,eACZqE,EACC7E,EAAAA,cAAA,OAAKQ,UAAU,0BACXR,EAAAA,cAACiF,EAAAA,SAAQ,CAACC,gBA5BpB,SAA6BC,GAC3BL,GAAe,GACfE,EAAYG,EAAKC,SACjB,IAAMC,EAAeC,KAAKC,MAAMC,KAAKC,MAAQ,KACvCC,EAAarB,EAAAA,QAAAA,UAAmBJ,IAAI,cAAgBoB,GAGpDM,EAAY,IAAIC,KAAK,CAACT,EAAKA,MAAOE,EAAaQ,WAAW,YAAa,CACzE7B,KAAM,YACN8B,SAAU,CACNC,KAAM,CAAC,CACLC,OAAQ,CAAC,+BAKnBN,EAAWlB,IAAImB,GAAWlB,MAAK,SAAAwB,GAC3BA,EAAShC,IAAIS,iBAAiBD,MAAK,SAAAE,GAC/B/E,EAAMsG,SAASvB,EACnB,GACJ,GAEF,KASM3E,EAAAA,cAAA,UAAQsB,QAnCd,WACEwD,GAAe,EACjB,EAiC6CtE,UAAU,6BAA4B,mBAI9EuE,GACC/E,EAAAA,cAAA,WACEA,EAAAA,cAAA,SAAOmG,IAAKpB,EAAUqB,UAAQ,KAKxC,ECLA,QA9CA,SAAkBxG,GAMhB,OACEI,EAAAA,cAAA,OAAKQ,UAAU,YACbR,EAAAA,cAAA,OACEQ,UAAW,gBACXc,QAAS,kBAAM1B,EAAMyG,gBAAgB,GACtC,eAGDrG,EAAAA,cAAA,OAAKQ,UAAW,iBACdR,EAAAA,cAACsG,EAAU,CACTvC,QAAQ,eACRa,UAAWhF,EAAM2G,kBAGrBvG,EAAAA,cAAA,OAAKQ,UAAW,iBACdR,EAAAA,cAACwG,EAAW,CACVzC,QAAQ,aACRmC,SAAUtG,EAAMsG,YAGpBlG,EAAAA,cAAA,OAAKQ,UAAW,iBACdR,EAAAA,cAACsG,EAAU,CACTvC,QAAQ,eACRa,UAAWhF,EAAM6G,mBA5BV,CACb,cACA,cA6BYtE,KAAI,SAACpB,EAAOqB,GAAK,OACzBpC,EAAAA,cAAA,OACEqB,GAAI,eAAiBe,EACrB5B,UAAW,gBACX6B,IAAKD,EACLd,QAAS,kBAAM1B,EAAM8G,gBAAkB9G,EAAM8G,gBAAgB3F,GAAS,CAAC,CAAC,GAEvEA,EACG,IAId,E,cCqBA,QAnEA,SAAmBnB,GACf,IAAAG,EAA0BC,EAAAA,SAAe,QAAOC,GAAAC,EAAAA,EAAAA,SAAAH,EAAA,GAAzCgB,EAAKd,EAAA,GAAE0G,EAAQ1G,EAAA,GAgBhB2G,EAAuB,SAAC7F,GAC5B,IAAA8F,EAA2B9F,EAAM+F,MAAM,KAAIC,GAAA7G,EAAAA,EAAAA,SAAA2G,EAAA,GAApCG,EAAID,EAAA,GAAEE,EAAIF,EAAA,GAAEG,EAAIH,EAAA,GAEjBI,EAAOC,OAAOJ,GACdK,EAAOD,OAAOH,GACdK,EAAOF,OAAOF,GAEpB,OAAKK,MAAMJ,IAASI,MAAMF,IAASE,MAAMD,GAChCH,EAGJI,MAAMJ,IAAUI,MAAMF,KAASE,MAAMD,GAIrCC,MAAMJ,IAAUI,MAAMF,IAAUE,MAAMD,GAIpC,EAHS,GAAPH,EAAY,GAAY,GAAPE,EAAYC,EAJtB,GAAPH,EAAYE,CAQvB,EAEMG,EAAW,SAACC,GAChB,IAAMC,EAASC,SAASF,EAAK5B,WAAY,IAKzC,MAAO,CAJOP,KAAKC,MAAMmC,EAAS,MAClBpC,KAAKC,MAAMmC,EAAS,IAAM,GAC1BA,EAAS,IAGtBvF,KAAI,SAACyF,GAAG,OAAMA,EAAM,GAAE,IAAOA,EAAQA,CAAG,IACxCC,QAAO,SAACD,EAAKxF,GAAK,MAAa,OAARwF,GAAgBxF,EAAQ,CAAC,IAChD0F,KAAK,KACLxD,QAAQ,KAAM,GACnB,EAMA,OAJG1E,EAAMmI,OACLpB,EAAS/G,EAAMmI,OAIf/H,EAAAA,cAAA,SACIQ,UAAU,YACVwD,KAAK,OACLhD,SAzDS,SAACC,GAChB0F,EAAS1F,EAAMC,OAAOH,MACxB,EAwDQI,OAtDO,SAACF,GACd,IAAMF,EAAQE,EAAMC,OAAOH,MACrBiH,EAAU1C,KAAK2C,IAAI,EAAGrB,EAAqB7F,IAEjDnB,EAAMsI,UAAUF,GAEhB,IAAMG,EAAOX,EAASQ,GACtBrB,EAASwB,EACX,EA+CQpH,MAAOA,GAGnB,ECpBA,QA5CA,SAAwBnB,GACtB,IAAAwI,GAAkCC,EAAAA,EAAAA,WAAS,GAAMC,GAAApI,EAAAA,EAAAA,SAAAkI,EAAA,GAA1CG,EAASD,EAAA,GAAEE,EAAYF,EAAA,GAC9BG,GAAoCJ,EAAAA,EAAAA,UAASzI,EAAM8I,mBAAkBC,GAAAzI,EAAAA,EAAAA,SAAAuI,EAAA,GAA9DG,EAAUD,EAAA,GAAEE,EAAaF,EAAA,GAmBhC,OACE3I,EAAAA,cAAA,OAAKQ,UAAU,kBACZ+H,GACCvI,EAAAA,cAAA,OAAKqB,GAAG,SACNrB,EAAAA,cAAA,OAAKqB,GAAG,iBACNrB,EAAAA,cAACS,EAAAA,QAAS,CACRqI,QAAQ,WACR/H,MAAO6H,EACPG,YAAY,oBACZ/H,SAAU,SAAAgI,GAZpBH,EAY2CG,EAZvB9H,OAAOH,MAYkB,EACnCkI,WAAS,EACTC,QAAS,IAEXlJ,EAAAA,cAAA,UAAQqB,GAAG,OAAOC,QA1BT,WACjB1B,EAAMuJ,OAAOP,EAAYhJ,EAAMwJ,iBAAkBxJ,EAAMyJ,qBACvDb,GAAa,EACf,GAuBiD,QACvCxI,EAAAA,cAAA,UAAQqB,GAAG,QAAQC,QAtBT,WAClBkH,GAAa,EACf,GAoBmD,UAI/CxI,EAAAA,cAAA,UAAQqB,GAAG,mBAAmBC,QAnCf,WACjBkH,GAAa,EACf,GAiCuD,WAGzD,E,g1CChC0B,IAEpBc,EAAmB,SAAAC,IAAAC,EAAAA,EAAAA,SAAAF,EAAAC,GAAA,IAAAE,EAAAC,EAAAJ,GACvB,SAAAA,EAAY1J,GAAQ,IAAD+J,EAiBf,OAjBeC,EAAAA,EAAAA,SAAA,KAAAN,IACjBK,EAAAF,EAAAI,KAAA,KAAMjK,IAmERwB,cAAgB,SAACtB,GACf6J,EAAKG,MAAMC,OAAOC,iBAAiBlK,EAAK,GAC1C,EAAC6J,EAEDzH,WAAa,SAACV,GACZmI,EAAKG,MAAMC,OAAOE,WAAWzI,EAC/B,EAACmI,EAEDlG,aAAe,SAACL,GACduG,EAAKG,MAAMC,OAAOG,YAAY9G,EAChC,EAACuG,EAEDQ,gBAAkB,SAAC3I,GACjBmI,EAAKS,SAAS,CAACC,eAAgB7I,EAAKH,KAAK,WACvCsI,EAAKS,SAAS,CAACE,YAAaX,EAAKG,MAAMC,OAAOQ,yBAChD,GACF,EAACZ,EAEDa,iBAAmB,SAACC,GAClBd,EAAKS,SAAS,CAACM,gBAAiBD,EAAMpJ,KAAK,WACzCsI,EAAKS,SAAS,CAACE,YAAaX,EAAKG,MAAMC,OAAOQ,yBAChD,GACF,EAACZ,EAEDgB,mBAAqB,SAAC5J,GACpB4I,EAAKS,SAAS,CAAEQ,QAAS7J,IAAQ,WAC/B4I,EAAKkB,eACP,GACF,EAAClB,EAEDmB,iCAAmC,SAACC,GAClC,IAAIC,EAAU,GAAMD,EAAYpB,EAAKG,MAAMO,eAE3C,QAAGV,EAAKG,MAAMmB,WAAWC,IAAIF,IACpBrB,EAAKG,MAAMmB,WAAWE,IAAIH,EAGrC,EAACrB,EAeDyB,cAAgB,SAACL,EAAWM,GAC1B,GAAI1B,EAAKmB,iCAAiCC,GA6BxCpB,EAAK2B,mBAAmBP,EAAWpB,EAAKG,MAAMO,oBA7BK,CAEnD,IAAIhF,EAAeC,KAAKC,MAAMC,KAAKC,MAAQ,KAEvC8F,EAAS5B,EAAKG,MAAM0B,iBACX,IAAVD,GAA0B,GAAVA,IACjBA,EAAS5B,EAAKG,MAAM/B,OAEtB,IAAI0D,EAAU,CACZpK,GAAIgE,EACJqG,UAAWrG,EACXtB,QAAS,OACT4H,gBAAiBN,EACjBO,aAAcb,EACdc,YAAalC,EAAKG,MAAMO,eACxBkB,OAAQA,EACRO,QAASnC,EAAKG,MAAMY,iBAEtBf,EAAKG,MAAMC,OAAOc,cAAcY,GAEhC,IAAIM,EAAoB,IAAIC,IAAIrC,EAAKG,MAAMmB,YAC3Cc,EAAkBE,IAAI,GAAGlB,EAAYpB,EAAKG,MAAMO,gBAAkB,GAElEV,EAAKS,SAAS,CACZa,WAAYc,EACZzB,YAAaX,EAAKG,MAAMC,OAAOQ,wBAC/BxC,MAAO,GAEX,CAGF,EAAC4B,EAEDkB,cAAgB,WACd,IAAIxF,EAAeC,KAAKC,MAAMC,KAAKC,MAAQ,KAEvC8F,EAAS5B,EAAKG,MAAM0B,iBACX,IAAVD,GAA0B,GAAVA,IACjBA,EAAS5B,EAAKG,MAAM/B,OAGtB,IAAI0D,EAAU,CACZpK,GAAIgE,EACJqG,UAAWrG,EACX6G,QAASvC,EAAKG,MAAMc,QACpBuB,QAASxC,EAAKG,MAAMqC,QACpBd,SAAU1B,EAAKG,MAAMO,eACrBkB,OAAQA,EACRxH,QAAS,UACT+H,QAASnC,EAAKG,MAAMY,iBAGnBf,EAAKyC,gBACNX,EAAQ1H,QAAU,UAGjB4F,EAAK0C,sBACNZ,EAAQ1H,QAAU,gBAGpB4F,EAAKG,MAAMC,OAAOc,cAAcY,GAChC9B,EAAKS,SAAS,CACZE,YAAaX,EAAKG,MAAMC,OAAOuC,yBAC/B1B,QAAS,GACTuB,QAAS,GACTpE,MAAO,GAEX,EAAC4B,EAUD4C,iBAAmB,SAACC,EAASpD,EAAkBC,GAC7C,IAAIhE,EAAeC,KAAKC,MAAMC,KAAKC,MAAQ,KAEvC8F,EAAS5B,EAAKG,MAAM0B,iBACX,IAAVD,GAA0B,GAAVA,IACjBA,EAAS5B,EAAKG,MAAM/B,OAGtB,IAAI0D,EAAU,CACZpK,GAAIgE,EACJqG,UAAWrG,EACXtB,QAAS,UACTmI,QAASM,EACTL,QAASxC,EAAKG,MAAMqC,QACpB9C,oBAAqBA,EACrBD,iBAAkBA,EAClBqD,gBAAiB9C,EAAKG,MAAMO,eAC5BkB,OAAQA,EACRO,QAASnC,EAAKG,MAAMY,iBAGtBf,EAAKG,MAAMC,OAAOc,cAAcY,GAChC9B,EAAKS,SAAS,CACZE,YAAaX,EAAKG,MAAMC,OAAOuC,yBAC/B1B,QAAS,GACTuB,QAAS,GACTpE,MAAO,GAEX,EAAC4B,EAED+C,eAAiB,SAACC,EAAWC,EAAUC,EAAOC,EAASC,GAErD,IAAI1H,EAAeC,KAAKC,MAAMC,KAAKC,MAAQ,KAEvC8F,EAAS5B,EAAKG,MAAM0B,iBACX,IAAVD,GAA0B,GAAVA,IACjBA,EAAS5B,EAAKG,MAAM/B,OAGtB,IAAI0D,EAAU,CACZpK,GAAIgE,EACJqG,UAAWrG,EACX6G,QAASS,EACTR,QAASxC,EAAKG,MAAMqC,QACpBd,SAAU1B,EAAKG,MAAMO,eACrBkB,OAAQA,EACRsB,MAAOA,EACPC,QAASA,EACTC,QAASA,EACThJ,QAAS,UACTY,IAAKiI,EACLd,QAASnC,EAAKG,MAAMY,iBAGtBf,EAAKG,MAAMC,OAAOc,cAAcY,GAChC9B,EAAKS,SAAS,CACZE,YAAaX,EAAKG,MAAMC,OAAOuC,yBAC/B1B,QAAS,GACTuB,QAAS,GACTpE,MAAO,GAEX,EAAC4B,EASDqD,aAAe,SAACC,GACdtD,EAAKS,SAAS,CACZoB,iBAAkByB,GAEtB,EAACtD,EAEDuD,cAAgB,SAAC7L,GACfsI,EAAKG,MAAMC,OAAOmD,cAAc7L,GAChCsI,EAAKS,SAAS,CAACE,YAAaX,EAAKG,MAAMC,OAAOuC,2BAC9C,WACI3C,EAAKG,MAAMC,OAAOoD,sBACtB,GACF,EAACxD,EAEDyD,cAAgB,SAACC,EAASjE,EAAkBC,GAC1C,IAAIiE,EAAsB3D,EAAKG,MAAMC,OAAOwD,4BAA4B5D,EAAKG,MAAMO,eAAgBjB,GAChGkE,GAAuBE,IACxB7D,EAAKG,MAAMC,OAAO0D,gBAAgBH,EAAoBjM,GAAIgM,GAE1D1D,EAAK4C,iBAAiBc,EAASjE,EAAkBC,EAErD,EAACM,EAEDtD,eAAiB,SAAC1B,GAChB,IAAM+I,EAAUnL,SAASI,eAAe,0BAExCgL,IAAYD,GAASjJ,MAAK,SAAAmJ,GACxB,IAAMC,EAAYD,EAAOE,YACnBzI,EAAeC,KAAKC,MAAMC,KAAKC,MAAQ,KAC1BpB,EAAAA,QAAAA,UAAmBJ,IAAI,cAAgBoB,GAC/C0I,UAAUF,EAAW,YAAYpJ,MAAK,SAAAwB,GAC/CA,EAAShC,IAAIS,iBAAiBD,MAAK,SAAAuJ,GACjCrE,EAAK+C,eAAe,aAAcsB,GAAa,GAAM,GAAO,EAC9D,GACF,GACF,GACF,EAACrE,EAEDpD,eAAiB,SAAC5B,GAChBgF,EAAK+C,eAAe,cAAe/H,GAAK,GAAM,GAAO,EACvD,EAACgF,EAEDlD,gBAAkB,SAAC9B,GACjBgF,EAAK+C,eAAe,gBAAiB/H,GAAK,GAAO,GAAO,EAC1D,EAACgF,EAEDzD,SAAW,SAACvB,GACVgF,EAAK+C,eAAe,YAAa/H,GAAK,GAAO,GAAM,EACrD,EAzTEgF,EAAKG,MAAQ,CACXmE,gBAAiB,6BACjBC,QAAS,GACTnE,OAAQnK,EAAMmK,OAASnK,EAAMmK,OAAS,KACtCoE,YAAavO,EAAMuO,YACnB9D,eAAgB,EAChBK,gBAAiB,EACjBhE,gBAAiB,GACjB8E,iBAAkB,GAClBZ,QAAS,GACTuB,QAAS,GACT7B,YAAa,GACbvC,MAAO,EACPkD,WAAarL,EAAMmK,OAASnK,EAAMmK,OAAOqE,0BAA4B,IAAIpC,KACzErC,CACJ,CA0dC,OA1dA0E,EAAAA,EAAAA,SAAA/E,EAAA,EAAAjH,IAAA,uBAAAtB,MAED,WACEuN,cAAcC,KAAKC,WACrB,GAAC,CAAAnM,IAAA,oBAAAtB,MAED,WAAqB,IAAD0N,EAAA,KAElB,GAAIC,OAAOC,SAASC,KAAKC,SAAS,MAAM,CACtC,IAAIC,EAAoBJ,OAAOC,SAASC,KAAK9H,MAAM,MAAM,GAEzDyH,KAAK3O,MAAMmP,QAAQC,KAAK,CACtBC,SAAU,IAAMH,GAEpB,CAGA,GAAKP,KAAKzE,MAAMqE,YAcdI,KAAKnE,SAAS,CAACa,WAAYsD,KAAKW,iBAAiBX,KAAKzE,MAAMC,OAAOqE,iCAdzC,CAC1B,IAAIe,EAAWT,OAAOC,SAASM,SAASG,WAAW,eAAgB,IAEnE,GAAe,IAAZD,EAAe,CAChB,IAAIE,EAAU,IAAIC,EAAAA,QAAOH,GACzBE,EAAQE,uBAAuBJ,GAC9B1K,MAAK,WACJgK,EAAKrE,SAAS,CACZL,OAAQsF,EACRpE,WAAYwD,EAAKS,iBAAiBG,EAAQjB,4BAE9C,GACF,CACF,CAIAG,KAAKC,WAAagB,aAAY,WAC5Bf,EAAKrE,SAAS,CAAErC,MAAO0G,EAAK3E,MAAM/B,MAAQ,GAC5C,GAAG,IACL,GAAC,CAAA1F,IAAA,mBAAAtB,MAED,SAAiB0O,GAGf,IAFA,IAE6BC,EAFzBvN,EAAM,IAAI6J,IAEd2D,EAAAC,EAAgBH,KAAaC,EAAAC,KAAAE,MAAE,CAAC,IAAvBC,EAAGJ,EAAA3O,MACNsB,EAAG,GAAMyN,EAAIC,WAAaD,EAAIE,iBAClC7N,EAAI8J,IAAI5J,GAAK,EACf,CAEA,OAAOF,CACT,GAAC,CAAAE,IAAA,qBAAAtB,MAyCD,SAAmBgK,EAAWc,GAC5B0C,KAAKnE,SAAS,CACZa,WAAYsD,KAAKzE,MAAMmB,WAAWgB,IAAI,GAAGlB,EAAYc,GAAe,KAGtE,IACMoE,EADY1B,KAAKzE,MAAMC,OAAOqE,0BACT8B,MAAK,SAAAJ,GAAG,OAAIA,EAAIlE,eAAiBb,GAAa+E,EAAIjE,cAAgBA,CAAW,IAErGoE,EAAO5O,IACRkN,KAAKrB,cAAc+C,EAAO5O,GAE9B,GAAC,CAAAgB,IAAA,cAAAtB,MAwED,WACE,MAA6B,MAAtBwN,KAAKzE,MAAMqC,OACpB,GAAC,CAAA9J,IAAA,oBAAAtB,MAED,WACE,MAA6B,OAAtBwN,KAAKzE,MAAMqC,OACpB,GAAC,CAAA9J,IAAA,qBAAAtB,MAkED,WACKwN,KAAKzE,MAAMC,QACZwE,KAAKzE,MAAMC,OAAOoD,sBAEtB,GAAC,CAAA9K,IAAA,SAAAtB,MAoDD,WAAU,IAADoP,EAAA,KACP,OAAG5B,KAAKzE,MAAMC,OAEN/J,EAAAA,cAAA,OAAKQ,UAAU,cACXR,EAAAA,cAAA,OAAKQ,UAAU,oCACXR,EAAAA,cAAA,OAAKQ,UAAU,oBACbR,EAAAA,cAAC+C,EAAa,CACZjD,KAAMyO,KAAKzE,MAAMC,OAAO3I,gBACxBA,cAAemN,KAAKnN,iBAGxBpB,EAAAA,cAAA,OAAKQ,UAAU,qBACbR,EAAAA,cAACoQ,EAAM,CACLhN,OAAUmL,KAAKzE,MAAMC,OAAOtG,eAC5BC,cAAe6K,KAAK/D,iBACpB/G,aAAc8K,KAAK9K,gBAGvBzD,EAAAA,cAAA,OAAKQ,UAAU,mBACbR,EAAAA,cAACqQ,EAAW,CACV7O,KAAQ+M,KAAKzE,MAAMC,OAAO7H,aAC1BW,aAAc0L,KAAKpE,gBACnBjI,WAAYqM,KAAKrM,cAGrBlC,EAAAA,cAAA,OAAKQ,UAAU,uBACbR,EAAAA,cAACsQ,EAAQ,CACPjK,eAAkBkI,KAAKlI,eACvBE,eAAkBgI,KAAKhI,eACvBG,gBAAmB6H,KAAK5D,mBACxBlE,gBAAmB8H,KAAK9H,gBACxBP,SAAYqI,KAAKrI,WAEnBlG,EAAAA,cAAA,OAAKqB,GAAG,yBAAyBb,UAAU,uBACP,GAAjC+N,KAAKzE,MAAMQ,YAAY7I,QACtBzB,EAAAA,cAAA,QAAMQ,UAAU,+BAA8B,0CAE/C+N,KAAKzE,MAAMQ,YAAYnI,KAAI,SAACkL,EAASjL,GAAK,OACxCiL,EAAQvB,SAAWqE,EAAKrG,MAAMY,iBAE/B1K,EAAAA,cAACuQ,EAAsB,CAAClO,IAAKD,EAAOoO,SAAUnD,EAAQhC,UAAY8E,EAAKrG,MAAMO,gBAAqC,gBAAnBgD,EAAQtJ,QAA2BsJ,QAASA,EAASjL,MAAOA,GACxJiL,EAAQR,OACP7M,EAAAA,cAAA,OACEQ,UAAU,oBACV2F,IAAKkH,EAAQ1I,MAGhB0I,EAAQP,SACP9M,EAAAA,cAAA,SACEQ,UAAU,sBACV2F,IAAKkH,EAAQ1I,IACbyB,UAAQ,IAGXiH,EAAQN,SACP/M,EAAAA,cAAA,SACEQ,UAAU,sBACV2F,IAAKkH,EAAQ1I,IACbyB,UAAQ,IAIQ,QAAnBiH,EAAQtJ,SAAqBoM,EAAKrG,MAAMC,OAAO0G,mBAAmBpD,EAAQzB,eACzE5L,EAAAA,cAAA,OACEQ,UAAU,sBAEVR,EAAAA,cAAA,YACGmQ,EAAKrG,MAAMC,OAAO2G,oBAAoBrD,EAAQxB,aAAa,yBAE3DsE,EAAKrG,MAAMC,OAAO0G,mBAAmBpD,EAAQzB,cAAc+E,KAAKC,SAAS,cAEzET,EAAKrG,MAAMC,OAAO2G,oBAAoBrD,EAAQ1B,iBAAiB,SAIlD,UAAnB0B,EAAQtJ,SACP/D,EAAAA,cAAA,OACEQ,UAAU,yCAERR,EAAAA,cAAA,QAAMQ,UAAU,yBAAyB2P,EAAKrG,MAAMC,OAAO2G,oBAAoBrD,EAAQhC,WACvFrL,EAAAA,cAAA,YAAM,MAAIqN,EAAQnB,UAGJ,gBAAnBmB,EAAQtJ,SACP/D,EAAAA,cAAA,OACEQ,UAAU,+CAEVR,EAAAA,cAAA,OAAKQ,UAAU,sBAAqB,OAC7B6M,EAAQnB,UAIC,UAAnBmB,EAAQtJ,SAA0C,gBAAnBsJ,EAAQtJ,SACtC/D,EAAAA,cAAA,OAAKQ,UAAU,6BACbR,EAAAA,cAAA,QAAMQ,UAAU,yBAAyB2P,EAAKrG,MAAMC,OAAO2G,oBAAoBrD,EAAQhC,WACvFrL,EAAAA,cAAA,QAAMQ,UAAU,4BAA4B6M,EAAQlB,QAAU,IAAIkB,EAAQlB,QAAU,IAAK,IACzFnM,EAAAA,cAAA,YAAOqN,EAAQnB,UAKnBlM,EAAAA,cAAA,QAAMQ,UAAU,uBAAuB6M,EAAQuD,UAC/C5Q,EAAAA,cAAA,OAAKQ,UAAU,mCACbR,EAAAA,cAAA,UAAQQ,UAAU,iCAAiCc,QAAS,kBAAM6O,EAAKjD,cAAcG,EAAQhM,GAAG,GAAE,UAClGrB,EAAAA,cAAA,UAAQQ,UAAU,iCAAiCc,QAAS,kBAAM6O,EAAK/E,cAAciC,EAAQhM,GAAIgM,EAAQhC,SAAS,GAAG8E,EAAKrF,iCAAiCuC,EAAQhM,IAAM,SAAW,QACpLrB,EAAAA,cAAC6Q,EAAc,CACbrQ,UAAU,iCACV4I,iBAAkBiE,EAAQhM,GAC1BgI,oBAAqBgE,EAAQhC,SAC7BlC,OAAQgH,EAAK/C,cACb1E,kBAAmByH,EAAKrG,MAAMC,OAAO+G,wBAAwBX,EAAKrG,MAAMO,eAAgBgD,EAAQhM,OAI7E,KAI7BrB,EAAAA,cAAA,OAAKQ,UAAU,0BACbR,EAAAA,cAACS,EAAAA,QAAS,CACRqI,QAAQ,WACRtI,UAAU,gCACVO,MAAOwN,KAAKzE,MAAMc,QAClB7B,YAAY,oBACZ/H,SAAU,SAAAgI,GACRmH,EAAK/F,SAAS,CAAEQ,QAAS5B,EAAE9H,OAAOH,OACpC,IAGFf,EAAAA,cAACS,EAAAA,QAAS,CACRqI,QAAQ,WACRtI,UAAU,6BACVO,MAAOwN,KAAKzE,MAAMqC,QAClBpD,YAAY,oBACZ/H,SAAU,SAAAgI,GACRmH,EAAK/F,SAAS,CAAE+B,QAASnD,EAAE9H,OAAOH,OACpC,IAGFf,EAAAA,cAAC+Q,EAAS,CAAC7I,UAAWqG,KAAKvB,gBAI7BhN,EAAAA,cAAA,OAAKQ,UAAU,yBACbR,EAAAA,cAAA,WACEA,EAAAA,cAACgR,EAAAA,QAAM,CACLxQ,UAAU,8BACVsI,QAAQ,WACRmI,MAAM,UACN3P,QAAS,kBAAM6O,EAAKtF,eAAe,GACpC,SAIH7K,EAAAA,cAAA,WACEA,EAAAA,cAACgR,EAAAA,QAAM,CACLxQ,UAAU,8BACVsI,QAAQ,WACRmI,MAAM,UACN3P,QAAS,kBAAM6O,EAAKrG,MAAMC,OAAOoD,sBAAsB,GACxD,aAWfnN,EAAAA,cAAA,OAAKQ,UAAU,cAAa,oBAGtC,KAAC8I,CAAA,CA7esB,CAAS4H,EAAAA,WAof9BC,GAAaC,EAAAA,EAAAA,aAAWC,EAAAA,EAAAA,UAJJ,SAACvH,GACvB,MAAO,CAAC,CACV,GAE4BuH,CAAyB/H,IACrD,SAAe8H,EAAAA,EAAAA,YAAWD,GAG1B,IAAMZ,EAAyB,SAAC3Q,GAE5B,OAAGA,EAAM4Q,SAEDxQ,EAAAA,cAAA,OAAKQ,UAAW,kCACXZ,EAAM0R,UAKXtR,EAAAA,cAAA,OAAKQ,UAAW,2BACXZ,EAAM0R,SAIrB,C,w8BCthB6C,IAEzCC,GAAWlD,EAAAA,EAAAA,UACf,SAAAkD,EAAYZ,IAAM/G,EAAAA,EAAAA,SAAA,KAAA2H,GAChBhD,KAAKoC,KAAOA,EACZpC,KAAKiD,KAAO,IACd,IAsbF,QAnbY,WACV,SAAAlC,EAAYxP,IAAM8J,EAAAA,EAAAA,SAAA,KAAA0F,GAChB,IAAIjK,EAAeC,KAAKC,MAAMC,KAAKC,MAAQ,KAE3C8I,KAAKzO,KAAOA,EACZyO,KAAKkD,YAAcpM,EACnBkJ,KAAKlN,GAAKvB,EAAOuF,EACjBkJ,KAAK/M,KAAO,GACZ+M,KAAKmD,KAAO,GACZnD,KAAKnL,OAAS,GACdmL,KAAKoD,KAAO,KACZpD,KAAKqD,SAAW,IAAIL,EACpBhD,KAAKsD,KAAO,CAAC,EACbtD,KAAKuD,YAAc,EACnBvD,KAAKwD,kBAAoB,IAAI/F,IAC7BuC,KAAKyD,iBAAkB,CACzB,CAgaC,OAhaA3D,EAAAA,EAAAA,SAAAiB,EAAA,EAAAjN,IAAA,mBAAAtB,MAED,SAAiBjB,GACfyO,KAAKzO,KAAOA,EACZyO,KAAK0D,uBACP,GAAC,CAAA5P,IAAA,wBAAAtB,MAED,WACKwN,KAAKzO,KAAKoS,WAAW,UACtB3D,KAAKyD,iBAAkB,EAE3B,GAAC,CAAA3P,IAAA,mBAAAtB,MAED,WAGE,IAFA,IAAIoR,EAAQ,EACRN,EAAOtD,KAAKoD,KACTE,GACLM,IACAN,EAAOA,EAAKL,KAEd,OAAOW,CACT,GAAC,CAAA9P,IAAA,YAAAtB,MAED,WACE,OAAOwN,KAAKnL,MACd,GAAC,CAAAf,IAAA,uBAAAtB,MAED,SAAqBqR,EAAWrH,GACzBwD,KAAKwD,kBAAkB7G,IAAIH,IAC9BwD,KAAKwD,kBAAkB9F,IAAIlB,EAAW,IAExCwD,KAAKwD,kBAAkB5G,IAAIJ,GAAWiE,KAAKoD,GAE3C7D,KAAKpB,sBACP,GAAC,CAAA9K,IAAA,uBAAAtB,MAED,WACE,OAAOwN,KAAKwD,iBACd,GAAC,CAAA1P,IAAA,oBAAAtB,MAED,WACE,OAAOwN,KAAK8D,YAAY5Q,MAC1B,GAAC,CAAAY,IAAA,eAAAtB,MAED,WACEwN,KAAKoD,KAAO,IACd,GAAC,CAAAtP,IAAA,iBAAAtB,MAkDD,WAGE,IAFA,IAAIuR,EAAU/D,KAAKoD,KAEZW,EAAQd,MACbc,EAAUA,EAAQd,KAGpB,OAAOc,EAAQ3B,KAAKzE,OACtB,GAAC,CAAA7J,IAAA,kBAAAtB,MA9CD,WACE,OAAOwN,KAAKoD,IACd,GAAC,CAAAtP,IAAA,gBAAAtB,MAED,SAAc4P,GACZpC,KAAKuD,aAAe,EACpBnB,EAAKC,SAAWrC,KAAKuD,YAErB,IAAIS,EAAU,IAAIhB,EAAYZ,GAE9B,IAAKpC,KAAKoD,KAER,OADApD,KAAKoD,KAAOY,EACLhE,KAAKoD,KAId,IADA,IAAIW,EAAU/D,KAAKoD,KACZW,EAAQd,MACbc,EAAUA,EAAQd,KAEpBc,EAAQd,KAAOe,CACjB,GAAC,CAAAlQ,IAAA,gBAAAtB,MAED,SAAcM,GACZ,GAAIkN,KAAKoD,KAAKhB,KAAKtP,KAAOA,EACxBkN,KAAKoD,KAAOpD,KAAKoD,KAAKH,UAGtB,IADA,IAAIc,EAAU/D,KAAKoD,KACZW,EAAQd,MAAM,CACnB,GAAIc,EAAQd,KAAKb,KAAKtP,KAAOA,EAAI,CAC/BiR,EAAQd,KAAOc,EAAQd,KAAKA,KAC5B,KACF,CACAc,EAAUA,EAAQd,IACpB,CAEF,OAAOjD,KAAKoD,IACd,GAAC,CAAAtP,IAAA,gBAAAtB,MAYD,SAAcyR,GACZA,GAAK,EAGL,IAFA,IAAIF,EAAU/D,KAAKoD,KAEX3P,EAAI,EAAGA,EAAIwQ,EAAGxQ,IAAI,CACxB,IAAIsQ,EAIF,MAAO,GAHPA,EAAUA,EAAQd,IAKtB,CAEA,OAAOc,EAAQ3B,KAAKzE,OACtB,GAAC,CAAA7J,IAAA,oBAAAtB,MAED,SAAkByR,GAChBA,GAAK,EAGL,IAFA,IAAIF,EAAU/D,KAAKoD,KAEX3P,EAAI,EAAGA,EAAIwQ,EAAGxQ,IAAI,CACxB,IAAIsQ,EAAQd,KAIV,MAAO,GAHPc,EAAUA,EAAQd,IAKtB,CAEA,OAAIc,EACKA,EAAQ3B,KAGV,IACT,GAAC,CAAAtO,IAAA,2BAAAtB,MAED,WAIE,IAHA,IAAI6Q,EAAW,GACXU,EAAU/D,KAAKoD,KAEZW,GACLV,EAAS5C,KAAKsD,EAAQ3B,KAAKzE,SAC3BoG,EAAUA,EAAQd,KAGpB,OAAOI,CACT,GAAC,CAAAvP,IAAA,qCAAAtB,MAED,SAAmCsK,GAIjC,IAHA,IAAIuG,EAAW,GACXU,EAAU/D,KAAKoD,KAEZW,GACDA,EAAQ3B,KAAKtF,UAAYA,GAC3BuG,EAAS5C,KAAKsD,EAAQ3B,MAExB2B,EAAUA,EAAQd,KAGpB,OAAOI,CACT,GAAC,CAAAvP,IAAA,yBAAAtB,MAED,WAIE,IAHA,IAAI6Q,EAAW,GACXU,EAAU/D,KAAKoD,KAEZW,GACsB,WAAxBA,EAAQ3B,KAAK5M,SACd6N,EAAS5C,KAAKsD,EAAQ3B,MAExB2B,EAAUA,EAAQd,KAGpB,OAAOI,CACT,GAAC,CAAAvP,IAAA,yBAAAtB,MAED,WAIE,IAHA,IAAI6Q,EAAW,GACXU,EAAU/D,KAAKoD,KAEZW,GACsB,WAAxBA,EAAQ3B,KAAK5M,SACd6N,EAAS5C,KAAKsD,EAAQ3B,MAExB2B,EAAUA,EAAQd,KAGpB,OAAOI,CACT,GAAC,CAAAvP,IAAA,0BAAAtB,MAED,SAAwB0R,EAAQC,GAC9B,IAEMzC,EAFY1B,KAAKoE,yBAEIzC,MAAK,SAAAJ,GAAG,OAAIA,EAAIrD,kBAAoBgG,GAAU3C,EAAI1G,mBAAqBsJ,CAAK,IAEvG,OAAGzC,EACMA,EAAO/D,QAGT,EACT,GAAC,CAAA7J,IAAA,8BAAAtB,MAED,SAA4B0R,EAAQC,GAElC,OADkBnE,KAAKoE,yBACJzC,MAAK,SAAAJ,GAAG,OAAIA,EAAIrD,kBAAoBgG,GAAU3C,EAAI1G,mBAAqBsJ,CAAK,GACjG,GAAC,CAAArQ,IAAA,kBAAAtB,MAED,SAAgB6R,EAAQC,GAEtB,IADA,IAAIC,EAAcvE,KAAKoD,KAChBmB,GAAa,CAElB,GAAIA,EAAYnC,KAAKtP,KAAOuR,EAAQ,CAClCE,EAAYnC,KAAKzE,QAAU2G,EAC3B,KACF,CACAC,EAAcA,EAAYtB,IAC5B,CAEAjD,KAAKpB,sBACP,GAAC,CAAA9K,IAAA,0BAAAtB,MAED,WAIE,IAHA,IAAI6Q,EAAW,GACXU,EAAU/D,KAAKoD,KAEZW,GACsB,QAAxBA,EAAQ3B,KAAK5M,SACd6N,EAAS5C,KAAKsD,EAAQ3B,MAExB2B,EAAUA,EAAQd,KAGpB,OAAOI,CACT,GAAC,CAAAvP,IAAA,wBAAAtB,MAED,WAIE,IAHA,IAAI6Q,EAAW,GACXU,EAAU/D,KAAKoD,KAEZW,GACLV,EAAS5C,KAAKsD,EAAQ3B,MACtB2B,EAAUA,EAAQd,KAGpB,OAAOI,CACT,GAAC,CAAAvP,IAAA,sBAAAtB,MAED,SAAoBsK,GAClB,IAEM0H,EAFcxE,KAAKrM,aAAae,OAAOsL,KAAKyE,cAEvB9C,MAAK,SAAAJ,GAAG,OAAIA,EAAIzO,KAAOgK,CAAQ,IAC1D,OAAG0H,EACMA,EAAOjT,KAEP,EAEX,GAAC,CAAAuC,IAAA,uBAAAtB,MAED,WACE,IAAIgJ,EAAS,CACX1I,GAAIkN,KAAKlN,GACTvB,KAAMyO,KAAKzO,KACX2R,YAAalD,KAAKkD,YAClBjQ,KAAM+M,KAAKrM,aACXwP,KAAMnD,KAAKyE,aACXpB,SAAUrD,KAAKhE,wBACfnH,OAAQmL,KAAK9K,eACbuO,gBAAiBzD,KAAKyD,iBAGxBiB,EAAAA,QAAAA,gBAAyBlJ,EAC3B,GAAC,CAAA1H,IAAA,aAAAtB,MAED,SAAWS,GACT+M,KAAK/M,KAAOA,CACd,GAAC,CAAAa,IAAA,cAAAtB,MAED,SAAYqC,GACVmL,KAAKnL,OAASA,CAChB,GAAC,CAAAf,IAAA,gBAAAtB,MAGD,WACE,MAAoB,aAAbwN,KAAKzO,IACd,GAAC,CAAAuC,IAAA,uBAAAtB,MAED,WAEE,IAAKwN,KAAK2E,gBAAgB,CACxB,IAAInJ,EAAS,CACX1I,GAAIkN,KAAKlN,GACTvB,KAAMyO,KAAKzO,KACX2R,YAAalD,KAAKkD,YAClBjQ,KAAM+M,KAAKrM,aACXwP,KAAMnD,KAAKyE,aACXpB,SAAUrD,KAAKhE,wBACfnH,OAAQmL,KAAK9K,eACbsO,kBAAmBoB,KAAKC,UAAUC,OAAOC,YAAY/E,KAAKwD,oBAC1DC,gBAAiBzD,KAAKyD,iBAGxBiB,EAAAA,QAAAA,aAAsBlJ,EACxB,CACF,GAAC,CAAA1H,IAAA,aAAAtB,MAED,SAAWS,GACT,IAAIwB,EAAU,GAEduL,KAAK/M,KAAK+R,SAAQ,SAACC,GACbA,EAAanS,IAAMG,EAAKH,IAC1B2B,EAAQgM,KAAKwE,EAEjB,IAEAjF,KAAK/M,KAAOwB,CACd,GAAC,CAAAX,IAAA,aAAAtB,MAED,SAAW2Q,GACTnD,KAAKmD,KAAK1C,KAAK0C,EACjB,GAAC,CAAArP,IAAA,aAAAtB,MAED,WACE,OAAOwN,KAAK/M,IACd,GAAC,CAAAa,IAAA,eAAAtB,MAED,WACE,OAAOwN,KAAKnL,MACd,GAAC,CAAAf,IAAA,kBAAAtB,MAED,WAEE,IADA,IACoC2O,EAD9B+D,EAAY,IAAIzH,IACtB2D,EAAAC,EAAqBrB,KAAKrM,cAAUwN,EAAAC,KAAAE,MAAE,CAAC,IAA5B6D,EAAMhE,EAAA3O,MACf0S,EAAUxH,IAAIyH,EAAOrS,GAAIqS,EAAO5T,KAClC,CACA,OAAO2T,CACT,GAAC,CAAApR,IAAA,aAAAtB,MAED,WACE,OAAOwN,KAAKmD,IACd,GAAC,CAAArP,IAAA,aAAAtB,MAED,SAAW2Q,GACT,IAAIiC,EAAU,GAEdpF,KAAKmD,KAAK6B,SAAQ,SAACK,GACbA,EAAavS,IAAMqQ,EAAKrQ,IAC1BsS,EAAQ3E,KAAK4E,EAEjB,IAEArF,KAAKmD,KAAOiC,CACd,GAAC,CAAAtR,IAAA,gBAAAtB,MAED,WACE,OAAOwN,KAAKzO,IACd,GAAC,CAAAuC,IAAA,yBAAAtB,MAED,SAAuBoO,GAAU,IAADxF,EAAA,KAC9B,OAAO,IAAIkK,SAAQ,SAAAC,GACjBb,EAAAA,QAAAA,cAAuB9D,GACtB1K,MAAK,SAAAmD,GAEJ,GAAGA,EAAIgK,SAEL,IADA,IAAIA,EAAWhK,EAAIgK,SACX5P,EAAE,EAAGA,EAAE4P,EAASnQ,OAAQO,IAC9B2H,EAAKkB,cAAc+G,EAAS5P,IAKhC,IAAI+P,EAAoB,IAAI/F,IAC5B,GAAGpE,EAAImK,kBAAkB,CACvB,IAAIgC,EAAmBZ,KAAKa,MAAMpM,EAAImK,mBACtCA,EAAoB,IAAI/F,IAAIqH,OAAOY,QAAQF,GAC7C,CAEApK,EAAK7J,KAAO8H,EAAI9H,KAChB6J,EAAK8H,YAAc7J,EAAI6J,YACvB9H,EAAKtI,GAAKuG,EAAIvG,GACdsI,EAAKnI,KAAOoG,EAAIpG,KAAOoG,EAAIpG,KAAO,GAClCmI,EAAK+H,KAAO9J,EAAI8J,KAAO9J,EAAI8J,KAAO,GAClC/H,EAAKvG,OAASwE,EAAIxE,OAASwE,EAAIxE,OAAS,GACxCuG,EAAKoI,kBAAoBA,EACzBpI,EAAKqI,kBAAkBpK,EAAIoK,iBAAkBpK,EAAIoK,eACnD,IACCvN,MAAK,WACJqP,EAAQnK,EACV,GACF,GACF,GAAC,CAAAtH,IAAA,qBAAAtB,MAED,SAAmBgK,GAEjB,IADA,IAAI+H,EAAcvE,KAAKoD,KAChBmB,GAAa,CAClB,GAAIA,EAAYnC,KAAKtP,KAAO0J,EAC1B,OAAO+H,EAETA,EAAcA,EAAYtB,IAC5B,CACA,OAAO,IACT,GAAC,CAAAnP,IAAA,aAAAtB,MAED,SAAWgK,GACT,IAAIsC,EAAUoD,mBAAmB1F,GAEjC,OAAIsC,EAAQtJ,QACHsJ,EAAQtJ,QAGV,SACT,KAACuL,CAAA,CAhbS,E,0FCkQZ,aA3QcjB,EAAAA,EAAAA,UAAA,SAAAhK,KAAAuF,EAAAA,EAAAA,SAAA,KAAAvF,GAAA,KACZ6P,WAAa,WACX,OAAO,IAAIL,SAAQ,SAAAC,GACjBb,IAAAA,WACChP,IAAI,aACJkQ,KAAK,SACL1P,MAAK,SAAAwB,GACAA,EAAS2B,MACXkM,EAAQT,OAAOe,OAAOnO,EAAS2B,QAE/BkM,EAAQ,CAAC,EAEb,GACF,GACF,EAAC,KAEDO,SAAW,WACT,OAAO,IAAIR,SAAQ,SAAAC,GACjBb,IAAAA,WACChP,IAAI,WACJkQ,KAAK,SACL1P,MAAK,SAAAwB,GACAA,EAAS2B,MACXkM,EAAQT,OAAOe,OAAOnO,EAAS2B,QAE/BkM,EAAQ,CAAC,EAEb,GACF,GACF,EAAC,KAEDQ,WAAa,SAACC,GACZ,OAAO,IAAIV,SAAQ,SAAAC,GACjBb,IAAAA,WACChP,IAAI,UAAYsQ,EAAKzU,KAAKwE,QAAQ,MAAO,IAAM,KAC/C2H,IACC,CACEnM,KAAMyU,EAAKzU,KACX2R,YAAa8C,EAAK9C,YAClB+C,YAAaD,EAAKC,YAClBC,MAAOF,EAAKE,MACZC,QAASH,EAAKG,UAGjBjQ,MAAK,SAACkQ,GACLC,QAAQC,IAAI,WAAYF,GACxBb,GAAQ,EACV,IACCgB,OAAM,SAAAC,GACLH,QAAQC,IAAI,QAASE,EACvB,GACF,GACF,EAAC,KAEDC,gBAAkB,SAACjL,GACjB,OAAO,IAAI8J,SAAQ,SAAAC,GACjBb,IAAAA,WACChP,IAAI,YAAc8F,EAAO1I,GAAK,KAC9B4K,IACC,CACE5K,GAAI0I,EAAO1I,GACXvB,KAAMiK,EAAOjK,KACb2R,YAAa1H,EAAO0H,YACpBjQ,KAAMuI,EAAOvI,KACbkQ,KAAM3H,EAAO2H,KACbE,SAAU7H,EAAO6H,SACjBI,gBAAiBjI,EAAOiI,kBAG3BvN,MAAK,SAACkQ,GACLC,QAAQC,IAAI,WAAYF,GACxBb,GAAQ,EACV,IACCgB,OAAM,SAAAC,GACLH,QAAQC,IAAI,QAASE,EACvB,GACF,GACF,EAAC,KAEDE,aAAe,SAAClL,GACd,OAAO,IAAI8J,SAAQ,SAAAC,GACjBb,IAAAA,WACChP,IAAI,YAAc8F,EAAO1I,GAAK,KAC9B6T,OACC,CACE7T,GAAI0I,EAAO1I,GACXvB,KAAMiK,EAAOjK,KACb2R,YAAa1H,EAAO0H,YACpBjQ,KAAMuI,EAAOvI,KACbkQ,KAAM3H,EAAO2H,KACbE,SAAU7H,EAAO6H,SACjBxO,OAAQ2G,EAAO3G,OACf2O,kBAAmBhI,EAAOgI,kBAC1BC,gBAAiBjI,EAAOiI,kBAG3BvN,MAAK,SAACkQ,GACLC,QAAQC,IAAI,WAAYF,GACxBb,GAAQ,EACV,IACCgB,OAAM,SAAAC,GACLH,QAAQC,IAAI,QAASE,EACvB,GACF,GACF,EAAC,KAEDI,aAAe,WACb,OAAO,IAAItB,SAAQ,SAAAC,GACjBb,IAAAA,WACChP,IAAI,eACJkQ,KAAK,SACL1P,MAAK,SAAAwB,GACAA,EAAS2B,MACXkM,EAAQT,OAAOe,OAAOnO,EAAS2B,QAE/BkM,EAAQ,CAAC,EAEb,GACF,GACF,EAAC,KAEDsB,uBAAyB,WACvB,OAAO,IAAIvB,SAAQ,SAAAC,GACjBb,IAAAA,WACChP,IAAI,yBACJkQ,KAAK,SACL1P,MAAK,SAAAwB,GACAA,EAAS2B,MACXkM,EAAQT,OAAOe,OAAOnO,EAAS2B,QAE/BkM,EAAQ,CAAC,EAEb,GACF,GACF,EAAC,KAEDuB,iBAAmB,WACjB,OAAO,IAAIxB,SAAQ,SAAAC,GACjBb,IAAAA,WACChP,IAAI,gBACJkQ,KAAK,SACL1P,MAAK,SAAAwB,GACAA,EAAS2B,MACXkM,EAAQT,OAAOe,OAAOnO,EAAS2B,QAE/BkM,EAAQ,CAAC,EAEb,GACF,GACF,EAAC,KAEDwB,UAAY,SAACC,EAAQC,EAAOnI,EAASoI,EAAWC,GAC9C,OAAO,IAAI7B,SAAQ,SAAAC,GACjBb,IAAAA,WACAhP,IAAI,UAAYsR,EAAS,IAAME,EAAY,IAAMD,EAAQ,KACzDxG,KAAK,CACH9C,QAASmB,EACTsI,UAAWnQ,KAAKC,MAChBmQ,IAAKF,IAEPjR,MAAK,WACHqP,GAAQ,EACV,IAAGgB,OAAM,SAAAC,GACPjB,EAAQ,CAAC,EACX,GACF,GACF,EAAC,KAED+B,QAAU,WACR,OAAO5C,IAAAA,SACT,EAAC,KAEDoC,iBAAmB,WACjB,OAAO,IAAIxB,SAAQ,SAAAC,GACjBb,IAAAA,WACChP,IAAI,gBACJkQ,KAAK,SACL1P,MAAK,SAAAwB,GACAA,EAAS2B,MACXkM,EAAQT,OAAOe,OAAOnO,EAAS2B,QAE/BkM,EAAQ,CAAC,EAEb,GACF,GACF,EAAC,KAEDgC,cAAgB,SAACzU,GACf,OAAO,IAAIwS,SAAQ,SAAAC,GACjBb,IAAAA,WACChP,IAAI,YAAY5C,GAChB8S,KAAK,SACL1P,MAAK,SAAAwB,GACAA,EAAS2B,MACXkM,EAAQT,OAAOpN,EAAS2B,QAExBkM,EAAQ,CAAC,EAEb,GACF,GACF,EAAC,KAEDiC,eAAiB,SAACb,GAChB,OAAO,IAAIrB,SAAQ,SAAAC,GACjBb,IAAAA,WACChP,IAAI,UAAUiR,EAAO7T,GAAE,KACvB6T,OACC,CACEc,SAAUd,EAAOe,cAGpBxR,MAAK,SAACkQ,GACL,OAAO,IAAId,SAAQ,SAAAC,GACjBb,IAAAA,WACChP,IAAI,UAAUiR,EAAO7T,GAAE,YAAY6T,EAAOgB,UAC1CxT,SACA+B,MAAK,WACJqP,GAAQ,EACV,IAAGgB,OAAO,SAACC,GACTH,QAAQC,IAAI,QAASE,EACvB,GACF,IACCtQ,MAAK,SAACkQ,GACLb,GAAQ,EACV,IACCgB,OAAM,SAAAC,GACLH,QAAQC,IAAI,QAASE,EACvB,GACF,IACCD,OAAM,SAAAC,GACLH,QAAQC,IAAI,QAASE,EACvB,GACF,GAEF,EAAC,KAEDoB,gBAAkB,SAACC,GACjB,OAAO,IAAIvC,SAAQ,SAAAC,GACjBb,IAAAA,WACChP,IAAI,UAAUmS,EAAK/U,GAAG,YAAc+U,EAAKF,SAAW,KACpDjK,IAAImK,GACJ3R,MAAK,SAACkQ,GACLC,QAAQC,IAAI,WAAYF,GACxBb,GAAQ,EACV,IACCgB,OAAM,SAAAC,GACLH,QAAQC,IAAI,QAASE,EACvB,GACF,GACF,EAAC,KAEDsB,sBAAwB,SAACnI,EAASoI,GAChC,OAAO,IAAIzC,SAAQ,SAAAC,GACjBb,IAAAA,WACChP,IAAI,WAAaiK,EAAU,KAC3BgH,OAAO,CAACoB,gBAAAA,IACR7R,MAAK,SAACkQ,GACLC,QAAQC,IAAI,WAAYF,GACxBb,GAAQ,EACV,IACCgB,OAAM,SAAAC,GACLH,QAAQC,IAAI,QAASE,EACvB,GACF,GACF,CAAC,I","sources":["src/components/EditableField/EditableField.js","src/components/CastMembers/CastMembers.js","src/components/Scenes/Scenes.js","src/components/FilePicker/FilePicker.js","src/components/RecordModal/RecordModal.js","src/components/MsgTypes/MsgTypes.js","src/components/TimeInput/TimeInput.js","src/components/CommentedPopup/CommentedPopup.js","src/components/EditScript/EditScript.js","src/components/Script/Script.js","src/firebase/firebase.js"],"sourcesContent":["import React from \"react\";\n\nimport TextField from \"@material-ui/core/TextField\";\n\nimport \"./EditableField.css\";\n\nfunction EditableField(props) {\n  let oldName = \"textyng\"\n\n  if(props.name){\n    oldName = props.name\n  }\n  const [name, setName] = React.useState(oldName);\n  const [isNameFocused, setIsNamedFocused] = React.useState(false);\n\n  function onBlurFunction(){\n    setIsNamedFocused(false)\n    props.getScriptName([props.id, name])\n  }\n\n  return (\n    <div className=\"EditableField\">\n      {!isNameFocused ? (\n        <div\n          onClick={() => {\n            setIsNamedFocused(true);\n          }}\n        >\n          {name}\n        </div>\n      ) : (\n        <TextField\n          autoFocus\n          inputProps={{maxLength: 20, style: {fontSize: props.fontSize ? props.fontSize : 50}}}\n          value={name}\n          onChange={(event) => setName(event.target.value)}\n          onBlur={(event) => onBlurFunction()}\n\n        />\n      )}\n    </div>\n  );\n}\n\nexport default EditableField;\n","import React from \"react\";\nimport EditableField from \"../EditableField/EditableField\";\n\nimport \"./CastMembers.css\";\n\nfunction CastMembers(props) {\n  let defaultCast = [\n    {\n      name: \"Kiyo\",\n      id: 1,\n    },\n    {\n      name: \"Cast Member\",\n      id: 2,\n    },\n  ];\n\n  const [casts, setCast] = React.useState(props.cast && props.cast.length > 0 ? props.cast : defaultCast);\n  const [totalCast, setTotalCast] = React.useState(props.cast && props.cast.length > 0 ? props.cast.length : defaultCast.length);\n\n  function addNewCastMember() {\n    let newCast = {\n      name: \"Cast Member\",\n      id: totalCast + 1,\n    };\n    setCast(casts => [...casts, newCast]);\n    setTotalCast(totalCast + 1);\n    props.getAllCast(casts);\n  }\n\n  function updateCastName(name) {\n    let id = name[0];\n    let newName = name[1];\n\n    for (var i = 0; i < casts.length; i++) {\n      if (casts[i].id == id) {\n        casts[i].name = newName;\n      }\n    }\n\n    setCast(casts => [...casts]);\n    props.getAllCast(casts);\n  }\n\n  function updateActiveOption(value) {\n    var el = document.querySelectorAll(\".CastMembers-cast\");\n\n    for (let i = 0; i < el.length; i++) {\n      el[i].classList.remove(\"active\");\n    }\n\n    document.getElementById(\"CastMembers-castId-\" + value.id).classList.add(\"active\");\n\n    props.selectedCast ? props.selectedCast(value) : {};\n  }\n\n  return (\n    <div className=\"CastMembers\">\n      {casts.map(\n        (value, index) => (\n          <div\n            id={\"CastMembers-castId-\" + value.id}\n            className=\"CastMembers-cast\"\n            key={index}\n            onClick={() => updateActiveOption(value)}\n          >\n            <EditableField name={value.name} id={value.id} fontSize={16} getScriptName={updateCastName} />\n          </div>\n        )\n      )}\n\n      <div className=\"CastMembers-addCast CastMembers-cast\" onClick={() => addNewCastMember()}>\n        +\n      </div>\n    </div>\n  );\n}\n\nexport default CastMembers;\n","import React from \"react\";\nimport EditableField from \"../EditableField/EditableField\";\n\nimport \"./Scenes.css\";\n\nfunction Scenes(props) {\n  let defaultScenes = [\n    {\n      name: \"Bombay\",\n      id: 1,\n    },\n    {\n      name: \"Sheraton Hostel\",\n      id: 2,\n    },\n  ];\n\n  const [scenes, setScenes] = React.useState(props.scenes && props.scenes.length > 0 ? props.scenes : defaultScenes);\n  const [totalScenes, setTotalScenes] = React.useState(props.scenes && props.scenes.length > 0 ? props.scenes.length : defaultScenes.length);\n\n  function addNewScene() {\n    let newScene = {\n      name: \"Scene\",\n      id: totalScenes + 1,\n    };\n    setScenes(scenes => [...scenes, newScene]);\n    setTotalScenes(totalScenes + 1);\n    props.getAllScenes(scenes);\n  }\n\n  function updateSceneName(name) {\n    let id = name[0];\n    let newName = name[1];\n\n    for (var i = 0; i < scenes.length; i++) {\n      if (scenes[i].id == id) {\n        scenes[i].name = newName;\n      }\n    }\n\n    setScenes(scenes => [...scenes]);\n    props.getAllScenes(scenes);\n  }\n\n  function updateActiveOption(value) {\n    var el = document.querySelectorAll(\".Scenes-scene\");\n\n    for (let i = 0; i < el.length; i++) {\n      el[i].classList.remove(\"active\");\n    }\n\n    document.getElementById(\"Scenes-sceneId-\" + value.id).classList.add(\"active\");\n\n    props.selectedScene ? props.selectedScene(value) : {};\n  }\n\n  return (\n    <div className=\"Scenes\">\n      {scenes.map(\n        (value, index) => (\n          <div\n            id={\"Scenes-sceneId-\" + value.id}\n            className=\"Scenes-scene\"\n            key={index}\n            onClick={() => updateActiveOption(value)}\n          >\n            <EditableField name={value.name} id={value.id} fontSize={16} getScriptName={updateSceneName} />\n          </div>\n        )\n      )}\n\n      <div className=\"Scenes-addScene Scenes-scene\" onClick={() => addNewScene()}>\n        +\n      </div>\n    </div>\n  );\n}\n\nexport default Scenes;\n","import React, { useRef } from 'react';\nimport Firebase from \"../../firebase/firebase.js\";\n\nimport \"./FilePicker.css\"\n\nconst FilePicker = (props) => {\n  const fileInput = useRef(null);\n\n  const handleFileSelect = (event) => {\n    const file = event.target.files[0];\n    const storageRef = Firebase.storage().ref(props.msgType.replace(/ /g, \"\") + \"/\");\n    const fileRef = storageRef.child(file.name);\n    fileRef.put(file).then(() => {\n      fileRef.getDownloadURL().then(url => {\n        props.getImgURL(url)\n      });\n    });\n  }\n  return (\n    <div className=\"FilePicker\">\n        <span>{props.msgType}</span>\n        <input\n          className=\"file-input\"\n          type=\"file\"\n          ref={fileInput}\n          onChange={handleFileSelect}\n        />\n    </div>\n  );\n}\n\nexport default FilePicker;\n","import React from 'react';\nimport { Recorder } from 'react-voice-recorder';\nimport Firebase from \"../../firebase/firebase.js\";\n\nimport './RecordModal.css';\nimport \"react-voice-recorder/dist/index.css\";\n\nfunction RecordModal(props) {\n  const [isRecording, setIsRecording] = React.useState(false);\n  const [audioUrl, setAudioUrl] = React.useState(null);\n\n  function handleStartRecording() {\n    setIsRecording(true);\n  }\n\n  function handleStopRecording(blob) {\n    setIsRecording(false);\n    setAudioUrl(blob.blobURL);\n    const milliseconds = Math.floor(Date.now() / 1000)\n    const storageRef = Firebase.storage().ref(\"VoiceNotes/\" + milliseconds);\n\n    // Upload the audio to Firebase\n    const audioFile = new File([blob.blob], milliseconds.toString()+'audio.mp3', {\n        type: 'audio/mp3',\n        metadata: {\n            cors: [{\n              origin: ['http://localhost:19006'],\n            }],\n        },\n    });\n\n    storageRef.put(audioFile).then(snapshot => {\n        snapshot.ref.getDownloadURL().then(url => {\n            props.getVNURL(url)\n        });\n    });\n\n  }\n\n  return (\n    <div className=\"RecordModal\">\n      {isRecording ? (\n        <div className=\"RecordModal-modalPopup\">\n            <Recorder handleAudioStop={handleStopRecording} />\n        </div>\n      ) : (\n        <button onClick={handleStartRecording} className=\"RecordModal-recordBbutton\">\n          Start recording\n        </button>\n      )}\n      {audioUrl && (\n        <div>\n          <audio src={audioUrl} controls />\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default RecordModal;","import React from \"react\";\nimport FilePicker from \"../FilePicker/FilePicker.js\"\nimport RecordModal from \"../RecordModal/RecordModal.js\"\n\nimport \"./MsgTypes.css\";\n\nfunction MsgTypes(props) {\n  let msgTypes = [\n    \"Thinking...\",\n    \"Left Scene\",\n  ];\n\n  return (\n    <div className=\"MsgTypes\">\n      <div\n        className={\"MsgTypes-name\"}\n        onClick={() => props.grabScreenshot()}\n      >\n        Screen Shot\n      </div>\n      <div className={\"MsgTypes-name\"}>\n        <FilePicker\n          msgType=\"Upload Image\"\n          getImgURL={props.getInsertedImg}\n        />\n      </div>\n      <div className={\"MsgTypes-name\"}>\n        <RecordModal\n          msgType=\"Voice Note\"\n          getVNURL={props.getVNURL}\n        />\n      </div>\n      <div className={\"MsgTypes-name\"}>\n        <FilePicker\n          msgType=\"Upload Video\"\n          getImgURL={props.getUplodedVideo}\n        />\n      </div>\n      {msgTypes.map((value, index) => (\n        <div\n          id={\"MsgTypes-id-\" + index}\n          className={\"MsgTypes-name\"}\n          key={index}\n          onClick={() => props.selectedMsgType ? props.selectedMsgType(value) : {}}\n        >\n          {value}\n        </div>\n      ))}\n    </div>\n  );\n}\n\nexport default MsgTypes;\n","import React from \"react\";\n\nimport \"./TimeInput.css\";\n\nfunction TimeInput(props){\n    const [value, setValue] = React.useState(\"0:00\");\n\n    const onChange = (event) => {\n      setValue(event.target.value);\n    };\n\n    const onBlur = (event) => {\n      const value = event.target.value;\n      const seconds = Math.max(0, getSecondsFromHHMMSS(value));\n\n      props.inputTime(seconds)\n\n      const time = toHHMMSS(seconds);\n      setValue(time);\n    };\n\n    const getSecondsFromHHMMSS = (value) => {\n      const [str1, str2, str3] = value.split(\":\");\n\n      const val1 = Number(str1);\n      const val2 = Number(str2);\n      const val3 = Number(str3);\n\n      if (!isNaN(val1) && isNaN(val2) && isNaN(val3)) {\n        return val1;\n      }\n\n      if (!isNaN(val1) && !isNaN(val2) && isNaN(val3)) {\n        return val1 * 60 + val2;\n      }\n\n      if (!isNaN(val1) && !isNaN(val2) && !isNaN(val3)) {\n        return val1 * 60 * 60 + val2 * 60 + val3;\n      }\n\n      return 0;\n    };\n\n    const toHHMMSS = (secs) => {\n      const secNum = parseInt(secs.toString(), 10);\n      const hours = Math.floor(secNum / 3600);\n      const minutes = Math.floor(secNum / 60) % 60;\n      const seconds = secNum % 60;\n\n      return [hours, minutes, seconds]\n        .map((val) => (val < 10 ? `0${val}` : val))\n        .filter((val, index) => val !== \"00\" || index > 0)\n        .join(\":\")\n        .replace(/^0/, \"\");\n    };\n\n    if(props.spslm){\n        setValue(props.spslm)\n    }\n\n    return (\n        <input\n            className=\"TimeInput\"\n            type=\"text\"\n            onChange={onChange}\n            onBlur={onBlur}\n            value={value}\n        />\n    );\n};\n\nexport default TimeInput;","import React, { useState } from 'react';\nimport TextField from \"@material-ui/core/TextField\";\n\nimport \"./CommentedPopup.css\"\n\nfunction CommentedPopup(props) {\n  const [isVisible, setIsVisible] = useState(false);\n  const [inputValue, setInputValue] = useState(props.alreadySavedValue);\n\n  const handleShow = () => {\n    setIsVisible(true);\n  };\n\n  const handleSave = () => {\n    props.onSave(inputValue, props.idOfMsgCommented, props.whoSentCommentedMsg);\n    setIsVisible(false);\n  };\n\n  const handleClose = () => {\n    setIsVisible(false);\n  };\n\n  const handleInputChange = (event) => {\n    setInputValue(event.target.value);\n  };\n\n  return (\n    <div className=\"parent-element\">\n      {isVisible && (\n        <div id=\"popup\">\n          <div id=\"popup-content\">\n            <TextField\n              variant=\"outlined\"\n              value={inputValue}\n              placeholder=\"Type comment here\"\n              onChange={e => handleInputChange(e)}\n              multiline\n              minRows={4}\n            />\n            <button id=\"save\" onClick={handleSave}>Save</button>\n            <button id=\"close\" onClick={handleClose}>&times;</button>\n          </div>\n        </div>\n      )}\n      <button id=\"commented-button\" onClick={handleShow}>comment</button>\n    </div>\n  );\n}\n\nexport default CommentedPopup;\n","import React, { Component } from \"react\";\nimport TextField from \"@material-ui/core/TextField\";\nimport { connect } from \"react-redux\";\nimport { withRouter } from \"react-router-dom\";\nimport Script from \"../Script/Script.js\";\nimport EditableField from \"../EditableField/EditableField\";\nimport CastMembers from \"../CastMembers/CastMembers\";\nimport Scenes from \"../Scenes/Scenes\";\nimport MsgTypes from \"../MsgTypes/MsgTypes\";\nimport Button from \"@material-ui/core/Button\";\nimport TimeInput from \"../TimeInput/TimeInput.js\"\nimport CommentedPopup from \"../CommentedPopup/CommentedPopup.js\"\nimport html2canvas from 'html2canvas';\nimport Firebase from \"../../firebase/firebase\";\n\nimport \"./EditScript.css\";\n\nclass ConnectedEditScript extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      animateGreeting: \"EditScript-animategreeting\",\n      orderId: \"\",\n      script: props.script ? props.script : null,\n      isNewScript: props.isNewScript,\n      selectedCastId: 1,\n      selectedSceneId: 1,\n      selectedMsgType: \"\",\n      timeSinceLastMsg: \"\",\n      textMsg: \"\",\n      emotion: \"\",\n      allMessages: [],\n      spslm: 0,\n      likedByMap:  props.script ? props.script.getOnlyLikedMsgsAsNodes() : new Map(),\n    };\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.intervalId);\n  }\n\n  componentDidMount() {\n    //hack: use this to fix github pages doing ?/ on pages\n    if (window.location.href.includes(\"?/\")){\n      let actualDestination = window.location.href.split(\"?/\")[1]\n\n      this.props.history.push({\n        pathname: \"/\" + actualDestination\n      });\n    }\n    \n    //TODO do this better\n    if (!this.state.isNewScript){\n      let scriptId = window.location.pathname.replaceAll(\"/editscript/\", \"\")\n\n      if(scriptId != \"\"){\n        var textyng = new Script(scriptId);\n        textyng.grabScriptFromFirebase(scriptId)\n        .then(() => {\n          this.setState({\n            script: textyng,\n            likedByMap: this.generateLikedMap(textyng.getOnlyLikedMsgsAsNodes())\n          })\n        })\n      }\n    }else{\n      this.setState({likedByMap: this.generateLikedMap(this.state.script.getOnlyLikedMsgsAsNodes())})\n    }\n\n    this.intervalId = setInterval(() => {\n      this.setState({ spslm: this.state.spslm + 1 });\n    }, 1000);\n  }\n\n  generateLikedMap(likedMessages){\n    let map = new Map();\n\n    for (let obj of likedMessages) {\n      let key = `${obj.msgLikedId}${obj.msgLikedSenderId}`;\n      map.set(key, true);\n    }\n\n    return map\n  }\n\n  getScriptName = (name) => {\n    this.state.script.updateScriptName(name[1])\n  }\n\n  getAllCast = (cast) => {\n    this.state.script.updateCast(cast)\n  }\n\n  getAllScenes = (scenes) => {\n    this.state.script.updateScene(scenes)\n  }\n\n  getSelectedCast = (cast) => {\n    this.setState({selectedCastId: cast.id}, () => {\n      this.setState({allMessages: this.state.script.getAllMessagesAsNodes()})\n    })\n  }\n\n  getSelectedScene = (scene) => {\n    this.setState({selectedSceneId: scene.id}, () => {\n      this.setState({allMessages: this.state.script.getAllMessagesAsNodes()})\n    })\n  }\n\n  getSelectedMsgType = (value) => {\n    this.setState({ textMsg: value}, () => {\n      this.addNewMessage()\n    });\n  }\n\n  alreadyBeenLikedByselectedCastId = (messageId) => {\n    let likedMsgID = `${messageId}${this.state.selectedCastId}`\n\n    if(this.state.likedByMap.has(likedMsgID)){\n      return this.state.likedByMap.get(likedMsgID)\n    }\n    return false\n  }\n\n  deleteLikedMessage(messageId, whoLikedMsg){\n    this.setState({\n      likedByMap: this.state.likedByMap.set(`${messageId}${whoLikedMsg}`, false)\n    })\n\n    let allMessages = this.state.script.getOnlyLikedMsgsAsNodes()\n    const result = allMessages.find(obj => obj.idOfMsgLiked === messageId && obj.whoLikedMsg === whoLikedMsg);\n\n    if(result.id){\n      this.deleteMessage(result.id)\n    }\n  }\n\n  addNewLikeMsg = (messageId, senderId) => {\n    if(!this.alreadyBeenLikedByselectedCastId(messageId)){\n\n      var milliseconds = Math.floor(Date.now() / 1000)\n\n      let tslmsg = this.state.timeSinceLastMsg\n      if(tslmsg == \"\" || tslmsg == 0){\n        tslmsg = this.state.spslm\n      }\n      let msgData = {\n        id: milliseconds,\n        timeStamp: milliseconds,\n        msgType: \"like\",\n        whoSentLikedMsg: senderId,\n        idOfMsgLiked: messageId,\n        whoLikedMsg: this.state.selectedCastId,\n        tslmsg: tslmsg,\n        sceneId: this.state.selectedSceneId\n      }\n      this.state.script.addNewMessage(msgData)\n\n      let updatedLikedByMap = new Map(this.state.likedByMap);\n      updatedLikedByMap.set(`${messageId}${this.state.selectedCastId}`, true);\n\n      this.setState({\n        likedByMap: updatedLikedByMap,\n        allMessages: this.state.script.getAllMessagesAsNodes(),\n        spslm: 0,\n      })\n    }else{\n      this.deleteLikedMessage(messageId, this.state.selectedCastId)\n    }\n  }\n\n  addNewMessage = () => {\n    var milliseconds = Math.floor(Date.now() / 1000)\n\n    let tslmsg = this.state.timeSinceLastMsg\n    if(tslmsg == \"\" || tslmsg == 0){\n      tslmsg = this.state.spslm\n    }\n\n    let msgData = {\n      id: milliseconds,\n      timeStamp: milliseconds,\n      content: this.state.textMsg,\n      emotion: this.state.emotion,\n      senderId: this.state.selectedCastId,\n      tslmsg: tslmsg,\n      msgType: \"textMsg\",\n      sceneId: this.state.selectedSceneId,\n    }\n\n    if(this.isActionMsg()){\n      msgData.msgType = \"action\"\n    }\n\n    if(this.isAuthorActionMsg()){ \n      msgData.msgType = \"authorAction\"\n    }\n\n    this.state.script.addNewMessage(msgData)\n    this.setState({\n      allMessages: this.state.script.getOnlyTextMsgsAsNodes(),\n      textMsg: \"\",\n      emotion: \"\",\n      spslm: 0,\n    })\n  }\n\n  isActionMsg(){\n    return this.state.emotion == \"y:\"\n  }\n\n  isAuthorActionMsg(){\n    return this.state.emotion == \"yy:\"\n  }\n\n  addNewMsgComment = (comment, idOfMsgCommented, whoSentCommentedMsg) => {\n    var milliseconds = Math.floor(Date.now() / 1000)\n\n    let tslmsg = this.state.timeSinceLastMsg\n    if(tslmsg == \"\" || tslmsg == 0){\n      tslmsg = this.state.spslm\n    }\n\n    let msgData = {\n      id: milliseconds,\n      timeStamp: milliseconds,\n      msgType: \"comment\",\n      content: comment,\n      emotion: this.state.emotion,\n      whoSentCommentedMsg: whoSentCommentedMsg,\n      idOfMsgCommented: idOfMsgCommented,\n      whoCommentedMsg: this.state.selectedCastId,\n      tslmsg: tslmsg,\n      sceneId: this.state.selectedSceneId\n    }\n\n    this.state.script.addNewMessage(msgData)\n    this.setState({\n      allMessages: this.state.script.getOnlyTextMsgsAsNodes(),\n      textMsg: \"\",\n      emotion: \"\",\n      spslm: 0,\n    })\n  }\n\n  addNewMediaMsg = (mediaType, mediaURL, isImg, isAudio, isVideo) => {\n\n    var milliseconds = Math.floor(Date.now() / 1000)\n\n    let tslmsg = this.state.timeSinceLastMsg\n    if(tslmsg == \"\" || tslmsg == 0){\n      tslmsg = this.state.spslm\n    }\n\n    let msgData = {\n      id: milliseconds,\n      timeStamp: milliseconds,\n      content: mediaType,\n      emotion: this.state.emotion,\n      senderId: this.state.selectedCastId,\n      tslmsg: tslmsg,\n      isImg: isImg,\n      isAudio: isAudio,\n      isVideo: isVideo,\n      msgType: \"textMsg\",\n      url: mediaURL,\n      sceneId: this.state.selectedSceneId\n    }\n\n    this.state.script.addNewMessage(msgData)\n    this.setState({\n      allMessages: this.state.script.getOnlyTextMsgsAsNodes(),\n      textMsg: \"\",\n      emotion: \"\",\n      spslm: 0,\n    })\n  }\n\n\n  componentDidUpdate(){\n    if(this.state.script){\n      this.state.script.updateScriptFirebase()\n    }\n  }\n\n  getInputTime = (timeInSeconds) => {\n    this.setState({\n      timeSinceLastMsg: timeInSeconds,\n    })\n  }\n\n  deleteMessage = (id) => {\n    this.state.script.deleteMessage(id)\n    this.setState({allMessages: this.state.script.getOnlyTextMsgsAsNodes()},\n    () => {\n        this.state.script.updateScriptFirebase()\n    });\n  }\n\n  onSaveComment = (message, idOfMsgCommented, whoSentCommentedMsg) => {\n    let existingCommentNode = this.state.script.getCommentNodeByCastIdMsgId(this.state.selectedCastId, idOfMsgCommented)\n    if(existingCommentNode != nil){\n      this.state.script.editNodeContent(existingCommentNode.id, message)\n    }else{\n      this.addNewMsgComment(message, idOfMsgCommented, whoSentCommentedMsg)\n    }\n  }\n\n  grabScreenshot = (url) => {\n    const element = document.getElementById('EditScript-chatArea-id');\n\n    html2canvas(element).then(canvas => {\n      const imageData = canvas.toDataURL();\n      const milliseconds = Math.floor(Date.now() / 1000)\n      const storageRef = Firebase.storage().ref(\"ScreenShot/\" + milliseconds);\n      storageRef.putString(imageData, 'data_url').then(snapshot => {\n        snapshot.ref.getDownloadURL().then(downloadURL => {\n          this.addNewMediaMsg(\"ScreenShot\", downloadURL, true, false, false)\n        });\n      });\n    });\n  }\n\n  getInsertedImg = (url) => {\n    this.addNewMediaMsg(\"InsertImage\", url, true, false, false)\n  }\n\n  getUplodedVideo = (url) => {\n    this.addNewMediaMsg(\"UploadedVideo\", url, false, false, true)\n  }\n\n  getVNURL = (url) => {\n    this.addNewMediaMsg(\"VoiceNote\", url, false, true, false)\n  }\n\n  render() {\n    if(this.state.script){\n        return (\n            <div className=\"EditScript\">\n                <div className=\"EditScript-container l-container\">\n                    <div className=\"EditScript-title\">\n                      <EditableField\n                        name={this.state.script.getScriptName()}\n                        getScriptName={this.getScriptName}\n                      />\n                    </div>\n                    <div className=\"EditScript-scenes\">\n                      <Scenes\n                        scenes = {this.state.script.getAllScenes()}\n                        selectedScene={this.getSelectedScene}\n                        getAllScenes={this.getAllScenes}\n                      />\n                    </div>\n                    <div className=\"EditScript-cast\">\n                      <CastMembers\n                        cast = {this.state.script.getAllCast()}\n                        selectedCast={this.getSelectedCast}\n                        getAllCast={this.getAllCast}\n                      />\n                    </div>\n                    <div className=\"EditScript-textView\">\n                      <MsgTypes\n                        grabScreenshot = {this.grabScreenshot}\n                        getInsertedImg = {this.getInsertedImg}\n                        selectedMsgType = {this.getSelectedMsgType}\n                        getUplodedVideo = {this.getUplodedVideo}\n                        getVNURL = {this.getVNURL}\n                      />\n                      <div id=\"EditScript-chatArea-id\" className=\"EditScript-chatArea\">\n                        {this.state.allMessages.length == 0 &&\n                          <span className=\"EditScript-castMemberPrompt\">click on a cast member to see messages</span>\n                        }\n                        {this.state.allMessages.map((message, index) => (\n                          (message.sceneId == this.state.selectedSceneId)\n                          &&\n                          <DynamicClassAssignment key={index} isActive={message.senderId == this.state.selectedCastId && message.msgType != \"authorAction\"} message={message} index={index} >\n                            {message.isImg &&\n                              <img\n                                className=\"EditScript-imgMsg\"\n                                src={message.url}\n                              />\n                            }\n                            {message.isAudio &&\n                              <audio\n                                className=\"EditScript-audioMsg\"\n                                src={message.url}\n                                controls\n                              />\n                            }\n                            {message.isVideo &&\n                              <video\n                                className=\"EditScript-videoMsg\"\n                                src={message.url}\n                                controls\n                              />\n                            }\n                            {/* //TODO: delete very msgtype like of an original message if original message was deleted */}\n                            {message.msgType == \"like\" && this.state.script.getNodeByMessageId(message.idOfMsgLiked) &&\n                              <div\n                                className=\"ReaderView-msgLike\"\n                              >\n                                <span>\n                                  {this.state.script.getSenderNameFromID(message.whoLikedMsg)}&nbsp;\n                                  liked message&nbsp;\n                                  {this.state.script.getNodeByMessageId(message.idOfMsgLiked).data.MsgIndex}&nbsp;\n                                  by&nbsp;\n                                  {this.state.script.getSenderNameFromID(message.whoSentLikedMsg)}&nbsp;\n                                </span>\n                              </div>\n                            }\n                            {message.msgType == \"action\" &&\n                              <div\n                                className=\"EditScript-msgTypeAction glowing-text\"\n                              >\n                                  <span className=\"EditScript-senderName\">{this.state.script.getSenderNameFromID(message.senderId)}</span>\n                                  <span>y: {message.content}</span> \n                              </div>\n                            }\n                            {message.msgType == \"authorAction\" &&\n                              <div\n                                className=\"EditScript-msgTypeAuthorAction glowing-text\"\n                              >\n                                <div className=\"EditScript-content\">\n                                  yy: {message.content}\n                                </div>\n                              </div>\n                            }\n                            {message.msgType != \"action\" && message.msgType != \"authorAction\" &&\n                              <div className=\"EditScript-isnotactionMsg\">\n                                <span className=\"EditScript-senderName\">{this.state.script.getSenderNameFromID(message.senderId)}</span>\n                                <span className=\"EditScript-senderEmotion\">{message.emotion ? '('+message.emotion + ')': ''}</span>\n                                <span>{message.content}</span>\n                              </div>\n                            }  \n\n                            {/* TODO: find a better way to do this */}\n                            <span className=\"EditScript-msgIndex\">{message.MsgIndex}</span>\n                            <div className=\"EditScript-chatArea-msg-buttons\">\n                              <button className=\"EditScript-chatArea-msg-button\" onClick={() => this.deleteMessage(message.id)}>Delete</button>\n                              <button className=\"EditScript-chatArea-msg-button\" onClick={() => this.addNewLikeMsg(message.id, message.senderId)}>{this.alreadyBeenLikedByselectedCastId(message.id) ? \"Unlike\" : \"Like\"}</button>\n                              <CommentedPopup\n                                className=\"EditScript-chatArea-msg-button\"\n                                idOfMsgCommented={message.id}\n                                whoSentCommentedMsg={message.senderId}\n                                onSave={this.onSaveComment}\n                                alreadySavedValue={this.state.script.getCommentByCastIdMsgId(this.state.selectedCastId, message.id)}\n                              />\n                            </div>\n                            \n                          </DynamicClassAssignment>\n                        ))}\n                      </div>\n\n                      <div className=\"EditScript-sendMessage\">\n                        <TextField\n                          variant=\"outlined\"\n                          className=\"EditScript-sendMessage--input\"\n                          value={this.state.textMsg}\n                          placeholder=\"Type message here\"\n                          onChange={e => {\n                            this.setState({ textMsg: e.target.value });\n                          }}\n                        />\n\n                        <TextField\n                          variant=\"outlined\"\n                          className=\"EditScript-emotions--input\"\n                          value={this.state.emotion}\n                          placeholder=\"Type emotion here\"\n                          onChange={e => {\n                            this.setState({ emotion: e.target.value });\n                          }}\n                        />\n\n                        <TimeInput inputTime={this.getInputTime} />\n                      </div>\n                      \n\n                      <div className=\"EditScript-saveSubmit\">\n                        <div>\n                          <Button\n                            className=\"EditScript-saveSubmit--send\"\n                            variant=\"outlined\"\n                            color=\"primary\"\n                            onClick={() => this.addNewMessage()}\n                          >\n                            Send\n                          </Button>\n                        </div>\n                        <div>\n                          <Button\n                            className=\"EditScript-saveSubmit--save\"\n                            variant=\"outlined\"\n                            color=\"primary\"\n                            onClick={() => this.state.script.updateScriptFirebase()}\n                          >\n                            save\n                          </Button>\n                        </div>\n                      </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }else{\n        return (\n            <div className=\"is-loading\">script loading...</div>\n        )\n    }\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {};\n};\n\nlet EditScript = withRouter(connect(mapStateToProps)(ConnectedEditScript));\nexport default withRouter(EditScript);\n\n\nconst DynamicClassAssignment = (props) =>{\n\n    if(props.isActive){\n        return (\n            <div className={\"EditScript-chatArea-msg active\"}>\n                {props.children}\n            </div>\n        );\n    }else{\n        return (\n            <div className={\"EditScript-chatArea-msg\"}>\n                {props.children}\n            </div>\n        );\n    }\n  }","import { DataArray } from \"@mui/icons-material\";\nimport React, { Component } from \"react\";\nimport firebase from \"../../firebase/firebase\";\n\nclass MessageNode {\n  constructor(data) {\n    this.data = data;\n    this.next = null;\n  }\n}\n\nclass Script {\n  constructor(name) {\n    var milliseconds = Math.floor(Date.now() / 1000)\n\n    this.name = name;\n    this.dateCreated = milliseconds\n    this.id = name + milliseconds\n    this.cast = [];\n    this.crew = [];\n    this.scenes = [];\n    this.head = null;\n    this.messages = new MessageNode();\n    this.node = {};\n    this.totalNoMsgs = 0;\n    this.readerReactionMap = new Map();\n    this.isPrivateScript = false;\n  }\n\n  updateScriptName(name){\n    this.name = name\n    this.updateIsPrivateScript()\n  }\n\n  updateIsPrivateScript(){\n    if(this.name.startsWith(\"yyyy\")){\n      this.isPrivateScript = true\n    }\n  }\n\n  numberOfMessages() {\n    let count = 0;\n    let node = this.head;\n    while (node) {\n      count++;\n      node = node.next;\n    }\n    return count;\n  }\n\n  getScenes(){\n    return this.scenes\n  }\n\n  updateReaderReaction(emojiName, messageId){\n    if (!this.readerReactionMap.has(messageId)) {\n      this.readerReactionMap.set(messageId, []);\n    }\n    this.readerReactionMap.get(messageId).push(emojiName);\n\n    this.updateScriptFirebase()\n  }\n\n  getReaderReactionMap(){\n    return this.readerReactionMap\n  }\n\n  getTotalNumScenes(){\n    return this.getScenes().length\n  }\n\n  deleteScript() {\n    this.head = null;\n  }\n\n  getLastMessage() {\n    let lastNode = this.head;\n    if (lastNode) {\n      while (lastNode.next) {\n        lastNode = lastNode.next;\n      }\n    }\n    return lastNode;\n  }\n\n  getFirstMessage() {\n    return this.head;\n  }\n\n  addNewMessage(data) {\n    this.totalNoMsgs += 1\n    data.MsgIndex = this.totalNoMsgs\n\n    let newNode = new MessageNode(data);\n\n    if (!this.head) {\n      this.head = newNode;\n      return this.head;\n    }\n\n    let current = this.head;\n    while (current.next) {\n      current = current.next;\n    }\n    current.next = newNode;\n  }\n\n  deleteMessage(id){\n    if (this.head.data.id === id) {\n      this.head = this.head.next;\n    } else {\n      let current = this.head;\n      while (current.next) {\n        if (current.next.data.id === id) {\n          current.next = current.next.next;\n          break;\n        }\n        current = current.next;\n      }\n    }\n    return this.head;\n  }\n\n  getLastMessage() {\n    let current = this.head;\n\n    while (current.next) {\n      current = current.next;\n    }\n\n    return current.data.content\n  }\n\n  getNthMessage(n) {\n    n -= 1\n    let current = this.head;\n\n    for(var i = 0; i < n; i++){\n      if (current){\n        current = current.next;\n      }else{\n        //nth message doesn't exist\n        return \"\"\n      }\n    }\n\n    return current.data.content\n  }\n\n  getNthMessageNode(n) {\n    n -= 1\n    let current = this.head;\n\n    for(var i = 0; i < n; i++){\n      if (current.next){\n        current = current.next;\n      }else{\n        //nth message doesn't exist\n        return \"\"\n      }\n    }\n\n    if (current){\n      return current.data\n    }\n\n    return null\n  }\n\n  getAllMessagesStringList() {\n    let messages = []\n    let current = this.head;\n\n    while (current) {\n      messages.push(current.data.content)\n      current = current.next;\n    }\n\n    return messages\n  }\n\n  getAllMessagesStringListBySenderId(senderId){\n    let messages = []\n    let current = this.head;\n\n    while (current) {\n      if (current.data.senderId == senderId){\n        messages.push(current.data)\n      }\n      current = current.next;\n    }\n\n    return messages\n  }\n\n  getOnlyTextMsgsAsNodes(){\n    let messages = []\n    let current = this.head;\n\n    while (current) {\n      if(current.data.msgType == \"textMsg\"){\n        messages.push(current.data)\n      }\n      current = current.next;\n    }\n\n    return messages\n  }\n\n  getOnlyCommentsAsNodes(){\n    let messages = []\n    let current = this.head;\n\n    while (current) {\n      if(current.data.msgType == \"comment\"){\n        messages.push(current.data)\n      }\n      current = current.next;\n    }\n\n    return messages\n  }\n\n  getCommentByCastIdMsgId(castId, msgId) {\n    let allComments = this.getOnlyCommentsAsNodes()\n\n    const result = allComments.find(obj => obj.whoCommentedMsg === castId && obj.idOfMsgCommented === msgId);\n\n    if(result){\n      return result.content\n    }\n\n    return ''\n  }\n\n  getCommentNodeByCastIdMsgId(castId, msgId) {\n    let allComments = this.getOnlyCommentsAsNodes()\n    return allComments.find(obj => obj.whoCommentedMsg === castId && obj.idOfMsgCommented === msgId);\n  }\n\n  editNodeContent(nodeId, newContent){\n    let currentNode = this.head;\n    while (currentNode) {\n\n      if (currentNode.data.id === nodeId) {\n        currentNode.data.content = newContent;\n        break;\n      }\n      currentNode = currentNode.next;\n    }\n\n    this.updateScriptFirebase()\n  }\n\n  getOnlyLikedMsgsAsNodes(){\n    let messages = []\n    let current = this.head;\n\n    while (current) {\n      if(current.data.msgType == \"like\"){\n        messages.push(current.data)\n      }\n      current = current.next;\n    }\n\n    return messages\n  }\n\n  getAllMessagesAsNodes() {\n    let messages = []\n    let current = this.head;\n\n    while (current) {\n      messages.push(current.data)\n      current = current.next;\n    }\n\n    return messages\n  }\n\n  getSenderNameFromID(senderId){\n    const mergedArray = this.getAllCast().concat(this.getAllCrew());\n\n    const sender = mergedArray.find(obj => obj.id === senderId);\n    if(sender){\n      return sender.name\n    }else{\n      return \"\"\n    }\n  }\n\n  sendScriptToFirebase() {\n    let script = {\n      id: this.id,\n      name: this.name,\n      dateCreated: this.dateCreated,\n      cast: this.getAllCast(),\n      crew: this.getAllCrew(),\n      messages: this.getAllMessagesAsNodes(),\n      scenes: this.getAllScenes(),\n      isPrivateScript: this.isPrivateScript,\n    }\n\n    firebase.createNewScript(script)\n  }\n\n  updateCast(cast){\n    this.cast = cast\n  }\n\n  updateScene(scenes){\n    this.scenes = scenes\n  }\n\n  //might have to update how we should understand this\n  isEmptyScript(){\n    return this.name == \"NewScript\"\n  }\n\n  updateScriptFirebase(){\n\n    if (!this.isEmptyScript()){\n      let script = {\n        id: this.id,\n        name: this.name,\n        dateCreated: this.dateCreated,\n        cast: this.getAllCast(),\n        crew: this.getAllCrew(),\n        messages: this.getAllMessagesAsNodes(),\n        scenes: this.getAllScenes(),\n        readerReactionMap: JSON.stringify(Object.fromEntries(this.readerReactionMap)),\n        isPrivateScript: this.isPrivateScript,\n      }\n  \n      firebase.updateScript(script)\n    }\n  }\n\n  removeCast(cast){\n    let newCast = []\n\n    this.cast.forEach((existingCast) => {\n      if (existingCast.id != cast.id){\n        newCast.push(existingCast)\n      }\n    })\n\n    this.cast = newCast\n  }\n\n  addNewCrew(crew){\n    this.crew.push(crew)\n  }\n\n  getAllCast(){\n    return this.cast\n  }\n\n  getAllScenes(){\n    return this.scenes\n  }\n\n  getCastIdToName(){\n    const idNameMap = new Map();\n    for (const object of this.getAllCast) {\n      idNameMap.set(object.id, object.name);\n    }\n    return idNameMap;\n  }\n\n  getAllCrew(){\n    return this.crew\n  }\n\n  removeCrew(crew){\n    let newCrew = []\n\n    this.crew.forEach((existingCrew) => {\n      if (existingCrew.id != crew.id){\n        newCrew.push(existingCrew)\n      }\n    })\n\n    this.crew = newCrew\n  }\n\n  getScriptName() {\n    return this.name;\n  }\n  \n  grabScriptFromFirebase(scriptId){\n    return new Promise(resolve => {\n      firebase.getScriptById(scriptId)\n      .then(val => {\n\n        if(val.messages){\n          let messages = val.messages\n          for(var i=0; i<messages.length; i++){\n            this.addNewMessage(messages[i])\n          }\n        }\n\n        //grab user reactions\n        let readerReactionMap = new Map();\n        if(val.readerReactionMap){\n          let javascriptObject = JSON.parse(val.readerReactionMap);\n          readerReactionMap = new Map(Object.entries(javascriptObject));\n        }\n\n        this.name = val.name;\n        this.dateCreated = val.dateCreated\n        this.id = val.id\n        this.cast = val.cast ? val.cast : []\n        this.crew = val.crew ? val.crew : []\n        this.scenes = val.scenes ? val.scenes : []\n        this.readerReactionMap = readerReactionMap\n        this.isPrivateScript = val.isPrivateScript ? val.isPrivateScript : false\n      })\n      .then(() => {\n        resolve(this)\n      })\n    })\n  }\n\n  getNodeByMessageId(messageId){\n    let currentNode = this.head;\n    while (currentNode) {\n      if (currentNode.data.id === messageId) {\n        return currentNode;\n      }\n      currentNode = currentNode.next;\n    }\n    return null;\n  }\n\n  getMsgType(messageId){\n    let message = getNodeByMessageId(messageId)\n\n    if (message.msgType){\n      return message.msgType\n    }\n\n    return \"textMsg\"\n  }\n}\n\nexport default Script;","import firebase from \"firebase\";\n\nclass Firebase {\n  getScripts = () =>{\n    return new Promise(resolve => {\n      firebase.database()\n      .ref('/scripts/')\n      .once('value')\n      .then(snapshot => {\n        if (snapshot.val()){\n          resolve(Object.values(snapshot.val()))\n        }else{\n          resolve({})\n        }\n      })\n    })\n  }\n\n  getFylds = () =>{\n    return new Promise(resolve => {\n      firebase.database()\n      .ref('/fylds/')\n      .once('value')\n      .then(snapshot => {\n        if (snapshot.val()){\n          resolve(Object.values(snapshot.val()))\n        }else{\n          resolve({})\n        }\n      })\n    })\n  }\n\n  createFyld = (fyld) => {\n    return new Promise(resolve => {\n      firebase.database()\n      .ref('/fylds/' + fyld.name.replace(/\\s/g, '') + '/')\n      .set(\n        {\n          name: fyld.name,\n          dateCreated: fyld.dateCreated,\n          description: fyld.description,\n          image: fyld.image,\n          friends: fyld.friends,\n        }\n      )\n      .then((response) => {\n        console.log(\"response\", response)\n        resolve(true)\n      })\n      .catch(error => {\n        console.log(\"error\", error)\n      })\n    })\n  }\n\n  createNewScript = (script) => {\n    return new Promise(resolve => {\n      firebase.database()\n      .ref('/scripts/' + script.id + '/')\n      .set(\n        {\n          id: script.id,\n          name: script.name,\n          dateCreated: script.dateCreated,\n          cast: script.cast,\n          crew: script.crew,\n          messages: script.messages,\n          isPrivateScript: script.isPrivateScript,\n        }\n      )\n      .then((response) => {\n        console.log(\"response\", response)\n        resolve(true)\n      })\n      .catch(error => {\n        console.log(\"error\", error)\n      })\n    })\n  }\n\n  updateScript = (script) => {\n    return new Promise(resolve => {\n      firebase.database()\n      .ref('/scripts/' + script.id + '/')\n      .update(\n        {\n          id: script.id,\n          name: script.name,\n          dateCreated: script.dateCreated,\n          cast: script.cast,\n          crew: script.crew,\n          messages: script.messages,\n          scenes: script.scenes,\n          readerReactionMap: script.readerReactionMap,\n          isPrivateScript: script.isPrivateScript,\n        }\n      )\n      .then((response) => {\n        console.log(\"response\", response)\n        resolve(true)\n      })\n      .catch(error => {\n        console.log(\"error\", error)\n      })\n    })\n  }\n\n  getOpenAIAPI = () => {\n    return new Promise(resolve => {\n      firebase.database()\n      .ref('/openAIAPI/')\n      .once('value')\n      .then(snapshot => {\n        if (snapshot.val()){\n          resolve(Object.values(snapshot.val()))\n        }else{\n          resolve({})\n        }\n      })\n    })\n  }\n\n  getConversationHistory = () => {\n    return new Promise(resolve => {\n      firebase.database()\n      .ref('/conversationHistory/')\n      .once('value')\n      .then(snapshot => {\n        if (snapshot.val()){\n          resolve(Object.values(snapshot.val()))\n        }else{\n          resolve({})\n        }\n      })\n    })\n  }\n\n  getRimiSenTitles = () =>{\n    return new Promise(resolve => {\n      firebase.database()\n      .ref('/rimiLyrics/')\n      .once('value')\n      .then(snapshot => {\n        if (snapshot.val()){\n          resolve(Object.values(snapshot.val()))\n        }else{\n          resolve({})\n        }\n      })\n    })\n  }\n\n  postChats = (seller, buyer, message, productId, senderID) => {\n    return new Promise(resolve => {\n      firebase.database().\n      ref('/chats/' + seller + '/' + productId + '/' + buyer + '/').\n      push({\n        content: message,\n        timestamp: Date.now(),\n        uid: senderID,\n      }).\n      then(() => {\n        resolve(true)\n      }).catch(error =>{\n        resolve({})\n      })\n    })\n  }\n\n  storage = () => {\n    return firebase.storage()\n  }\n\n  getRimiSenTitles = () =>{\n    return new Promise(resolve => {\n      firebase.database()\n      .ref('/rimiLyrics/')\n      .once('value')\n      .then(snapshot => {\n        if (snapshot.val()){\n          resolve(Object.values(snapshot.val()))\n        }else{\n          resolve({})\n        }\n      })\n    })\n  }\n\n  getScriptById = (id) => {\n    return new Promise(resolve => {\n      firebase.database()\n      .ref('/scripts/'+id)\n      .once('value')\n      .then(snapshot => {\n        if (snapshot.val()){\n          resolve(Object(snapshot.val()))\n        }else{\n          resolve({})\n        }\n      })\n    })\n  }\n\n  updateSenTitle = (update) =>{\n    return new Promise(resolve => {\n      firebase.database()\n      .ref(`/rimis/${update.id}/`)\n      .update(\n        {\n          senTitle: update.newSenTitle,\n        },\n      )\n      .then((response) => {\n        return new Promise(resolve => {\n          firebase.database()\n          .ref(`/rimis/${update.id}/updates/${update.updateId}`)\n          .remove()\n          .then(() => {\n            resolve(true)\n          }).catch( (error) =>{\n            console.log(\"error\", error)\n          })\n        })\n        .then((response) => {\n          resolve(true)\n        })\n        .catch(error => {\n          console.log(\"error\", error)\n        })\n      })\n      .catch(error => {\n        console.log(\"error\", error)\n      })\n    })\n\n  }\n\n  sendForApproval = (item) => {\n    return new Promise(resolve => {\n      firebase.database()\n      .ref('/rimis/'+item.id+'/updates/' + item.updateId + '/')\n      .set(item)\n      .then((response) => {\n        console.log(\"response\", response)\n        resolve(true)\n      })\n      .catch(error => {\n        console.log(\"error\", error)\n      })\n    })\n  }\n\n  updateVideoSnippetURL = (orderId, snippetVideoURL) => {\n    return new Promise(resolve => {\n      firebase.database()\n      .ref('/orders/' + orderId + '/')\n      .update({snippetVideoURL})\n      .then((response) => {\n        console.log(\"response\", response)\n        resolve(true)\n      })\n      .catch(error => {\n        console.log(\"error\", error)\n      })\n    })\n  }\n}\n\nexport default new Firebase();\n"],"names":["props","oldName","name","_React$useState","React","_React$useState2","_slicedToArray","setName","_React$useState3","_React$useState4","isNameFocused","setIsNamedFocused","className","TextField","autoFocus","inputProps","maxLength","style","fontSize","value","onChange","event","target","onBlur","getScriptName","id","onClick","defaultCast","cast","length","casts","setCast","totalCast","setTotalCast","updateCastName","newName","i","_toConsumableArray","getAllCast","map","index","key","el","document","querySelectorAll","classList","remove","getElementById","add","selectedCast","updateActiveOption","EditableField","newCast","concat","addNewCastMember","defaultScenes","scenes","setScenes","totalScenes","setTotalScenes","updateSceneName","getAllScenes","selectedScene","newScene","addNewScene","fileInput","useRef","msgType","type","ref","file","files","fileRef","Firebase","replace","child","put","then","getDownloadURL","url","getImgURL","isRecording","setIsRecording","audioUrl","setAudioUrl","Recorder","handleAudioStop","blob","blobURL","milliseconds","Math","floor","Date","now","storageRef","audioFile","File","toString","metadata","cors","origin","snapshot","getVNURL","src","controls","grabScreenshot","FilePicker","getInsertedImg","RecordModal","getUplodedVideo","selectedMsgType","setValue","getSecondsFromHHMMSS","_value$split","split","_value$split2","str1","str2","str3","val1","Number","val2","val3","isNaN","toHHMMSS","secs","secNum","parseInt","val","filter","join","spslm","seconds","max","inputTime","time","_useState","useState","_useState2","isVisible","setIsVisible","_useState3","alreadySavedValue","_useState4","inputValue","setInputValue","variant","placeholder","e","multiline","minRows","onSave","idOfMsgCommented","whoSentCommentedMsg","ConnectedEditScript","_Component","_inherits","_super","_createSuper","_this","_classCallCheck","call","state","script","updateScriptName","updateCast","updateScene","getSelectedCast","setState","selectedCastId","allMessages","getAllMessagesAsNodes","getSelectedScene","scene","selectedSceneId","getSelectedMsgType","textMsg","addNewMessage","alreadyBeenLikedByselectedCastId","messageId","likedMsgID","likedByMap","has","get","addNewLikeMsg","senderId","deleteLikedMessage","tslmsg","timeSinceLastMsg","msgData","timeStamp","whoSentLikedMsg","idOfMsgLiked","whoLikedMsg","sceneId","updatedLikedByMap","Map","set","content","emotion","isActionMsg","isAuthorActionMsg","getOnlyTextMsgsAsNodes","addNewMsgComment","comment","whoCommentedMsg","addNewMediaMsg","mediaType","mediaURL","isImg","isAudio","isVideo","getInputTime","timeInSeconds","deleteMessage","updateScriptFirebase","onSaveComment","message","existingCommentNode","getCommentNodeByCastIdMsgId","nil","editNodeContent","element","html2canvas","canvas","imageData","toDataURL","putString","downloadURL","animateGreeting","orderId","isNewScript","getOnlyLikedMsgsAsNodes","_createClass","clearInterval","this","intervalId","_this2","window","location","href","includes","actualDestination","history","push","pathname","generateLikedMap","scriptId","replaceAll","textyng","Script","grabScriptFromFirebase","setInterval","likedMessages","_step","_iterator","_createForOfIteratorHelperLoose","done","obj","msgLikedId","msgLikedSenderId","result","find","_this3","Scenes","CastMembers","MsgTypes","DynamicClassAssignment","isActive","getNodeByMessageId","getSenderNameFromID","data","MsgIndex","CommentedPopup","getCommentByCastIdMsgId","TimeInput","Button","color","Component","EditScript","withRouter","connect","children","MessageNode","next","dateCreated","crew","head","messages","node","totalNoMsgs","readerReactionMap","isPrivateScript","updateIsPrivateScript","startsWith","count","emojiName","getScenes","current","newNode","n","castId","msgId","getOnlyCommentsAsNodes","nodeId","newContent","currentNode","sender","getAllCrew","firebase","isEmptyScript","JSON","stringify","Object","fromEntries","forEach","existingCast","idNameMap","object","newCrew","existingCrew","Promise","resolve","javascriptObject","parse","entries","getScripts","once","values","getFylds","createFyld","fyld","description","image","friends","response","console","log","catch","error","createNewScript","updateScript","update","getOpenAIAPI","getConversationHistory","getRimiSenTitles","postChats","seller","buyer","productId","senderID","timestamp","uid","storage","getScriptById","updateSenTitle","senTitle","newSenTitle","updateId","sendForApproval","item","updateVideoSnippetURL","snippetVideoURL"],"sourceRoot":""}