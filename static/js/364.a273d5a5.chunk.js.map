{"version":3,"file":"static/js/364.a273d5a5.chunk.js","mappings":"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","sources":["src/components/Fylds/Fylds.js","src/firebase/firebase.js"],"sourcesContent":["import React, { Component } from 'react';\nimport Firebase from \"../../firebase/firebase.js\";\n\nimport './Fylds.css';\n\nclass Fylds extends Component {\n\n  //initialize your state\n  state = {\n    models: [], //array of model objects\n    activeModel: null, //model that is currently selected\n    chatInput: '', //user input for chat\n    chats: [], //array of chat messages\n    placeholder: \"do you even have any idea?\"\n  }\n\n  int1 = null;\n\n  async componentDidMount() {\n    await Firebase.getFylds().then((fylds) => {\n      this.setState({ models: fylds });\n    });\n\n    this.int1 = setInterval(() => {\n      Firebase.getFylds().then((fylds) => {\n        this.setState({ models: fylds });\n      });\n    }, 5000);\n\n    const screenWidth = window.innerWidth;\n    const screenHeight = window.innerHeight;\n    const cloudWidth = 150;\n    const cloudHeight = 100;\n    const maxClouds = Math.floor((screenWidth * screenHeight) / (cloudWidth * cloudHeight * 4));\n    const clouds = document.querySelectorAll(\".cloud\");\n    const numClouds = Math.min(clouds.length, maxClouds);\n    \n    for (let i = 0; i < numClouds; i++) {\n      const delay = Math.random() * 5;\n      const x = Math.random() * 100;\n      const y = Math.random() * 90;\n      clouds[i].style.animationDelay = delay + \"s\";\n      clouds[i].style.left = x + \"%\";\n      clouds[i].style.top = y + \"%\";\n    }\n  \n    for (let i = numClouds; i < clouds.length; i++) {\n      clouds[i].style.display = \"none\";\n    }\n  }\n  \n  componentWillUnmount(){\n    clearInterval(this.int1); \n  }\n\n  //function to handle model selection\n  handleModelClick = (model) => {\n    this.setState({ \n      activeModel: model,\n      placeholder: \"say something to \" + model.name + \"...\"\n    });\n  }\n\n  //function to handle user chat input\n  handleChatInput = (event) => {\n    this.setState({ chatInput: event.target.value });\n  }\n\n  //function to handle sending a chat message\n  handleSendMessage = async () => {\n    let { activeModel, chatInput } = this.state;\n  \n    // create a new fyld\n    if (chatInput.startsWith(\"y:\")) {\n\n      let fyld = {\n        name: chatInput.slice(2),\n        description: chatInput.slice(2),\n        image: \"\",\n        friends: \"everything\",\n        dateCreated: new Date().toLocaleDateString('en-US')\n      };\n\n      await Firebase.createFyld(fyld).then((response) => {\n        this.setState({ \n          chatInput: `thanks, created ${fyld.name}!`\n        });\n\n        setTimeout(() => {\n          this.setState({ \n            chatInput: '',\n          });\n        }, 3000);\n      });\n\n      return\n    }\n\n    // if no model is selected, do nothing\n    if (!activeModel) {\n\n      activeModel = {\n        name: \"anything\",\n        description: \"anything\",\n        image: \"https://i.imgur.com/3Zo7z6S.png\",\n        friends: \"everything\",\n        dateCreated: \"2022-02-28\"\n      }\n\n      this.setState({ \n        activeModel: activeModel,\n        placeholder: \"say something to anything...\",\n      });\n    };\n    \n    // add user's input to chat history\n    const newChat = { sender: 'user', message: chatInput };\n    this.setState(prevState => ({\n      chats: [...prevState.chats, newChat],\n      chatInput: ''\n    }));\n\n    // send user's input to OpenAI API and get AI's response\n    const openAIAPI = await Firebase.getOpenAIAPI();\n    const openaiApiKey = Array.isArray(openAIAPI) ? openAIAPI.join(\"\") : openAIAPI;\n  \n    const { Configuration, OpenAIApi } = require(\"openai\");\n    const configuration = new Configuration({ apiKey: openaiApiKey });\n    delete configuration.baseOptions.headers['User-Agent'];\n\n    const prompt = `MUST READ NOTE: The person chatting with you thinks they are talking to\n                    ${activeModel.name}. Please interact with them as if you were \n                    ${activeModel.name} and chat with them. This is your conversation history with them\n                    \\n\\n${this.state.chats}\\n\\nUser: ${newChat}\\nAI:`;\n\n    \n    const openai = new OpenAIApi(configuration);\n    const response = await openai.createCompletion({\n      model: \"text-davinci-003\",\n      prompt: prompt,\n      max_tokens: 150,\n      n: 1,\n      stop: [\"\\nUser:\", \"AI:\"]\n    });\n    const aiResponse = response.data.choices[0].text.trim();\n  \n    // add AI's response to chat history\n    const newChatAI = { sender: 'ai', message: aiResponse };\n    this.setState(prevState => ({\n      chats: [...prevState.chats, newChatAI]\n    }));\n  }\n\n  render() {\n    const { models, activeModel, chatInput, chats } = this.state;\n\n    //render floating clouds for each model\n    const cloudList = models.map((model) => (\n      <div\n        key={model.name}\n        className={`cloud`} //className={`cloud ${model === activeModel ? 'active' : ''}`}\n        onClick={() => this.handleModelClick(model)}\n      >\n        {model.name}\n      </div>\n    ));\n\n    //render chat popup if a model is selected\n    let chatPopup = null;\n    if (activeModel !== null) {\n      chatPopup = (\n        <div className=\"chat-popup\">\n          <div className=\"chat-close\" onClick={\n            () => this.setState({\n              activeModel: null, \n              placeholder: \"do you even have any idea?\",\n              chatInput: '',\n            })}\n          >\n            X\n          </div>\n          <div className=\"chat-header\">{`Hello, my name is ${activeModel.name}. What's going on?`}</div>\n          <div className=\"chat-messages\">\n            {chats.map((chat, index) => (\n              chat.sender === 'user' ? \n                <div key={index} className={`chat-message user`}>\n                  {chat.message}\n                </div> \n              :\n                <div key={index} className={`chat-message ai`}>\n                  {chat.message}\n                </div>\n            ))}\n          </div>\n        </div>\n      );\n    }\n\n    return (\n      <div className=\"Fylds\">\n        <div className=\"cloud-container\">{cloudList}</div>\n        <div className=\"Fylds-searchbar\">\n            <input\n              className=\"chat-input\"\n              type=\"text\"\n              placeholder={this.state.placeholder}\n              value={chatInput}\n              onChange={this.handleChatInput}\n            />\n          <button className=\"chat-send-button\" onClick={this.handleSendMessage}>\n            Send\n          </button>\n        </div>\n        {chatPopup}\n      </div>\n    );\n  }\n}\n\nexport default Fylds;\n","import firebase from \"firebase\";\n\nclass Firebase {\n  getScripts = () =>{\n    return new Promise(resolve => {\n      firebase.database()\n      .ref('/scripts/')\n      .once('value')\n      .then(snapshot => {\n        if (snapshot.val()){\n          resolve(Object.values(snapshot.val()))\n        }else{\n          resolve({})\n        }\n      })\n    })\n  }\n\n  getFylds = () =>{\n    return new Promise(resolve => {\n      firebase.database()\n      .ref('/fylds/')\n      .once('value')\n      .then(snapshot => {\n        if (snapshot.val()){\n          resolve(Object.values(snapshot.val()))\n        }else{\n          resolve({})\n        }\n      })\n    })\n  }\n\n  createFyld = (fyld) => {\n    return new Promise(resolve => {\n      firebase.database()\n      .ref('/fylds/' + fyld.name.replace(/\\s/g, '') + '/')\n      .set(\n        {\n          name: fyld.name,\n          dateCreated: fyld.dateCreated,\n          description: fyld.description,\n          image: fyld.image,\n          friends: fyld.friends,\n        }\n      )\n      .then((response) => {\n        console.log(\"response\", response)\n        resolve(true)\n      })\n      .catch(error => {\n        console.log(\"error\", error)\n      })\n    })\n  }\n\n  createNewScript = (script) => {\n    return new Promise(resolve => {\n      firebase.database()\n      .ref('/scripts/' + script.id + '/')\n      .set(\n        {\n          id: script.id,\n          name: script.name,\n          dateCreated: script.dateCreated,\n          cast: script.cast,\n          crew: script.crew,\n          messages: script.messages,\n          isPrivateScript: script.isPrivateScript,\n        }\n      )\n      .then((response) => {\n        console.log(\"response\", response)\n        resolve(true)\n      })\n      .catch(error => {\n        console.log(\"error\", error)\n      })\n    })\n  }\n\n  updateScript = (script) => {\n    return new Promise(resolve => {\n      firebase.database()\n      .ref('/scripts/' + script.id + '/')\n      .update(\n        {\n          id: script.id,\n          name: script.name,\n          dateCreated: script.dateCreated,\n          cast: script.cast,\n          crew: script.crew,\n          messages: script.messages,\n          scenes: script.scenes,\n          readerReactionMap: script.readerReactionMap,\n          isPrivateScript: script.isPrivateScript,\n        }\n      )\n      .then((response) => {\n        console.log(\"response\", response)\n        resolve(true)\n      })\n      .catch(error => {\n        console.log(\"error\", error)\n      })\n    })\n  }\n\n  getOpenAIAPI = () => {\n    return new Promise(resolve => {\n      firebase.database()\n      .ref('/openAIAPI/')\n      .once('value')\n      .then(snapshot => {\n        if (snapshot.val()){\n          resolve(Object.values(snapshot.val()))\n        }else{\n          resolve({})\n        }\n      })\n    })\n  }\n\n  getConversationHistory = () => {\n    return new Promise(resolve => {\n      firebase.database()\n      .ref('/conversationHistory/')\n      .once('value')\n      .then(snapshot => {\n        if (snapshot.val()){\n          resolve(Object.values(snapshot.val()))\n        }else{\n          resolve({})\n        }\n      })\n    })\n  }\n\n  getRimiSenTitles = () =>{\n    return new Promise(resolve => {\n      firebase.database()\n      .ref('/rimiLyrics/')\n      .once('value')\n      .then(snapshot => {\n        if (snapshot.val()){\n          resolve(Object.values(snapshot.val()))\n        }else{\n          resolve({})\n        }\n      })\n    })\n  }\n\n  postChats = (seller, buyer, message, productId, senderID) => {\n    return new Promise(resolve => {\n      firebase.database().\n      ref('/chats/' + seller + '/' + productId + '/' + buyer + '/').\n      push({\n        content: message,\n        timestamp: Date.now(),\n        uid: senderID,\n      }).\n      then(() => {\n        resolve(true)\n      }).catch(error =>{\n        resolve({})\n      })\n    })\n  }\n\n  storage = () => {\n    return firebase.storage()\n  }\n\n  getRimiSenTitles = () =>{\n    return new Promise(resolve => {\n      firebase.database()\n      .ref('/rimiLyrics/')\n      .once('value')\n      .then(snapshot => {\n        if (snapshot.val()){\n          resolve(Object.values(snapshot.val()))\n        }else{\n          resolve({})\n        }\n      })\n    })\n  }\n\n  getScriptById = (id) => {\n    return new Promise(resolve => {\n      firebase.database()\n      .ref('/scripts/'+id)\n      .once('value')\n      .then(snapshot => {\n        if (snapshot.val()){\n          resolve(Object(snapshot.val()))\n        }else{\n          resolve({})\n        }\n      })\n    })\n  }\n\n  updateSenTitle = (update) =>{\n    return new Promise(resolve => {\n      firebase.database()\n      .ref(`/rimis/${update.id}/`)\n      .update(\n        {\n          senTitle: update.newSenTitle,\n        },\n      )\n      .then((response) => {\n        return new Promise(resolve => {\n          firebase.database()\n          .ref(`/rimis/${update.id}/updates/${update.updateId}`)\n          .remove()\n          .then(() => {\n            resolve(true)\n          }).catch( (error) =>{\n            console.log(\"error\", error)\n          })\n        })\n        .then((response) => {\n          resolve(true)\n        })\n        .catch(error => {\n          console.log(\"error\", error)\n        })\n      })\n      .catch(error => {\n        console.log(\"error\", error)\n      })\n    })\n\n  }\n\n  sendForApproval = (item) => {\n    return new Promise(resolve => {\n      firebase.database()\n      .ref('/rimis/'+item.id+'/updates/' + item.updateId + '/')\n      .set(item)\n      .then((response) => {\n        console.log(\"response\", response)\n        resolve(true)\n      })\n      .catch(error => {\n        console.log(\"error\", error)\n      })\n    })\n  }\n\n  updateVideoSnippetURL = (orderId, snippetVideoURL) => {\n    return new Promise(resolve => {\n      firebase.database()\n      .ref('/orders/' + orderId + '/')\n      .update({snippetVideoURL})\n      .then((response) => {\n        console.log(\"response\", response)\n        resolve(true)\n      })\n      .catch(error => {\n        console.log(\"error\", error)\n      })\n    })\n  }\n}\n\nexport default new Firebase();\n"],"names":["Fylds","_Component","_inherits","_super","_createSuper","_this","_classCallCheck","_len","arguments","length","args","Array","_key","call","apply","concat","state","models","activeModel","chatInput","chats","placeholder","int1","handleModelClick","model","setState","name","handleChatInput","event","target","value","handleSendMessage","_this$state","fyld","newChat","openAIAPI","openaiApiKey","_require","Configuration","OpenAIApi","configuration","prompt","openai","response","aiResponse","newChatAI","_regeneratorRuntime","_context","prev","next","startsWith","slice","description","image","friends","dateCreated","Date","toLocaleDateString","Firebase","then","setTimeout","abrupt","sender","message","prevState","_toConsumableArray","sent","isArray","join","require","apiKey","baseOptions","headers","createCompletion","max_tokens","n","stop","data","choices","text","trim","Promise","_createClass","key","screenWidth","screenHeight","maxClouds","clouds","numClouds","i","delay","x","y","_i","_this2","_context2","fylds","this","setInterval","window","innerWidth","innerHeight","Math","floor","document","querySelectorAll","min","random","style","animationDelay","left","top","display","clearInterval","_this3","_this$state2","cloudList","map","React","className","onClick","chatPopup","chat","index","type","onChange","Component","getScripts","resolve","firebase","ref","once","snapshot","val","Object","values","getFylds","createFyld","replace","set","console","log","catch","error","createNewScript","script","id","cast","crew","messages","isPrivateScript","updateScript","update","scenes","readerReactionMap","getOpenAIAPI","getConversationHistory","getRimiSenTitles","postChats","seller","buyer","productId","senderID","push","content","timestamp","now","uid","storage","getScriptById","updateSenTitle","senTitle","newSenTitle","updateId","remove","sendForApproval","item","updateVideoSnippetURL","orderId","snippetVideoURL"],"sourceRoot":""}