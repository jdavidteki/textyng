{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"/Users/jdavid/Documents/textyng/src/components/EditScript/EditScript.js\";\nfunction _createForOfIteratorHelperLoose(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[typeof Symbol === \"function\" ? Symbol.iterator : \"@@iterator\"] || o[\"@@iterator\"]; if (it) return (it = it.call(o)).next.bind(it); if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nimport React, { Component } from \"react\";\nimport TextField from \"@material-ui/core/TextField\";\nimport { connect } from \"react-redux\";\nimport { withRouter } from \"react-router-dom\";\nimport Script from \"../Script/Script.js\";\nimport EditableField from \"../EditableField/EditableField\";\nimport CastMembers from \"../CastMembers/CastMembers\";\nimport MsgTypes from \"../MsgTypes/MsgTypes\";\nimport Button from \"@material-ui/core/Button\";\nimport TimeInput from \"../TimeInput/TimeInput.js\";\nimport CommentedPopup from \"../CommentedPopup/CommentedPopup.js\";\nvar textyng = new Script(\"EditScript\");\nimport \"./EditScript.css\";\nvar ConnectedEditScript = function (_Component) {\n  _inherits(ConnectedEditScript, _Component);\n  var _super = _createSuper(ConnectedEditScript);\n  function ConnectedEditScript(props) {\n    var _this;\n    _classCallCheck(this, ConnectedEditScript);\n    _this = _super.call(this, props);\n    _this.getScriptName = function (name) {\n      _this.state.script.UpdateScriptName(name[1]);\n    };\n    _this.getAllCast = function (cast) {\n      _this.state.script.updateCast(cast);\n    };\n    _this.getSelectedCast = function (cast) {\n      _this.setState({\n        selectedCastId: cast.id\n      }, function () {\n        _this.setState({\n          allMessages: _this.state.script.getOnlyTextMsgsAsNodes()\n        });\n      });\n    };\n    _this.getSelectedMsgType = function (value) {\n      _this.setState({\n        textMsg: value\n      }, function () {\n        _this.addNewMessage();\n      });\n    };\n    _this.alreadyBeenLikedByselectedCastId = function (messageId) {\n      var likedMsgID = \"\" + messageId + _this.state.selectedCastId;\n      if (_this.state.likedByMap.has(likedMsgID)) {\n        return _this.state.likedByMap.get(likedMsgID);\n      }\n      return false;\n    };\n    _this.addNewLikeMsg = function (messageId, senderId) {\n      if (!_this.alreadyBeenLikedByselectedCastId(messageId)) {\n        var milliseconds = Math.floor(Date.now() / 1000);\n        var tslmsg = _this.state.timeSinceLastMsg;\n        if (tslmsg == \"\" || tslmsg == 0) {\n          tslmsg = _this.state.spslm;\n        }\n        var msgData = {\n          id: milliseconds,\n          timeStamp: milliseconds,\n          msgType: \"like\",\n          whoSentLikedMsg: senderId,\n          idOfMsgLiked: messageId,\n          whoLikedMsg: _this.state.selectedCastId,\n          tslmsg: tslmsg\n        };\n        _this.state.script.addNewMessage(msgData);\n        var updatedLikedByMap = new Map(_this.state.likedByMap);\n        updatedLikedByMap.set(\"\" + messageId + _this.state.selectedCastId, true);\n        _this.setState({\n          likedByMap: updatedLikedByMap,\n          allMessages: _this.state.script.getOnlyTextMsgsAsNodes(),\n          spslm: 0\n        });\n      } else {\n        _this.deleteLikedMessage(messageId, _this.state.selectedCastId);\n      }\n    };\n    _this.addNewMessage = function () {\n      var milliseconds = Math.floor(Date.now() / 1000);\n      var tslmsg = _this.state.timeSinceLastMsg;\n      if (tslmsg == \"\" || tslmsg == 0) {\n        tslmsg = _this.state.spslm;\n      }\n      var msgData = {\n        id: milliseconds,\n        timeStamp: milliseconds,\n        content: _this.state.textMsg,\n        senderId: _this.state.selectedCastId,\n        tslmsg: tslmsg,\n        msgType: \"textMsg\"\n      };\n      _this.state.script.addNewMessage(msgData);\n      _this.setState({\n        allMessages: _this.state.script.getOnlyTextMsgsAsNodes(),\n        textMsg: \"\",\n        spslm: 0\n      });\n    };\n    _this.addNewMsgComment = function (comment, idOfMsgCommented, whoSentCommentedMsg) {\n      var milliseconds = Math.floor(Date.now() / 1000);\n      var tslmsg = _this.state.timeSinceLastMsg;\n      if (tslmsg == \"\" || tslmsg == 0) {\n        tslmsg = _this.state.spslm;\n      }\n      var msgData = {\n        id: milliseconds,\n        timeStamp: milliseconds,\n        msgType: \"comment\",\n        content: comment,\n        whoSentCommentedMsg: whoSentCommentedMsg,\n        idOfMsgCommented: idOfMsgCommented,\n        whoCommentedMsg: _this.state.selectedCastId,\n        tslmsg: tslmsg\n      };\n      _this.state.script.addNewMessage(msgData);\n      _this.setState({\n        allMessages: _this.state.script.getOnlyTextMsgsAsNodes(),\n        textMsg: \"\",\n        spslm: 0\n      });\n    };\n    _this.addNewImgMsg = function (imgType, imgURL) {\n      var milliseconds = Math.floor(Date.now() / 1000);\n      var tslmsg = _this.state.timeSinceLastMsg;\n      if (tslmsg == \"\" || tslmsg == 0) {\n        tslmsg = _this.state.spslm;\n      }\n      var msgData = {\n        id: milliseconds,\n        timeStamp: milliseconds,\n        content: imgType,\n        senderId: _this.state.selectedCastId,\n        tslmsg: tslmsg,\n        isImg: true,\n        msgType: \"textMsg\",\n        url: imgURL\n      };\n      console.log(\"msgData\", msgData);\n      _this.state.script.addNewMessage(msgData);\n      _this.setState({\n        allMessages: _this.state.script.getOnlyTextMsgsAsNodes(),\n        textMsg: \"\",\n        spslm: 0\n      });\n    };\n    _this.getInputTime = function (timeInSeconds) {\n      _this.setState({\n        timeSinceLastMsg: timeInSeconds\n      });\n    };\n    _this.deleteMessage = function (id) {\n      _this.state.script.deleteMessage(id);\n      _this.setState({\n        allMessages: _this.state.script.getOnlyTextMsgsAsNodes()\n      }, function () {\n        _this.state.script.updateScriptFirebase();\n      });\n    };\n    _this.onSaveComment = function (message, idOfMsgCommented, whoSentCommentedMsg) {\n      _this.addNewMsgComment(message, idOfMsgCommented, whoSentCommentedMsg);\n      console.log(\"message\", message);\n    };\n    _this.getScreenShotURL = function (url) {\n      console.log(\"url\", url);\n      _this.addNewImgMsg(\"ScreenShot\", url);\n    };\n    _this.getInsertedImg = function (url) {\n      console.log(\"url\", url);\n      _this.addNewImgMsg(\"InsertImage\", url);\n    };\n    _this.getCommentByCastIdMsgId = function (castId, msgId) {\n      var allComments = _this.state.script.getOnlyCommentsAsNodes();\n      var result = allComments.find(function (obj) {\n        return obj.castId === castId && obj.msgId === msgId;\n      });\n      if (result) {\n        return result.content;\n      }\n      return '';\n    };\n    _this.state = {\n      rimis: [],\n      rimisIds: [],\n      filteredRimis: [],\n      rimiToShow: null,\n      animateGreeting: \"EditScript-animategreeting\",\n      orderId: \"\",\n      script: null,\n      selectedCastId: 1,\n      selectedMsgType: \"\",\n      timeSinceLastMsg: \"\",\n      textMsg: \"\",\n      allMessages: [],\n      spslm: 0,\n      likedByMap: new Map()\n    };\n    return _this;\n  }\n  _createClass(ConnectedEditScript, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n      var scriptId = window.location.pathname.replaceAll(\"/editscript/\", \"\");\n      if (scriptId != \"\") {\n        var textyng = new Script(scriptId);\n        textyng.grabScriptFromFirebase(scriptId).then(function () {\n          _this2.setState({\n            script: textyng,\n            likedByMap: _this2.generateLikedMap(textyng.getOnlyLikedMsgsAsNodes())\n          });\n        });\n      }\n    }\n  }, {\n    key: \"generateLikedMap\",\n    value: function generateLikedMap(likedMessages) {\n      var map = new Map();\n      for (var _iterator = _createForOfIteratorHelperLoose(likedMessages), _step; !(_step = _iterator()).done;) {\n        var obj = _step.value;\n        var key = \"\" + obj.msgLikedId + obj.msgLikedSenderId;\n        map.set(key, true);\n      }\n      return map;\n    }\n  }, {\n    key: \"deleteLikedMessage\",\n    value: function deleteLikedMessage(messageId, whoLikedMsg) {\n      this.setState({\n        likedByMap: this.state.likedByMap.set(\"\" + messageId + whoLikedMsg, false)\n      });\n      var allMessages = this.state.script.getOnlyLikedMsgsAsNodes();\n      var result = allMessages.find(function (obj) {\n        return obj.idOfMsgLiked === messageId && obj.whoLikedMsg === whoLikedMsg;\n      });\n      if (result.id) {\n        this.deleteMessage(result.id);\n      }\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      this.state.script.updateScriptFirebase();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n      if (this.state.script) {\n        return React.createElement(\"div\", {\n          className: \"EditScript\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 268,\n            columnNumber: 13\n          }\n        }, React.createElement(\"div\", {\n          className: \"EditScript-container l-container\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 269,\n            columnNumber: 17\n          }\n        }, React.createElement(\"div\", {\n          className: \"EditScript-title\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 270,\n            columnNumber: 21\n          }\n        }, React.createElement(EditableField, {\n          name: this.state.script.getScriptName(),\n          getScriptName: this.getScriptName,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 271,\n            columnNumber: 23\n          }\n        })), React.createElement(\"div\", {\n          className: \"EditScript-cast\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 276,\n            columnNumber: 21\n          }\n        }, React.createElement(CastMembers, {\n          cast: this.state.script.getAllCast(),\n          selectedCast: this.getSelectedCast,\n          getAllCast: this.getAllCast,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 277,\n            columnNumber: 23\n          }\n        })), React.createElement(\"div\", {\n          className: \"EditScript-textView\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 283,\n            columnNumber: 21\n          }\n        }, React.createElement(MsgTypes, {\n          getScreenShotURL: this.getScreenShotURL,\n          getInsertedImg: this.getInsertedImg,\n          selectedMsgType: this.getSelectedMsgType,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 284,\n            columnNumber: 23\n          }\n        }), React.createElement(\"div\", {\n          id: \"EditScript-chatArea-id\",\n          className: \"EditScript-chatArea\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 289,\n            columnNumber: 23\n          }\n        }, this.state.allMessages.length == 0 && React.createElement(\"span\", {\n          className: \"EditScript-castMemberPrompt\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 291,\n            columnNumber: 27\n          }\n        }, \"click on a cast member to see messages\"), this.state.allMessages.map(function (value, index) {\n          return React.createElement(DynamicClassAssignment, {\n            key: index,\n            isActive: value.senderId == _this3.state.selectedCastId,\n            value: value,\n            index: index,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 294,\n              columnNumber: 27\n            }\n          }, value.isImg && React.createElement(\"img\", {\n            className: \"EditScript-imgMsg\",\n            src: value.url,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 296,\n              columnNumber: 31\n            }\n          }), React.createElement(\"div\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 301,\n              columnNumber: 29\n            }\n          }, React.createElement(\"span\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 302,\n              columnNumber: 31\n            }\n          }, value.content), React.createElement(\"span\", {\n            className: \"EditScript-senderName\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 303,\n              columnNumber: 31\n            }\n          }, _this3.state.script.getSenderNameFromID(value.senderId))), React.createElement(\"div\", {\n            className: \"EditScript-chatArea-msg-buttons\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 305,\n              columnNumber: 29\n            }\n          }, React.createElement(\"button\", {\n            className: \"EditScript-chatArea-msg-button\",\n            onClick: function onClick() {\n              return _this3.deleteMessage(value.id);\n            },\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 306,\n              columnNumber: 31\n            }\n          }, \"Delete\"), React.createElement(\"button\", {\n            className: \"EditScript-chatArea-msg-button\",\n            onClick: function onClick() {\n              return _this3.addNewLikeMsg(value.id, value.senderId);\n            },\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 307,\n              columnNumber: 31\n            }\n          }, _this3.alreadyBeenLikedByselectedCastId(value.id) ? \"Unlike\" : \"Like\"), React.createElement(CommentedPopup, {\n            className: \"EditScript-chatArea-msg-button\",\n            idOfMsgCommented: value.id,\n            whoSentCommentedMsg: value.senderId,\n            onSave: _this3.onSaveComment,\n            alreadySavedValue: _this3.getCommentByCastIdMsgId(_this3.state.selectedCastId, value.id),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 308,\n              columnNumber: 31\n            }\n          })));\n        })), React.createElement(\"div\", {\n          className: \"EditScript-sendMessage\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 320,\n            columnNumber: 23\n          }\n        }, React.createElement(TextField, {\n          variant: \"outlined\",\n          className: \"EditScript-sendMessage--input\",\n          value: this.state.textMsg,\n          placeholder: \"Type message here\",\n          onChange: function onChange(e) {\n            _this3.setState({\n              textMsg: e.target.value\n            });\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 321,\n            columnNumber: 25\n          }\n        }), React.createElement(TimeInput, {\n          inputTime: this.getInputTime,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 330,\n            columnNumber: 25\n          }\n        })), React.createElement(\"div\", {\n          className: \"EditScript-saveSubmit\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 333,\n            columnNumber: 23\n          }\n        }, React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 334,\n            columnNumber: 25\n          }\n        }, React.createElement(Button, {\n          className: \"EditScript-saveSubmit--save\",\n          variant: \"outlined\",\n          color: \"primary\",\n          onClick: function onClick() {\n            return _this3.state.script.updateScriptFirebase();\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 335,\n            columnNumber: 29\n          }\n        }, \"save\")), React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 344,\n            columnNumber: 25\n          }\n        }, React.createElement(Button, {\n          className: \"EditScript-saveSubmit--send\",\n          variant: \"outlined\",\n          color: \"primary\",\n          onClick: function onClick() {\n            return _this3.addNewMessage();\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 345,\n            columnNumber: 27\n          }\n        }, \"Send\"))))));\n      } else {\n        return React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 361,\n            columnNumber: 13\n          }\n        }, \"script loading...\");\n      }\n    }\n  }]);\n  return ConnectedEditScript;\n}(Component);\nvar mapStateToProps = function mapStateToProps(state) {\n  return {};\n};\nvar EditScript = withRouter(connect(mapStateToProps)(ConnectedEditScript));\nexport default withRouter(EditScript);\nvar DynamicClassAssignment = function DynamicClassAssignment(props) {\n  if (props.isActive) {\n    return React.createElement(\"div\", {\n      className: \"EditScript-chatArea-msg active\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 379,\n        columnNumber: 13\n      }\n    }, props.children);\n  } else {\n    return React.createElement(\"div\", {\n      className: \"EditScript-chatArea-msg\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 385,\n        columnNumber: 13\n      }\n    }, props.children);\n  }\n};","map":{"version":3,"names":["React","Component","TextField","connect","withRouter","Script","EditableField","CastMembers","MsgTypes","Button","TimeInput","CommentedPopup","textyng","ConnectedEditScript","props","getScriptName","name","state","script","UpdateScriptName","getAllCast","cast","updateCast","getSelectedCast","setState","selectedCastId","id","allMessages","getOnlyTextMsgsAsNodes","getSelectedMsgType","value","textMsg","addNewMessage","alreadyBeenLikedByselectedCastId","messageId","likedMsgID","likedByMap","has","get","addNewLikeMsg","senderId","milliseconds","Math","floor","Date","now","tslmsg","timeSinceLastMsg","spslm","msgData","timeStamp","msgType","whoSentLikedMsg","idOfMsgLiked","whoLikedMsg","updatedLikedByMap","Map","set","deleteLikedMessage","content","addNewMsgComment","comment","idOfMsgCommented","whoSentCommentedMsg","whoCommentedMsg","addNewImgMsg","imgType","imgURL","isImg","url","console","log","getInputTime","timeInSeconds","deleteMessage","updateScriptFirebase","onSaveComment","message","getScreenShotURL","getInsertedImg","getCommentByCastIdMsgId","castId","msgId","allComments","getOnlyCommentsAsNodes","result","find","obj","rimis","rimisIds","filteredRimis","rimiToShow","animateGreeting","orderId","selectedMsgType","scriptId","window","location","pathname","replaceAll","grabScriptFromFirebase","then","generateLikedMap","getOnlyLikedMsgsAsNodes","likedMessages","map","key","msgLikedId","msgLikedSenderId","length","index","getSenderNameFromID","e","target","mapStateToProps","EditScript","DynamicClassAssignment","isActive","children"],"sources":["/Users/jdavid/Documents/textyng/src/components/EditScript/EditScript.js"],"sourcesContent":["import React, { Component } from \"react\";\nimport TextField from \"@material-ui/core/TextField\";\nimport { connect } from \"react-redux\";\nimport { withRouter } from \"react-router-dom\";\nimport Script from \"../Script/Script.js\";\nimport EditableField from \"../EditableField/EditableField\";\nimport CastMembers from \"../CastMembers/CastMembers\";\nimport MsgTypes from \"../MsgTypes/MsgTypes\";\nimport Button from \"@material-ui/core/Button\";\nimport TimeInput from \"../TimeInput/TimeInput.js\"\nimport CommentedPopup from \"../CommentedPopup/CommentedPopup.js\"\n\nvar textyng = new Script(\"EditScript\");\n\nimport \"./EditScript.css\";\n\nclass ConnectedEditScript extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      rimis: [],\n      rimisIds: [],\n      filteredRimis: [],\n      rimiToShow: null,\n      animateGreeting: \"EditScript-animategreeting\",\n      orderId: \"\",\n      script: null,\n      selectedCastId: 1,\n      selectedMsgType: \"\",\n      timeSinceLastMsg: \"\",\n      textMsg: \"\",\n      allMessages: [],\n      spslm: 0,\n      likedByMap: new Map(),\n    };\n  }\n\n  componentDidMount() {\n    let scriptId = window.location.pathname.replaceAll(\"/editscript/\", \"\")\n\n    if(scriptId != \"\"){\n      var textyng = new Script(scriptId);\n      textyng.grabScriptFromFirebase(scriptId)\n      .then(() => {\n        this.setState({\n          script: textyng,\n          likedByMap: this.generateLikedMap(textyng.getOnlyLikedMsgsAsNodes())\n        })\n      })\n    }\n  }\n\n  generateLikedMap(likedMessages){\n    let map = new Map();\n\n    for (let obj of likedMessages) {\n      let key = `${obj.msgLikedId}${obj.msgLikedSenderId}`;\n      map.set(key, true);\n    }\n\n    return map\n  }\n\n  getScriptName = (name) => {\n    this.state.script.UpdateScriptName(name[1])\n  }\n\n  getAllCast = (cast) => {\n    this.state.script.updateCast(cast)\n  }\n\n  getSelectedCast = (cast) => {\n    this.setState({selectedCastId: cast.id}, () => {\n      this.setState({allMessages: this.state.script.getOnlyTextMsgsAsNodes()})\n    })\n  }\n\n  getSelectedMsgType = (value) => {\n    this.setState({ textMsg: value}, () => {\n      this.addNewMessage()\n    });\n  }\n\n  alreadyBeenLikedByselectedCastId = (messageId) => {\n    let likedMsgID = `${messageId}${this.state.selectedCastId}`\n\n    if(this.state.likedByMap.has(likedMsgID)){\n      return this.state.likedByMap.get(likedMsgID)\n    }\n    return false\n  }\n\n  deleteLikedMessage(messageId, whoLikedMsg){\n    this.setState({\n      likedByMap: this.state.likedByMap.set(`${messageId}${whoLikedMsg}`, false)\n    })\n\n    let allMessages = this.state.script.getOnlyLikedMsgsAsNodes()\n    const result = allMessages.find(obj => obj.idOfMsgLiked === messageId && obj.whoLikedMsg === whoLikedMsg);\n\n    if(result.id){\n      this.deleteMessage(result.id)\n    }\n  }\n\n  addNewLikeMsg = (messageId, senderId) => {\n    if(!this.alreadyBeenLikedByselectedCastId(messageId)){\n\n      var milliseconds = Math.floor(Date.now() / 1000)\n\n      let tslmsg = this.state.timeSinceLastMsg\n      if(tslmsg == \"\" || tslmsg == 0){\n        tslmsg = this.state.spslm\n      }\n      let msgData = {\n        id: milliseconds,\n        timeStamp: milliseconds,\n        msgType: \"like\",\n        whoSentLikedMsg: senderId,\n        idOfMsgLiked: messageId,\n        whoLikedMsg: this.state.selectedCastId,\n        tslmsg: tslmsg,\n      }\n      this.state.script.addNewMessage(msgData)\n\n      let updatedLikedByMap = new Map(this.state.likedByMap);\n      updatedLikedByMap.set(`${messageId}${this.state.selectedCastId}`, true);\n\n      this.setState({\n        likedByMap: updatedLikedByMap,\n        allMessages: this.state.script.getOnlyTextMsgsAsNodes(),\n        spslm: 0,\n      })\n    }else{\n      this.deleteLikedMessage(messageId, this.state.selectedCastId)\n    }\n  }\n\n  addNewMessage = () => {\n    var milliseconds = Math.floor(Date.now() / 1000)\n\n    let tslmsg = this.state.timeSinceLastMsg\n    if(tslmsg == \"\" || tslmsg == 0){\n      tslmsg = this.state.spslm\n    }\n\n    let msgData = {\n      id: milliseconds,\n      timeStamp: milliseconds,\n      content: this.state.textMsg,\n      senderId: this.state.selectedCastId,\n      tslmsg: tslmsg,\n      msgType: \"textMsg\",\n    }\n\n    this.state.script.addNewMessage(msgData)\n    this.setState({\n      allMessages: this.state.script.getOnlyTextMsgsAsNodes(),\n      textMsg: \"\",\n      spslm: 0,\n    })\n  }\n\n  addNewMsgComment = (comment, idOfMsgCommented, whoSentCommentedMsg) => {\n    var milliseconds = Math.floor(Date.now() / 1000)\n\n    let tslmsg = this.state.timeSinceLastMsg\n    if(tslmsg == \"\" || tslmsg == 0){\n      tslmsg = this.state.spslm\n    }\n\n    let msgData = {\n      id: milliseconds,\n      timeStamp: milliseconds,\n      msgType: \"comment\",\n      content: comment,\n      whoSentCommentedMsg: whoSentCommentedMsg,\n      idOfMsgCommented: idOfMsgCommented,\n      whoCommentedMsg: this.state.selectedCastId,\n      tslmsg: tslmsg,\n    }\n\n    this.state.script.addNewMessage(msgData)\n    this.setState({\n      allMessages: this.state.script.getOnlyTextMsgsAsNodes(),\n      textMsg: \"\",\n      spslm: 0,\n    })\n  }\n\n  addNewImgMsg = (imgType, imgURL) => {\n    var milliseconds = Math.floor(Date.now() / 1000)\n\n    let tslmsg = this.state.timeSinceLastMsg\n    if(tslmsg == \"\" || tslmsg == 0){\n      tslmsg = this.state.spslm\n    }\n\n    let msgData = {\n      id: milliseconds,\n      timeStamp: milliseconds,\n      content: imgType,\n      senderId: this.state.selectedCastId,\n      tslmsg: tslmsg,\n      isImg: true,\n      msgType: \"textMsg\",\n      url: imgURL,\n    }\n\n    console.log(\"msgData\", msgData)\n\n    this.state.script.addNewMessage(msgData)\n    this.setState({\n      allMessages: this.state.script.getOnlyTextMsgsAsNodes(),\n      textMsg: \"\",\n      spslm: 0,\n    })\n  }\n\n  componentDidUpdate(){\n    this.state.script.updateScriptFirebase()\n  }\n\n  getInputTime = (timeInSeconds) => {\n    this.setState({\n      timeSinceLastMsg: timeInSeconds,\n    })\n  }\n\n  deleteMessage = (id) => {\n    this.state.script.deleteMessage(id)\n    this.setState({allMessages: this.state.script.getOnlyTextMsgsAsNodes()},\n    () => {\n        this.state.script.updateScriptFirebase()\n    });\n  }\n\n  onSaveComment = (message, idOfMsgCommented, whoSentCommentedMsg) => {\n    this.addNewMsgComment(message, idOfMsgCommented, whoSentCommentedMsg)\n    console.log(\"message\", message)\n  }\n\n  getScreenShotURL = (url) => {\n    console.log(\"url\", url)\n    this.addNewImgMsg(\"ScreenShot\", url)\n  }\n\n  getInsertedImg = (url) => {\n    console.log(\"url\", url)\n    this.addNewImgMsg(\"InsertImage\", url)\n  }\n\n  getCommentByCastIdMsgId = (castId, msgId) => {\n    let allComments = this.state.script.getOnlyCommentsAsNodes()\n\n    const result = allComments.find(obj => obj.castId === castId && obj.msgId === msgId);\n\n    if(result){\n      return result.content\n    }\n    return ''\n  }\n\n  render() {\n    if(this.state.script){\n        return (\n            <div className=\"EditScript\">\n                <div className=\"EditScript-container l-container\">\n                    <div className=\"EditScript-title\">\n                      <EditableField\n                        name={this.state.script.getScriptName()}\n                        getScriptName={this.getScriptName}\n                      />\n                    </div>\n                    <div className=\"EditScript-cast\">\n                      <CastMembers\n                        cast = {this.state.script.getAllCast()}\n                        selectedCast={this.getSelectedCast}\n                        getAllCast={this.getAllCast}\n                      />\n                    </div>\n                    <div className=\"EditScript-textView\">\n                      <MsgTypes\n                        getScreenShotURL = {this.getScreenShotURL}\n                        getInsertedImg = {this.getInsertedImg}\n                        selectedMsgType={this.getSelectedMsgType}\n                      />\n                      <div id=\"EditScript-chatArea-id\" className=\"EditScript-chatArea\">\n                        {this.state.allMessages.length == 0 &&\n                          <span className=\"EditScript-castMemberPrompt\">click on a cast member to see messages</span>\n                        }\n                        {this.state.allMessages.map((value, index) => (\n                          <DynamicClassAssignment key={index} isActive={value.senderId == this.state.selectedCastId} value={value} index={index} >\n                            {value.isImg &&\n                              <img\n                                className=\"EditScript-imgMsg\"\n                                src={value.url}\n                              />\n                            }\n                            <div>\n                              <span>{value.content}</span>\n                              <span className=\"EditScript-senderName\">{this.state.script.getSenderNameFromID(value.senderId)}</span>\n                            </div>\n                            <div className=\"EditScript-chatArea-msg-buttons\">\n                              <button className=\"EditScript-chatArea-msg-button\" onClick={() => this.deleteMessage(value.id)}>Delete</button>\n                              <button className=\"EditScript-chatArea-msg-button\" onClick={() => this.addNewLikeMsg(value.id, value.senderId)}>{this.alreadyBeenLikedByselectedCastId(value.id) ? \"Unlike\" : \"Like\"}</button>\n                              <CommentedPopup\n                                className=\"EditScript-chatArea-msg-button\"\n                                idOfMsgCommented={value.id}\n                                whoSentCommentedMsg={value.senderId}\n                                onSave={this.onSaveComment}\n                                alreadySavedValue={this.getCommentByCastIdMsgId(this.state.selectedCastId, value.id)}\n                              />\n                            </div>\n                          </DynamicClassAssignment>\n                        ))}\n                      </div>\n\n                      <div className=\"EditScript-sendMessage\">\n                        <TextField\n                          variant=\"outlined\"\n                          className=\"EditScript-sendMessage--input\"\n                          value={this.state.textMsg}\n                          placeholder=\"Type message here\"\n                          onChange={e => {\n                            this.setState({ textMsg: e.target.value });\n                          }}\n                        />\n                        <TimeInput inputTime={this.getInputTime} />\n                      </div>\n\n                      <div className=\"EditScript-saveSubmit\">\n                        <div>\n                            <Button\n                                className=\"EditScript-saveSubmit--save\"\n                                variant=\"outlined\"\n                                color=\"primary\"\n                                onClick={() => this.state.script.updateScriptFirebase()}\n                            >\n                                save\n                            </Button>\n                        </div>\n                        <div>\n                          <Button\n                            className=\"EditScript-saveSubmit--send\"\n                            variant=\"outlined\"\n                            color=\"primary\"\n                            onClick={() => this.addNewMessage()}\n                          >\n                            Send\n                          </Button>\n                        </div>\n                      </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }else{\n        return (\n            <div>script loading...</div>\n        )\n    }\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {};\n};\n\nlet EditScript = withRouter(connect(mapStateToProps)(ConnectedEditScript));\nexport default withRouter(EditScript);\n\n\nconst DynamicClassAssignment = (props) =>{\n\n    if(props.isActive){\n        return (\n            <div className={\"EditScript-chatArea-msg active\"}>\n                {props.children}\n            </div>\n        );\n    }else{\n        return (\n            <div className={\"EditScript-chatArea-msg\"}>\n                {props.children}\n            </div>\n        );\n    }\n  }"],"mappings":"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"},"metadata":{},"sourceType":"module"}