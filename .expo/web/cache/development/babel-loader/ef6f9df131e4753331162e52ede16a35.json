{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"/Users/jdavid/Documents/textyng/src/components/ReaderView/ReaderView.js\";\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nimport React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { withRouter } from \"react-router-dom\";\nimport Script from \"../Script/Script.js\";\nimport { Emoji } from 'emoji-mart';\nimport \"./ReaderView.css\";\nimport emoji from \"emoji-mart/dist-es/components/emoji/emoji.js\";\nvar emojis = [{\n  name: \"exploding_head\",\n  set: \"twitter\",\n  size: 24,\n  className: \"ReaderView-reactionEmoji\"\n}, {\n  name: \"relaxed\",\n  set: \"twitter\",\n  size: 24,\n  className: \"ReaderView-reactionEmoji\"\n}, {\n  name: \"astonished\",\n  set: \"twitter\",\n  size: 24,\n  className: \"ReaderView-reactionEmoji\"\n}, {\n  name: \"pensive\",\n  set: \"twitter\",\n  size: 24,\n  className: \"ReaderView-reactionEmoji\"\n}, {\n  name: \"angry\",\n  set: \"twitter\",\n  size: 24,\n  className: \"ReaderView-reactionEmoji\"\n}, {\n  name: \"scream\",\n  set: \"twitter\",\n  size: 24,\n  className: \"ReaderView-reactionEmoji\"\n}, {\n  name: \"kissing_heart\",\n  set: \"twitter\",\n  size: 24,\n  className: \"ReaderView-reactionEmoji\"\n}, {\n  name: \"rolling_on_the_floor_laughing\",\n  set: \"twitter\",\n  size: 24,\n  className: \"ReaderView-reactionEmoji\"\n}];\nvar ConnectedReaderView = function (_Component) {\n  _inherits(ConnectedReaderView, _Component);\n  var _super = _createSuper(ConnectedReaderView);\n  function ConnectedReaderView(props) {\n    var _this;\n    _classCallCheck(this, ConnectedReaderView);\n    _this = _super.call(this, props);\n    _this.getScriptName = function (name) {\n      return name[1];\n    };\n    _this.selectThisScene = function (sceneId) {\n      _this.setState({\n        selectedSceneId: sceneId,\n        allMessages: _this.state.script.getAllMessagesAsNodes()\n      });\n    };\n    _this.reactionClicked = function (emojiName, messageId, event) {\n      event.currentTarget.classList.add('shake');\n      _this.state.script.updateReaderReaction(emojiName, messageId);\n    };\n    _this.getReaderReactionFromMsg = function () {\n      var reactionArray = [];\n      _this.state.allMessages.forEach(function (message) {\n        if (_this.state.script.getReaderReactionMap().has(message.id.toString())) {\n          reactionArray.push(_this.state.script.getReaderReactionMap().get(message.id.toString()));\n        }\n      });\n      if (_this.readerReactionRef.current) {\n        _this.readerReactionRef.current.style.width = reactionArray.length * 40 + \"px\";\n      }\n      var readerEmojiReactions = reactionArray.map(function (emoji, index) {\n        return React.createElement(Emoji, {\n          emoji: emoji,\n          set: emoji.set,\n          size: emoji.size,\n          key: index,\n          className: \"ReaderView-reactionEmoji\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 102,\n            columnNumber: 7\n          }\n        });\n      });\n      return readerEmojiReactions;\n    };\n    _this.readerReactionRef = React.createRef();\n    _this.state = {\n      script: null,\n      allMessages: [],\n      currentNodeIndex: 0,\n      selectedSceneId: 1\n    };\n    return _this;\n  }\n  _createClass(ConnectedReaderView, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n      var scriptId = window.location.pathname.replaceAll(\"/readerview/\", \"\");\n      if (scriptId != \"\") {\n        var textyng = new Script(scriptId);\n        textyng.grabScriptFromFirebase(scriptId).then(function () {\n          _this2.setState({\n            script: textyng,\n            allMessages: textyng.getAllMessagesAsNodes().slice(0, 1),\n            currentNodeIndex: 1\n          });\n        });\n      }\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevState) {\n      var _this3 = this;\n      if (prevState.currentNodeIndex != this.state.currentNodeIndex && this.state.script.getAllMessagesAsNodes().length > this.state.currentNodeIndex) {\n        setTimeout(function () {\n          var nextCurNodeIndex = _this3.state.currentNodeIndex + 1;\n          var sceneId = _this3.state.script.getNthMessageNode(nextCurNodeIndex).sceneId;\n          if (sceneId == undefined) {\n            sceneId = _this3.state.script.getTotalNumScenes();\n          }\n          _this3.setState({\n            currentNodeIndex: nextCurNodeIndex,\n            allMessages: _this3.state.script.getAllMessagesAsNodes().slice(0, nextCurNodeIndex),\n            selectedSceneId: sceneId\n          });\n        }, this.state.script.getNthMessageNode(this.state.currentNodeIndex).tslmsg * 100);\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this4 = this;\n      if (this.state.allMessages && this.state.allMessages.length > 0) {\n        return React.createElement(\"div\", {\n          className: \"ReaderView\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 117,\n            columnNumber: 9\n          }\n        }, React.createElement(\"div\", {\n          className: \"ReaderView-container l-container\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 118,\n            columnNumber: 11\n          }\n        }, React.createElement(\"div\", {\n          className: \"ReaderView-title\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 119,\n            columnNumber: 13\n          }\n        }, this.state.script.getScriptName()), React.createElement(\"div\", {\n          className: \"ReaderView-scenes\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 122,\n            columnNumber: 13\n          }\n        }, this.state.script.getScenes().map(function (scene, index) {\n          return scene.id == _this4.state.selectedSceneId ? React.createElement(\"div\", {\n            key: index,\n            onClick: function onClick() {\n              return _this4.selectThisScene(scene.id);\n            },\n            className: \"ReaderView-scene ReaderView-scene--currentScene\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 126,\n              columnNumber: 19\n            }\n          }, scene.name) : React.createElement(\"div\", {\n            key: index,\n            onClick: function onClick() {\n              return _this4.selectThisScene(scene.id);\n            },\n            className: \"ReaderView-scene\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 130,\n              columnNumber: 19\n            }\n          }, scene.name);\n        })), React.createElement(\"div\", {\n          className: \"ReaderView-textView\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 136,\n            columnNumber: 13\n          }\n        }, React.createElement(\"div\", {\n          id: \"ReaderView-chatArea-id\",\n          className: \"ReaderView-chatArea\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 137,\n            columnNumber: 15\n          }\n        }, this.state.allMessages.map(function (message, index) {\n          return message.sceneId == _this4.state.selectedSceneId && React.createElement(\"div\", {\n            key: index,\n            className: \"ReaderView-chatArea-msg\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 142,\n              columnNumber: 19\n            }\n          }, message.isImg && React.createElement(\"img\", {\n            className: \"ReaderView-imgMsg\",\n            src: message.url,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 144,\n              columnNumber: 23\n            }\n          }), message.isAudio && React.createElement(\"audio\", {\n            className: \"ReaderView-audioMsg\",\n            src: message.url,\n            controls: true,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 150,\n              columnNumber: 23\n            }\n          }), message.isVideo && React.createElement(\"video\", {\n            className: \"ReaderView-videoMsg\",\n            src: message.url,\n            controls: true,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 157,\n              columnNumber: 23\n            }\n          }), React.createElement(\"div\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 163,\n              columnNumber: 21\n            }\n          }, React.createElement(\"span\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 164,\n              columnNumber: 23\n            }\n          }, message.content), React.createElement(\"span\", {\n            className: \"ReaderView-senderName\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 165,\n              columnNumber: 23\n            }\n          }, _this4.state.script.getSenderNameFromID(message.senderId)), React.createElement(\"div\", {\n            className: \"ReaderView-reactionEmojis\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 167,\n              columnNumber: 23\n            }\n          }, emojis.map(function (emoji, index) {\n            return React.createElement(\"div\", {\n              key: index,\n              className: \"ReaderView-reactionEmoji\",\n              onClick: function onClick(e) {\n                return _this4.reactionClicked(emoji.name, message.id, e);\n              },\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 169,\n                columnNumber: 27\n              }\n            }, React.createElement(Emoji, {\n              emoji: emoji.name,\n              set: emoji.set,\n              size: emoji.size,\n              key: emoji.name,\n              className: \"ReaderView-reactionEmoji\",\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 174,\n                columnNumber: 29\n              }\n            }));\n          }))));\n        }))), React.createElement(\"div\", {\n          className: \"ReaderView-readerReaction\",\n          ref: this.readerReactionRef,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 189,\n            columnNumber: 13\n          }\n        }, this.getReaderReactionFromMsg())));\n      } else {\n        return React.createElement(\"div\", {\n          className: \"ReaderView\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 197,\n            columnNumber: 9\n          }\n        }, \"loading scriptsss\");\n      }\n    }\n  }]);\n  return ConnectedReaderView;\n}(Component);\nvar mapStateToProps = function mapStateToProps(state) {\n  return {};\n};\nvar ReaderView = withRouter(connect(mapStateToProps)(ConnectedReaderView));\nexport default withRouter(ReaderView);","map":{"version":3,"names":["React","Component","connect","withRouter","Script","Emoji","emoji","emojis","name","set","size","className","ConnectedReaderView","props","getScriptName","selectThisScene","sceneId","setState","selectedSceneId","allMessages","state","script","getAllMessagesAsNodes","reactionClicked","emojiName","messageId","event","currentTarget","classList","add","updateReaderReaction","getReaderReactionFromMsg","reactionArray","forEach","message","getReaderReactionMap","has","id","toString","push","get","readerReactionRef","current","style","width","length","readerEmojiReactions","map","index","createRef","currentNodeIndex","scriptId","window","location","pathname","replaceAll","textyng","grabScriptFromFirebase","then","slice","prevState","setTimeout","nextCurNodeIndex","getNthMessageNode","undefined","getTotalNumScenes","tslmsg","getScenes","scene","isImg","url","isAudio","isVideo","content","getSenderNameFromID","senderId","e","mapStateToProps","ReaderView"],"sources":["/Users/jdavid/Documents/textyng/src/components/ReaderView/ReaderView.js"],"sourcesContent":["import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { withRouter } from \"react-router-dom\";\nimport Script from \"../Script/Script.js\";\nimport { Emoji } from 'emoji-mart'\n\nimport \"./ReaderView.css\";\nimport emoji from \"emoji-mart/dist-es/components/emoji/emoji.js\";\n\nconst emojis = [\n  {name: \"exploding_head\", set: \"twitter\", size: 24, className: \"ReaderView-reactionEmoji\"},\n  {name: \"relaxed\", set: \"twitter\", size: 24, className: \"ReaderView-reactionEmoji\"},\n  {name: \"astonished\", set: \"twitter\", size: 24, className: \"ReaderView-reactionEmoji\"},\n  {name: \"pensive\", set: \"twitter\", size: 24, className: \"ReaderView-reactionEmoji\"},\n  {name: \"angry\", set: \"twitter\", size: 24, className: \"ReaderView-reactionEmoji\"},\n  {name: \"scream\", set: \"twitter\", size: 24, className: \"ReaderView-reactionEmoji\"},\n  {name: \"kissing_heart\", set: \"twitter\", size: 24, className: \"ReaderView-reactionEmoji\"},\n  {name: \"rolling_on_the_floor_laughing\", set: \"twitter\", size: 24, className: \"ReaderView-reactionEmoji\"},\n]\n\nclass ConnectedReaderView extends Component {\n  constructor(props) {\n    super(props);\n\n    this.readerReactionRef = React.createRef();\n\n    this.state = {\n\t\t\tscript: null,\n      allMessages: [],\n      currentNodeIndex: 0,\n      selectedSceneId: 1,\n    };\n  }\n\n  componentDidMount() {\n    let scriptId = window.location.pathname.replaceAll(\"/readerview/\", \"\")\n\n      if(scriptId != \"\"){\n        var textyng = new Script(scriptId);\n        textyng.grabScriptFromFirebase(scriptId)\n        .then(() => {\n          this.setState({\n            script: textyng,\n            allMessages: textyng.getAllMessagesAsNodes().slice(0,1),\n            currentNodeIndex: 1,\n          })\n        })\n      }\n    }\n\n  componentDidUpdate(prevState) {\n    if(prevState.currentNodeIndex != this.state.currentNodeIndex && \n        this.state.script.getAllMessagesAsNodes().length > this.state.currentNodeIndex)\n    {\n      setTimeout(()=>{\n        let nextCurNodeIndex = this.state.currentNodeIndex + 1\n\n        let sceneId = this.state.script.getNthMessageNode(nextCurNodeIndex).sceneId\n        if(sceneId == undefined){\n          sceneId = this.state.script.getTotalNumScenes()\n        }\n\n        this.setState({\n          currentNodeIndex: nextCurNodeIndex,\n          allMessages: this.state.script.getAllMessagesAsNodes().slice(0, nextCurNodeIndex),\n          selectedSceneId: sceneId\n        })\n      },\n      this.state.script.getNthMessageNode(this.state.currentNodeIndex).tslmsg * 100)\n    }\n  }\n\n  getScriptName = (name) => {\n    return name[1]\n  }\n\n  selectThisScene = (sceneId) => {\n    this.setState({\n      selectedSceneId: sceneId,\n      allMessages: this.state.script.getAllMessagesAsNodes(),\n    })\n  }\n\n  reactionClicked = (emojiName, messageId, event) => {\n    event.currentTarget.classList.add('shake');\n    this.state.script.updateReaderReaction(emojiName, messageId)\n  }\n\n  getReaderReactionFromMsg = () => {\n    let reactionArray = [];\n    this.state.allMessages.forEach(message => {\n      if(this.state.script.getReaderReactionMap().has(message.id.toString())) {\n        reactionArray.push(this.state.script.getReaderReactionMap().get(message.id.toString()));\n      }\n    });\n\n    if(this.readerReactionRef.current){\n      this.readerReactionRef.current.style.width = `${reactionArray.length * 40}px`;\n    }\n\n    let readerEmojiReactions = reactionArray.map((emoji, index) => (\n      <Emoji\n        emoji={emoji}\n        set={emoji.set}\n        size={emoji.size}\n        key={index}\n        className=\"ReaderView-reactionEmoji\"\n      />\n    ));\n\n    return readerEmojiReactions\n  }\n\n  render() {\n\t\tif(this.state.allMessages && this.state.allMessages.length > 0){\n\t\t\treturn (\n        <div className=\"ReaderView\">\n          <div className=\"ReaderView-container l-container\">\n            <div className=\"ReaderView-title\">\n              {this.state.script.getScriptName()}\n            </div>\n            <div className=\"ReaderView-scenes\">\n              {this.state.script.getScenes()\n              .map((scene, index) =>\n                scene.id == this.state.selectedSceneId ? (\n                  <div key={index} onClick={() => this.selectThisScene(scene.id)} className=\"ReaderView-scene ReaderView-scene--currentScene\">\n                    {scene.name}\n                  </div>\n                ) : (\n                  <div key={index} onClick={() => this.selectThisScene(scene.id)} className=\"ReaderView-scene\">\n                    {scene.name}\n                  </div>\n                )\n              )}\n            </div>\n            <div className=\"ReaderView-textView\">\n              <div id=\"ReaderView-chatArea-id\" className=\"ReaderView-chatArea\">\n                {this.state.allMessages\n                .map((message, index) => (\n                  (message.sceneId == this.state.selectedSceneId)\n                  &&\n                  <div key={index} className=\"ReaderView-chatArea-msg\">\n                    {message.isImg &&\n                      <img\n                        className=\"ReaderView-imgMsg\"\n                        src={message.url}\n                      />\n                    }\n                    {message.isAudio &&\n                      <audio\n                        className=\"ReaderView-audioMsg\"\n                        src={message.url}\n                        controls\n                      />\n                    }\n                    {message.isVideo &&\n                      <video\n                        className=\"ReaderView-videoMsg\"\n                        src={message.url}\n                        controls\n                      />\n                    }\n                    <div>\n                      <span>{message.content}</span>\n                      <span className=\"ReaderView-senderName\">{this.state.script.getSenderNameFromID(message.senderId)}</span>\n                      \n                      <div className=\"ReaderView-reactionEmojis\">\n                        {emojis.map((emoji, index)=> \n                          <div\n                            key={index}\n                            className=\"ReaderView-reactionEmoji\"\n                            onClick={(e) => this.reactionClicked(emoji.name, message.id, e)}\n                          >\n                            <Emoji \n                              emoji={emoji.name}\n                              set={emoji.set} \n                              size={emoji.size} \n                              key={emoji.name} \n                              className=\"ReaderView-reactionEmoji\"\n                            />\n                          </div>\n                        )}\n                      </div>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </div>\n            <div className=\"ReaderView-readerReaction\" ref={this.readerReactionRef}>\n              {this.getReaderReactionFromMsg()}                         \n            </div>\n          </div>\n        </div>\n    \t);\n\t\t}else{\n\t\t\treturn (\n        <div className=\"ReaderView\">\n\t\t\t\t\tloading scriptsss\n        </div>\n    \t);\n\t\t}\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {};\n};\n\nlet ReaderView = withRouter(connect(mapStateToProps)(ConnectedReaderView));\nexport default withRouter(ReaderView);\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}