{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"/Users/jdavid/Documents/textyng/src/components/EditScript/EditScript.js\";\nfunction _createForOfIteratorHelperLoose(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[typeof Symbol === \"function\" ? Symbol.iterator : \"@@iterator\"] || o[\"@@iterator\"]; if (it) return (it = it.call(o)).next.bind(it); if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nimport React, { Component } from \"react\";\nimport TextField from \"@material-ui/core/TextField\";\nimport { connect } from \"react-redux\";\nimport { withRouter } from \"react-router-dom\";\nimport Script from \"../Script/Script.js\";\nimport EditableField from \"../EditableField/EditableField\";\nimport CastMembers from \"../CastMembers/CastMembers\";\nimport Scenes from \"../Scenes/Scenes\";\nimport MsgTypes from \"../MsgTypes/MsgTypes\";\nimport Button from \"@material-ui/core/Button\";\nimport TimeInput from \"../TimeInput/TimeInput.js\";\nimport CommentedPopup from \"../CommentedPopup/CommentedPopup.js\";\nimport html2canvas from 'html2canvas';\nimport Firebase from \"../../firebase/firebase\";\nimport \"./EditScript.css\";\nimport { nil } from \"ajv\";\nvar ConnectedEditScript = function (_Component) {\n  _inherits(ConnectedEditScript, _Component);\n  var _super = _createSuper(ConnectedEditScript);\n  function ConnectedEditScript(props) {\n    var _this;\n    _classCallCheck(this, ConnectedEditScript);\n    _this = _super.call(this, props);\n    _this.getScriptName = function (name) {\n      _this.state.script.UpdateScriptName(name[1]);\n    };\n    _this.getAllCast = function (cast) {\n      _this.state.script.updateCast(cast);\n    };\n    _this.getAllScenes = function (scene) {\n      _this.state.script.updateScene(scene);\n    };\n    _this.getSelectedCast = function (cast) {\n      _this.setState({\n        selectedCastId: cast.id\n      }, function () {\n        _this.setState({\n          allMessages: _this.state.script.getOnlyTextMsgsAsNodes()\n        });\n      });\n    };\n    _this.getSelectedScene = function (scene) {\n      _this.setState({\n        selectedSceneId: scene.id\n      }, function () {\n        _this.setState({\n          allMessages: _this.state.script.getOnlyTextMsgsAsNodes()\n        });\n      });\n    };\n    _this.getSelectedMsgType = function (value) {\n      _this.setState({\n        textMsg: value\n      }, function () {\n        _this.addNewMessage();\n      });\n    };\n    _this.alreadyBeenLikedByselectedCastId = function (messageId) {\n      var likedMsgID = \"\" + messageId + _this.state.selectedCastId;\n      if (_this.state.likedByMap.has(likedMsgID)) {\n        return _this.state.likedByMap.get(likedMsgID);\n      }\n      return false;\n    };\n    _this.addNewLikeMsg = function (messageId, senderId) {\n      if (!_this.alreadyBeenLikedByselectedCastId(messageId)) {\n        var milliseconds = Math.floor(Date.now() / 1000);\n        var tslmsg = _this.state.timeSinceLastMsg;\n        if (tslmsg == \"\" || tslmsg == 0) {\n          tslmsg = _this.state.spslm;\n        }\n        var msgData = {\n          id: milliseconds,\n          timeStamp: milliseconds,\n          msgType: \"like\",\n          whoSentLikedMsg: senderId,\n          idOfMsgLiked: messageId,\n          whoLikedMsg: _this.state.selectedCastId,\n          tslmsg: tslmsg\n        };\n        _this.state.script.addNewMessage(msgData);\n        var updatedLikedByMap = new Map(_this.state.likedByMap);\n        updatedLikedByMap.set(\"\" + messageId + _this.state.selectedCastId, true);\n        _this.setState({\n          likedByMap: updatedLikedByMap,\n          allMessages: _this.state.script.getOnlyTextMsgsAsNodes(),\n          spslm: 0\n        });\n      } else {\n        _this.deleteLikedMessage(messageId, _this.state.selectedCastId);\n      }\n    };\n    _this.addNewMessage = function () {\n      var milliseconds = Math.floor(Date.now() / 1000);\n      var tslmsg = _this.state.timeSinceLastMsg;\n      if (tslmsg == \"\" || tslmsg == 0) {\n        tslmsg = _this.state.spslm;\n      }\n      var msgData = {\n        id: milliseconds,\n        timeStamp: milliseconds,\n        content: _this.state.textMsg,\n        senderId: _this.state.selectedCastId,\n        tslmsg: tslmsg,\n        msgType: \"textMsg\"\n      };\n      _this.state.script.addNewMessage(msgData);\n      _this.setState({\n        allMessages: _this.state.script.getOnlyTextMsgsAsNodes(),\n        textMsg: \"\",\n        spslm: 0\n      });\n    };\n    _this.addNewMsgComment = function (comment, idOfMsgCommented, whoSentCommentedMsg) {\n      var milliseconds = Math.floor(Date.now() / 1000);\n      var tslmsg = _this.state.timeSinceLastMsg;\n      if (tslmsg == \"\" || tslmsg == 0) {\n        tslmsg = _this.state.spslm;\n      }\n      var msgData = {\n        id: milliseconds,\n        timeStamp: milliseconds,\n        msgType: \"comment\",\n        content: comment,\n        whoSentCommentedMsg: whoSentCommentedMsg,\n        idOfMsgCommented: idOfMsgCommented,\n        whoCommentedMsg: _this.state.selectedCastId,\n        tslmsg: tslmsg\n      };\n      _this.state.script.addNewMessage(msgData);\n      _this.setState({\n        allMessages: _this.state.script.getOnlyTextMsgsAsNodes(),\n        textMsg: \"\",\n        spslm: 0\n      });\n    };\n    _this.addNewMediaMsg = function (mediaType, mediaURL, isImg, isAudio) {\n      var milliseconds = Math.floor(Date.now() / 1000);\n      var tslmsg = _this.state.timeSinceLastMsg;\n      if (tslmsg == \"\" || tslmsg == 0) {\n        tslmsg = _this.state.spslm;\n      }\n      var msgData = {\n        id: milliseconds,\n        timeStamp: milliseconds,\n        content: mediaType,\n        senderId: _this.state.selectedCastId,\n        tslmsg: tslmsg,\n        isImg: isImg,\n        isAudio: isAudio,\n        msgType: \"textMsg\",\n        url: mediaURL\n      };\n      _this.state.script.addNewMessage(msgData);\n      _this.setState({\n        allMessages: _this.state.script.getOnlyTextMsgsAsNodes(),\n        textMsg: \"\",\n        spslm: 0\n      });\n    };\n    _this.getInputTime = function (timeInSeconds) {\n      _this.setState({\n        timeSinceLastMsg: timeInSeconds\n      });\n    };\n    _this.deleteMessage = function (id) {\n      _this.state.script.deleteMessage(id);\n      _this.setState({\n        allMessages: _this.state.script.getOnlyTextMsgsAsNodes()\n      }, function () {\n        _this.state.script.updateScriptFirebase();\n      });\n    };\n    _this.onSaveComment = function (message, idOfMsgCommented, whoSentCommentedMsg) {\n      var existingCommentNode = _this.state.script.getCommentNodeByCastIdMsgId(_this.state.selectedCastId, idOfMsgCommented);\n      if (existingCommentNode != nil) {\n        _this.state.script.editNodeContent(existingCommentNode.id, message);\n      } else {\n        _this.addNewMsgComment(message, idOfMsgCommented, whoSentCommentedMsg);\n      }\n    };\n    _this.grabScreenshot = function (url) {\n      var element = document.getElementById('EditScript-chatArea-id');\n      html2canvas(element).then(function (canvas) {\n        var imageData = canvas.toDataURL();\n        var milliseconds = Math.floor(Date.now() / 1000);\n        var storageRef = Firebase.storage().ref(\"ScreenShot/\" + milliseconds);\n        storageRef.putString(imageData, 'data_url').then(function (snapshot) {\n          snapshot.ref.getDownloadURL().then(function (downloadURL) {\n            console.log(\"Image URL: \" + downloadURL);\n            _this.addNewMediaMsg(\"ScreenShot\", downloadURL, true, false);\n          });\n        });\n      });\n    };\n    _this.getInsertedImg = function (url) {\n      console.log(\"url\", url);\n      _this.addNewMediaMsg(\"InsertImage\", url, true, false);\n    };\n    _this.getVNURL = function (url) {\n      console.log(\"url\", url);\n      _this.addNewMediaMsg(\"VoiceNote\", url, false, true);\n    };\n    _this.state = {\n      rimis: [],\n      rimisIds: [],\n      filteredRimis: [],\n      rimiToShow: null,\n      animateGreeting: \"EditScript-animategreeting\",\n      orderId: \"\",\n      script: null,\n      selectedCastId: 1,\n      selectedMsgType: \"\",\n      timeSinceLastMsg: \"\",\n      textMsg: \"\",\n      allMessages: [],\n      spslm: 0,\n      likedByMap: new Map()\n    };\n    return _this;\n  }\n  _createClass(ConnectedEditScript, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n      var scriptId = window.location.pathname.replaceAll(\"/editscript/\", \"\");\n      if (scriptId != \"\") {\n        var textyng = new Script(scriptId);\n        textyng.grabScriptFromFirebase(scriptId).then(function () {\n          _this2.setState({\n            script: textyng,\n            likedByMap: _this2.generateLikedMap(textyng.getOnlyLikedMsgsAsNodes())\n          });\n        });\n      }\n    }\n  }, {\n    key: \"generateLikedMap\",\n    value: function generateLikedMap(likedMessages) {\n      var map = new Map();\n      for (var _iterator = _createForOfIteratorHelperLoose(likedMessages), _step; !(_step = _iterator()).done;) {\n        var obj = _step.value;\n        var key = \"\" + obj.msgLikedId + obj.msgLikedSenderId;\n        map.set(key, true);\n      }\n      return map;\n    }\n  }, {\n    key: \"deleteLikedMessage\",\n    value: function deleteLikedMessage(messageId, whoLikedMsg) {\n      this.setState({\n        likedByMap: this.state.likedByMap.set(\"\" + messageId + whoLikedMsg, false)\n      });\n      var allMessages = this.state.script.getOnlyLikedMsgsAsNodes();\n      var result = allMessages.find(function (obj) {\n        return obj.idOfMsgLiked === messageId && obj.whoLikedMsg === whoLikedMsg;\n      });\n      if (result.id) {\n        this.deleteMessage(result.id);\n      }\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      this.state.script.updateScriptFirebase();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n      if (this.state.script) {\n        return React.createElement(\"div\", {\n          className: \"EditScript\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 288,\n            columnNumber: 13\n          }\n        }, React.createElement(\"div\", {\n          className: \"EditScript-container l-container\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 289,\n            columnNumber: 17\n          }\n        }, React.createElement(\"div\", {\n          className: \"EditScript-title\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 290,\n            columnNumber: 21\n          }\n        }, React.createElement(EditableField, {\n          name: this.state.script.getScriptName(),\n          getScriptName: this.getScriptName,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 291,\n            columnNumber: 23\n          }\n        })), React.createElement(\"div\", {\n          className: \"EditScript-scenes\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 296,\n            columnNumber: 21\n          }\n        }, React.createElement(Scenes, {\n          scenes: this.state.script.getAllScenes(),\n          selectedScene: this.getSelectedScene,\n          getAllScenes: this.getAllScenes,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 297,\n            columnNumber: 23\n          }\n        })), React.createElement(\"div\", {\n          className: \"EditScript-cast\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 303,\n            columnNumber: 21\n          }\n        }, React.createElement(CastMembers, {\n          cast: this.state.script.getAllCast(),\n          selectedCast: this.getSelectedCast,\n          getAllCast: this.getAllCast,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 304,\n            columnNumber: 23\n          }\n        })), React.createElement(\"div\", {\n          className: \"EditScript-textView\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 310,\n            columnNumber: 21\n          }\n        }, React.createElement(MsgTypes, {\n          grabScreenshot: this.grabScreenshot,\n          getInsertedImg: this.getInsertedImg,\n          selectedMsgType: this.getSelectedMsgType,\n          getVNURL: this.getVNURL,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 311,\n            columnNumber: 23\n          }\n        }), React.createElement(\"div\", {\n          id: \"EditScript-chatArea-id\",\n          className: \"EditScript-chatArea\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 317,\n            columnNumber: 23\n          }\n        }, this.state.allMessages.length == 0 && React.createElement(\"span\", {\n          className: \"EditScript-castMemberPrompt\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 319,\n            columnNumber: 27\n          }\n        }, \"click on a cast member to see messages\"), this.state.allMessages.map(function (value, index) {\n          return React.createElement(DynamicClassAssignment, {\n            key: index,\n            isActive: value.senderId == _this3.state.selectedCastId,\n            value: value,\n            index: index,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 322,\n              columnNumber: 27\n            }\n          }, value.isImg && React.createElement(\"img\", {\n            className: \"EditScript-imgMsg\",\n            src: value.url,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 324,\n              columnNumber: 31\n            }\n          }), value.isAudio && React.createElement(\"audio\", {\n            className: \"EditScript-audioMsg\",\n            src: value.url,\n            controls: true,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 330,\n              columnNumber: 31\n            }\n          }), React.createElement(\"div\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 336,\n              columnNumber: 29\n            }\n          }, React.createElement(\"span\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 337,\n              columnNumber: 31\n            }\n          }, value.content), React.createElement(\"span\", {\n            className: \"EditScript-senderName\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 338,\n              columnNumber: 31\n            }\n          }, _this3.state.script.getSenderNameFromID(value.senderId))), React.createElement(\"div\", {\n            className: \"EditScript-chatArea-msg-buttons\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 340,\n              columnNumber: 29\n            }\n          }, React.createElement(\"button\", {\n            className: \"EditScript-chatArea-msg-button\",\n            onClick: function onClick() {\n              return _this3.deleteMessage(value.id);\n            },\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 341,\n              columnNumber: 31\n            }\n          }, \"Delete\"), React.createElement(\"button\", {\n            className: \"EditScript-chatArea-msg-button\",\n            onClick: function onClick() {\n              return _this3.addNewLikeMsg(value.id, value.senderId);\n            },\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 342,\n              columnNumber: 31\n            }\n          }, _this3.alreadyBeenLikedByselectedCastId(value.id) ? \"Unlike\" : \"Like\"), React.createElement(CommentedPopup, {\n            className: \"EditScript-chatArea-msg-button\",\n            idOfMsgCommented: value.id,\n            whoSentCommentedMsg: value.senderId,\n            onSave: _this3.onSaveComment,\n            alreadySavedValue: _this3.state.script.getCommentByCastIdMsgId(_this3.state.selectedCastId, value.id),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 343,\n              columnNumber: 31\n            }\n          })));\n        })), React.createElement(\"div\", {\n          className: \"EditScript-sendMessage\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 355,\n            columnNumber: 23\n          }\n        }, React.createElement(TextField, {\n          variant: \"outlined\",\n          className: \"EditScript-sendMessage--input\",\n          value: this.state.textMsg,\n          placeholder: \"Type message here\",\n          onChange: function onChange(e) {\n            _this3.setState({\n              textMsg: e.target.value\n            });\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 356,\n            columnNumber: 25\n          }\n        }), React.createElement(TimeInput, {\n          inputTime: this.getInputTime,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 365,\n            columnNumber: 25\n          }\n        })), React.createElement(\"div\", {\n          className: \"EditScript-saveSubmit\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 368,\n            columnNumber: 23\n          }\n        }, React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 369,\n            columnNumber: 25\n          }\n        }, React.createElement(Button, {\n          className: \"EditScript-saveSubmit--save\",\n          variant: \"outlined\",\n          color: \"primary\",\n          onClick: function onClick() {\n            return _this3.state.script.updateScriptFirebase();\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 370,\n            columnNumber: 27\n          }\n        }, \"save\")), React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 379,\n            columnNumber: 25\n          }\n        }, React.createElement(Button, {\n          className: \"EditScript-saveSubmit--send\",\n          variant: \"outlined\",\n          color: \"primary\",\n          onClick: function onClick() {\n            return _this3.addNewMessage();\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 380,\n            columnNumber: 27\n          }\n        }, \"Send\"))))));\n      } else {\n        return React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 396,\n            columnNumber: 13\n          }\n        }, \"script loading...\");\n      }\n    }\n  }]);\n  return ConnectedEditScript;\n}(Component);\nvar mapStateToProps = function mapStateToProps(state) {\n  return {};\n};\nvar EditScript = withRouter(connect(mapStateToProps)(ConnectedEditScript));\nexport default withRouter(EditScript);\nvar DynamicClassAssignment = function DynamicClassAssignment(props) {\n  if (props.isActive) {\n    return React.createElement(\"div\", {\n      className: \"EditScript-chatArea-msg active\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 414,\n        columnNumber: 13\n      }\n    }, props.children);\n  } else {\n    return React.createElement(\"div\", {\n      className: \"EditScript-chatArea-msg\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 420,\n        columnNumber: 13\n      }\n    }, props.children);\n  }\n};","map":{"version":3,"names":["React","Component","TextField","connect","withRouter","Script","EditableField","CastMembers","Scenes","MsgTypes","Button","TimeInput","CommentedPopup","html2canvas","Firebase","nil","ConnectedEditScript","props","getScriptName","name","state","script","UpdateScriptName","getAllCast","cast","updateCast","getAllScenes","scene","updateScene","getSelectedCast","setState","selectedCastId","id","allMessages","getOnlyTextMsgsAsNodes","getSelectedScene","selectedSceneId","getSelectedMsgType","value","textMsg","addNewMessage","alreadyBeenLikedByselectedCastId","messageId","likedMsgID","likedByMap","has","get","addNewLikeMsg","senderId","milliseconds","Math","floor","Date","now","tslmsg","timeSinceLastMsg","spslm","msgData","timeStamp","msgType","whoSentLikedMsg","idOfMsgLiked","whoLikedMsg","updatedLikedByMap","Map","set","deleteLikedMessage","content","addNewMsgComment","comment","idOfMsgCommented","whoSentCommentedMsg","whoCommentedMsg","addNewMediaMsg","mediaType","mediaURL","isImg","isAudio","url","getInputTime","timeInSeconds","deleteMessage","updateScriptFirebase","onSaveComment","message","existingCommentNode","getCommentNodeByCastIdMsgId","editNodeContent","grabScreenshot","element","document","getElementById","then","canvas","imageData","toDataURL","storageRef","storage","ref","putString","snapshot","getDownloadURL","downloadURL","console","log","getInsertedImg","getVNURL","rimis","rimisIds","filteredRimis","rimiToShow","animateGreeting","orderId","selectedMsgType","scriptId","window","location","pathname","replaceAll","textyng","grabScriptFromFirebase","generateLikedMap","getOnlyLikedMsgsAsNodes","likedMessages","map","obj","key","msgLikedId","msgLikedSenderId","result","find","length","index","getSenderNameFromID","getCommentByCastIdMsgId","e","target","mapStateToProps","EditScript","DynamicClassAssignment","isActive","children"],"sources":["/Users/jdavid/Documents/textyng/src/components/EditScript/EditScript.js"],"sourcesContent":["import React, { Component } from \"react\";\nimport TextField from \"@material-ui/core/TextField\";\nimport { connect } from \"react-redux\";\nimport { withRouter } from \"react-router-dom\";\nimport Script from \"../Script/Script.js\";\nimport EditableField from \"../EditableField/EditableField\";\nimport CastMembers from \"../CastMembers/CastMembers\";\nimport Scenes from \"../Scenes/Scenes\";\nimport MsgTypes from \"../MsgTypes/MsgTypes\";\nimport Button from \"@material-ui/core/Button\";\nimport TimeInput from \"../TimeInput/TimeInput.js\"\nimport CommentedPopup from \"../CommentedPopup/CommentedPopup.js\"\nimport html2canvas from 'html2canvas';\nimport Firebase from \"../../firebase/firebase\";\n\nimport \"./EditScript.css\";\nimport { nil } from \"ajv\";\n\nclass ConnectedEditScript extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      rimis: [],\n      rimisIds: [],\n      filteredRimis: [],\n      rimiToShow: null,\n      animateGreeting: \"EditScript-animategreeting\",\n      orderId: \"\",\n      script: null,\n      selectedCastId: 1,\n      selectedMsgType: \"\",\n      timeSinceLastMsg: \"\",\n      textMsg: \"\",\n      allMessages: [],\n      spslm: 0,\n      likedByMap: new Map(),\n    };\n  }\n\n  componentDidMount() {\n    let scriptId = window.location.pathname.replaceAll(\"/editscript/\", \"\")\n\n    if(scriptId != \"\"){\n      var textyng = new Script(scriptId);\n      textyng.grabScriptFromFirebase(scriptId)\n      .then(() => {\n        this.setState({\n          script: textyng,\n          likedByMap: this.generateLikedMap(textyng.getOnlyLikedMsgsAsNodes())\n        })\n      })\n    }\n  }\n\n  generateLikedMap(likedMessages){\n    let map = new Map();\n\n    for (let obj of likedMessages) {\n      let key = `${obj.msgLikedId}${obj.msgLikedSenderId}`;\n      map.set(key, true);\n    }\n\n    return map\n  }\n\n  getScriptName = (name) => {\n    this.state.script.UpdateScriptName(name[1])\n  }\n\n  getAllCast = (cast) => {\n    this.state.script.updateCast(cast)\n  }\n\n  getAllScenes = (scene) => {\n    this.state.script.updateScene(scene)\n  }\n\n  getSelectedCast = (cast) => {\n    this.setState({selectedCastId: cast.id}, () => {\n      this.setState({allMessages: this.state.script.getOnlyTextMsgsAsNodes()})\n    })\n  }\n\n  getSelectedScene = (scene) => {\n    this.setState({selectedSceneId: scene.id}, () => {\n      this.setState({allMessages: this.state.script.getOnlyTextMsgsAsNodes()})\n    })\n  }\n\n  getSelectedMsgType = (value) => {\n    this.setState({ textMsg: value}, () => {\n      this.addNewMessage()\n    });\n  }\n\n  alreadyBeenLikedByselectedCastId = (messageId) => {\n    let likedMsgID = `${messageId}${this.state.selectedCastId}`\n\n    if(this.state.likedByMap.has(likedMsgID)){\n      return this.state.likedByMap.get(likedMsgID)\n    }\n    return false\n  }\n\n  deleteLikedMessage(messageId, whoLikedMsg){\n    this.setState({\n      likedByMap: this.state.likedByMap.set(`${messageId}${whoLikedMsg}`, false)\n    })\n\n    let allMessages = this.state.script.getOnlyLikedMsgsAsNodes()\n    const result = allMessages.find(obj => obj.idOfMsgLiked === messageId && obj.whoLikedMsg === whoLikedMsg);\n\n    if(result.id){\n      this.deleteMessage(result.id)\n    }\n  }\n\n  addNewLikeMsg = (messageId, senderId) => {\n    if(!this.alreadyBeenLikedByselectedCastId(messageId)){\n\n      var milliseconds = Math.floor(Date.now() / 1000)\n\n      let tslmsg = this.state.timeSinceLastMsg\n      if(tslmsg == \"\" || tslmsg == 0){\n        tslmsg = this.state.spslm\n      }\n      let msgData = {\n        id: milliseconds,\n        timeStamp: milliseconds,\n        msgType: \"like\",\n        whoSentLikedMsg: senderId,\n        idOfMsgLiked: messageId,\n        whoLikedMsg: this.state.selectedCastId,\n        tslmsg: tslmsg,\n      }\n      this.state.script.addNewMessage(msgData)\n\n      let updatedLikedByMap = new Map(this.state.likedByMap);\n      updatedLikedByMap.set(`${messageId}${this.state.selectedCastId}`, true);\n\n      this.setState({\n        likedByMap: updatedLikedByMap,\n        allMessages: this.state.script.getOnlyTextMsgsAsNodes(),\n        spslm: 0,\n      })\n    }else{\n      this.deleteLikedMessage(messageId, this.state.selectedCastId)\n    }\n  }\n\n  addNewMessage = () => {\n    var milliseconds = Math.floor(Date.now() / 1000)\n\n    let tslmsg = this.state.timeSinceLastMsg\n    if(tslmsg == \"\" || tslmsg == 0){\n      tslmsg = this.state.spslm\n    }\n\n    let msgData = {\n      id: milliseconds,\n      timeStamp: milliseconds,\n      content: this.state.textMsg,\n      senderId: this.state.selectedCastId,\n      tslmsg: tslmsg,\n      msgType: \"textMsg\",\n    }\n\n    this.state.script.addNewMessage(msgData)\n    this.setState({\n      allMessages: this.state.script.getOnlyTextMsgsAsNodes(),\n      textMsg: \"\",\n      spslm: 0,\n    })\n  }\n\n  addNewMsgComment = (comment, idOfMsgCommented, whoSentCommentedMsg) => {\n    var milliseconds = Math.floor(Date.now() / 1000)\n\n    let tslmsg = this.state.timeSinceLastMsg\n    if(tslmsg == \"\" || tslmsg == 0){\n      tslmsg = this.state.spslm\n    }\n\n    let msgData = {\n      id: milliseconds,\n      timeStamp: milliseconds,\n      msgType: \"comment\",\n      content: comment,\n      whoSentCommentedMsg: whoSentCommentedMsg,\n      idOfMsgCommented: idOfMsgCommented,\n      whoCommentedMsg: this.state.selectedCastId,\n      tslmsg: tslmsg,\n    }\n\n    this.state.script.addNewMessage(msgData)\n    this.setState({\n      allMessages: this.state.script.getOnlyTextMsgsAsNodes(),\n      textMsg: \"\",\n      spslm: 0,\n    })\n  }\n\n  addNewMediaMsg = (mediaType, mediaURL, isImg, isAudio) => {\n    var milliseconds = Math.floor(Date.now() / 1000)\n\n    let tslmsg = this.state.timeSinceLastMsg\n    if(tslmsg == \"\" || tslmsg == 0){\n      tslmsg = this.state.spslm\n    }\n\n    let msgData = {\n      id: milliseconds,\n      timeStamp: milliseconds,\n      content: mediaType,\n      senderId: this.state.selectedCastId,\n      tslmsg: tslmsg,\n      isImg: isImg,\n      isAudio: isAudio,\n      msgType: \"textMsg\",\n      url: mediaURL,\n    }\n\n    this.state.script.addNewMessage(msgData)\n    this.setState({\n      allMessages: this.state.script.getOnlyTextMsgsAsNodes(),\n      textMsg: \"\",\n      spslm: 0,\n    })\n  }\n\n  componentDidUpdate(){\n    this.state.script.updateScriptFirebase()\n  }\n\n  getInputTime = (timeInSeconds) => {\n    this.setState({\n      timeSinceLastMsg: timeInSeconds,\n    })\n  }\n\n  deleteMessage = (id) => {\n    this.state.script.deleteMessage(id)\n    this.setState({allMessages: this.state.script.getOnlyTextMsgsAsNodes()},\n    () => {\n        this.state.script.updateScriptFirebase()\n    });\n  }\n\n  onSaveComment = (message, idOfMsgCommented, whoSentCommentedMsg) => {\n    let existingCommentNode = this.state.script.getCommentNodeByCastIdMsgId(this.state.selectedCastId, idOfMsgCommented)\n    if(existingCommentNode != nil){\n      this.state.script.editNodeContent(existingCommentNode.id, message)\n    }else{\n      this.addNewMsgComment(message, idOfMsgCommented, whoSentCommentedMsg)\n    }\n  }\n\n  grabScreenshot = (url) => {\n    const element = document.getElementById('EditScript-chatArea-id');\n\n    html2canvas(element).then(canvas => {\n      const imageData = canvas.toDataURL();\n      const milliseconds = Math.floor(Date.now() / 1000)\n      const storageRef = Firebase.storage().ref(\"ScreenShot/\" + milliseconds);\n      storageRef.putString(imageData, 'data_url').then(snapshot => {\n        snapshot.ref.getDownloadURL().then(downloadURL => {\n          console.log(`Image URL: ${downloadURL}`);\n          this.addNewMediaMsg(\"ScreenShot\", downloadURL, true, false)\n        });\n      });\n    });\n  }\n\n  getInsertedImg = (url) => {\n    console.log(\"url\", url)\n    this.addNewMediaMsg(\"InsertImage\", url, true, false)\n  }\n\n  getVNURL = (url) => {\n    console.log(\"url\", url)\n    this.addNewMediaMsg(\"VoiceNote\", url, false, true)\n  }\n\n  render() {\n    if(this.state.script){\n        return (\n            <div className=\"EditScript\">\n                <div className=\"EditScript-container l-container\">\n                    <div className=\"EditScript-title\">\n                      <EditableField\n                        name={this.state.script.getScriptName()}\n                        getScriptName={this.getScriptName}\n                      />\n                    </div>\n                    <div className=\"EditScript-scenes\">\n                      <Scenes\n                        scenes = {this.state.script.getAllScenes()}\n                        selectedScene={this.getSelectedScene}\n                        getAllScenes={this.getAllScenes}\n                      />\n                    </div>\n                    <div className=\"EditScript-cast\">\n                      <CastMembers\n                        cast = {this.state.script.getAllCast()}\n                        selectedCast={this.getSelectedCast}\n                        getAllCast={this.getAllCast}\n                      />\n                    </div>\n                    <div className=\"EditScript-textView\">\n                      <MsgTypes\n                        grabScreenshot = {this.grabScreenshot}\n                        getInsertedImg = {this.getInsertedImg}\n                        selectedMsgType = {this.getSelectedMsgType}\n                        getVNURL = {this.getVNURL}\n                      />\n                      <div id=\"EditScript-chatArea-id\" className=\"EditScript-chatArea\">\n                        {this.state.allMessages.length == 0 &&\n                          <span className=\"EditScript-castMemberPrompt\">click on a cast member to see messages</span>\n                        }\n                        {this.state.allMessages.map((value, index) => (\n                          <DynamicClassAssignment key={index} isActive={value.senderId == this.state.selectedCastId} value={value} index={index} >\n                            {value.isImg &&\n                              <img\n                                className=\"EditScript-imgMsg\"\n                                src={value.url}\n                              />\n                            }\n                            {value.isAudio &&\n                              <audio\n                                className=\"EditScript-audioMsg\"\n                                src={value.url}\n                                controls\n                              />\n                            }\n                            <div>\n                              <span>{value.content}</span>\n                              <span className=\"EditScript-senderName\">{this.state.script.getSenderNameFromID(value.senderId)}</span>\n                            </div>\n                            <div className=\"EditScript-chatArea-msg-buttons\">\n                              <button className=\"EditScript-chatArea-msg-button\" onClick={() => this.deleteMessage(value.id)}>Delete</button>\n                              <button className=\"EditScript-chatArea-msg-button\" onClick={() => this.addNewLikeMsg(value.id, value.senderId)}>{this.alreadyBeenLikedByselectedCastId(value.id) ? \"Unlike\" : \"Like\"}</button>\n                              <CommentedPopup\n                                className=\"EditScript-chatArea-msg-button\"\n                                idOfMsgCommented={value.id}\n                                whoSentCommentedMsg={value.senderId}\n                                onSave={this.onSaveComment}\n                                alreadySavedValue={this.state.script.getCommentByCastIdMsgId(this.state.selectedCastId, value.id)}\n                              />\n                            </div>\n                          </DynamicClassAssignment>\n                        ))}\n                      </div>\n\n                      <div className=\"EditScript-sendMessage\">\n                        <TextField\n                          variant=\"outlined\"\n                          className=\"EditScript-sendMessage--input\"\n                          value={this.state.textMsg}\n                          placeholder=\"Type message here\"\n                          onChange={e => {\n                            this.setState({ textMsg: e.target.value });\n                          }}\n                        />\n                        <TimeInput inputTime={this.getInputTime} />\n                      </div>\n\n                      <div className=\"EditScript-saveSubmit\">\n                        <div>\n                          <Button\n                            className=\"EditScript-saveSubmit--save\"\n                            variant=\"outlined\"\n                            color=\"primary\"\n                            onClick={() => this.state.script.updateScriptFirebase()}\n                          >\n                            save\n                          </Button>\n                        </div>\n                        <div>\n                          <Button\n                            className=\"EditScript-saveSubmit--send\"\n                            variant=\"outlined\"\n                            color=\"primary\"\n                            onClick={() => this.addNewMessage()}\n                          >\n                            Send\n                          </Button>\n                        </div>\n                      </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }else{\n        return (\n            <div>script loading...</div>\n        )\n    }\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {};\n};\n\nlet EditScript = withRouter(connect(mapStateToProps)(ConnectedEditScript));\nexport default withRouter(EditScript);\n\n\nconst DynamicClassAssignment = (props) =>{\n\n    if(props.isActive){\n        return (\n            <div className={\"EditScript-chatArea-msg active\"}>\n                {props.children}\n            </div>\n        );\n    }else{\n        return (\n            <div className={\"EditScript-chatArea-msg\"}>\n                {props.children}\n            </div>\n        );\n    }\n  }"],"mappings":"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"},"metadata":{},"sourceType":"module"}