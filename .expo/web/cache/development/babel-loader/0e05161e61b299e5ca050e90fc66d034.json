{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"/Users/jdavid/Documents/textyng/src/components/ReaderView/ReaderView.js\";\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nimport React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { withRouter } from \"react-router-dom\";\nimport Script from \"../Script/Script.js\";\nimport { Emoji } from 'emoji-mart';\nimport \"./ReaderView.css\";\nvar emojis = [{\n  name: \"exploding_head\",\n  set: \"twitter\",\n  size: 24,\n  className: \"ReaderView-reactionEmoji\"\n}, {\n  name: \"relaxed\",\n  set: \"twitter\",\n  size: 24,\n  className: \"ReaderView-reactionEmoji\"\n}, {\n  name: \"astonished\",\n  set: \"twitter\",\n  size: 24,\n  className: \"ReaderView-reactionEmoji\"\n}, {\n  name: \"pensive\",\n  set: \"twitter\",\n  size: 24,\n  className: \"ReaderView-reactionEmoji\"\n}, {\n  name: \"angry\",\n  set: \"twitter\",\n  size: 24,\n  className: \"ReaderView-reactionEmoji\"\n}, {\n  name: \"scream\",\n  set: \"twitter\",\n  size: 24,\n  className: \"ReaderView-reactionEmoji\"\n}, {\n  name: \"kissing_heart\",\n  set: \"twitter\",\n  size: 24,\n  className: \"ReaderView-reactionEmoji\"\n}, {\n  name: \"rolling_on_the_floor_laughing\",\n  set: \"twitter\",\n  size: 24,\n  className: \"ReaderView-reactionEmoji\"\n}];\nvar ConnectedReaderView = function (_Component) {\n  _inherits(ConnectedReaderView, _Component);\n  var _super = _createSuper(ConnectedReaderView);\n  function ConnectedReaderView(props) {\n    var _this;\n    _classCallCheck(this, ConnectedReaderView);\n    _this = _super.call(this, props);\n    _this.handlePreviousClick = function () {\n      clearTimeout(_this.state.timeoutId);\n      _this.updateCurrentNode(_this.state.currentNodeIndex - 1);\n    };\n    _this.handlePlayPauseClick = function () {\n      _this.setState(function (prevState) {\n        if (prevState.isPlaying) {\n          clearTimeout(_this.state.timeoutId);\n        } else {\n          _this.updateCurrentNode();\n        }\n        return {\n          isPlaying: !prevState.isPlaying\n        };\n      });\n    };\n    _this.handleNextClick = function () {\n      clearTimeout(_this.state.timeoutId);\n      _this.updateCurrentNode();\n    };\n    _this.getScriptName = function (name) {\n      return name[1];\n    };\n    _this.selectThisScene = function (sceneId) {\n      _this.setState({\n        selectedSceneId: sceneId,\n        allMessages: _this.state.script.getAllMessagesAsNodes()\n      });\n    };\n    _this.reactionClicked = function (emojiName, messageId, event) {\n      event.currentTarget.classList.add('shake');\n      _this.state.script.updateReaderReaction(emojiName, messageId);\n    };\n    _this.getReaderReactionFromMsg = function () {\n      var reactionArray = [];\n      _this.state.allMessages.forEach(function (message) {\n        if (_this.state.script.getReaderReactionMap().has(message.id.toString())) {\n          reactionArray.push.apply(reactionArray, _toConsumableArray(_this.state.script.getReaderReactionMap().get(message.id.toString())));\n        }\n      });\n      var readerEmojiReactions = reactionArray.map(function (emoji, index) {\n        return React.createElement(Emoji, {\n          emoji: emoji,\n          set: \"twitter\",\n          size: 24,\n          key: index,\n          className: \"ReaderView-reactionEmoji\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 130,\n            columnNumber: 7\n          }\n        });\n      });\n      return readerEmojiReactions;\n    };\n    _this.state = {\n      script: null,\n      allMessages: [],\n      currentNodeIndex: 0,\n      selectedSceneId: 1,\n      timeoutId: null,\n      isPlaying: true\n    };\n    return _this;\n  }\n  _createClass(ConnectedReaderView, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n      var scriptId = window.location.pathname.replaceAll(\"/readerview/\", \"\");\n      if (scriptId !== \"\") {\n        var textyng = new Script(scriptId);\n        textyng.grabScriptFromFirebase(scriptId).then(function () {\n          _this2.setState({\n            script: textyng\n          }, function () {\n            _this2.updateCurrentNode();\n          });\n        });\n      }\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps, prevState) {\n      var _this3 = this;\n      if (prevState.currentNodeIndex !== this.state.currentNodeIndex && this.state.isPlaying) {\n        var nextNode = this.state.script.getNthMessageNode(this.state.currentNodeIndex);\n        this.setState({\n          timeoutId: setTimeout(function () {\n            _this3.setState({\n              allMessages: _this3.state.script.getAllMessagesAsNodes().slice(0, _this3.state.currentNodeIndex),\n              selectedSceneId: nextNode.sceneId || _this3.state.script.getTotalNumScenes()\n            });\n          }, nextNode.tslmsg * 100)\n        });\n      }\n    }\n  }, {\n    key: \"updateCurrentNode\",\n    value: function updateCurrentNode() {\n      var _this4 = this;\n      var index = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.state.currentNodeIndex + 1;\n      if (index >= this.state.script.getAllMessagesAsNodes().length) {\n        return;\n      }\n      clearTimeout(this.state.timeoutId);\n      var nextNode = this.state.script.getNthMessageNode(index);\n      this.setState({\n        currentNodeIndex: index,\n        allMessages: this.state.script.getAllMessagesAsNodes().slice(0, index),\n        selectedSceneId: nextNode.sceneId || this.state.script.getTotalNumScenes(),\n        timeoutId: setTimeout(function () {\n          _this4.updateCurrentNode();\n        }, nextNode.tslmsg * 100)\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this5 = this;\n      if (this.state.allMessages && this.state.allMessages.length > 0) {\n        return React.createElement(\"div\", {\n          className: \"ReaderView\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 147,\n            columnNumber: 9\n          }\n        }, React.createElement(\"div\", {\n          className: \"ReaderView-container l-container\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 148,\n            columnNumber: 11\n          }\n        }, React.createElement(\"div\", {\n          className: \"ReaderView-title\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 149,\n            columnNumber: 13\n          }\n        }, this.state.script.getScriptName()), React.createElement(\"div\", {\n          className: \"ReaderView-scenes\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 152,\n            columnNumber: 13\n          }\n        }, this.state.script.getScenes().map(function (scene, index) {\n          return scene.id == _this5.state.selectedSceneId ? React.createElement(\"div\", {\n            key: index,\n            onClick: function onClick() {\n              return _this5.selectThisScene(scene.id);\n            },\n            className: \"ReaderView-scene ReaderView-scene--currentScene\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 156,\n              columnNumber: 19\n            }\n          }, scene.name) : React.createElement(\"div\", {\n            key: index,\n            onClick: function onClick() {\n              return _this5.selectThisScene(scene.id);\n            },\n            className: \"ReaderView-scene\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 160,\n              columnNumber: 19\n            }\n          }, scene.name);\n        })), React.createElement(\"div\", {\n          className: \"ReaderView-textView\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 166,\n            columnNumber: 13\n          }\n        }, React.createElement(\"div\", {\n          id: \"ReaderView-chatArea-id\",\n          className: \"ReaderView-chatArea\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 167,\n            columnNumber: 15\n          }\n        }, this.state.allMessages.map(function (message, index) {\n          return message.sceneId == _this5.state.selectedSceneId && React.createElement(\"div\", {\n            key: index,\n            className: \"ReaderView-chatArea-msg\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 172,\n              columnNumber: 19\n            }\n          }, message.isImg && React.createElement(\"img\", {\n            className: \"ReaderView-imgMsg\",\n            src: message.url,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 174,\n              columnNumber: 23\n            }\n          }), message.isAudio && React.createElement(\"audio\", {\n            className: \"ReaderView-audioMsg\",\n            src: message.url,\n            controls: true,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 180,\n              columnNumber: 23\n            }\n          }), message.isVideo && React.createElement(\"video\", {\n            className: \"ReaderView-videoMsg\",\n            src: message.url,\n            controls: true,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 187,\n              columnNumber: 23\n            }\n          }), React.createElement(\"div\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 193,\n              columnNumber: 21\n            }\n          }, React.createElement(\"span\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 194,\n              columnNumber: 23\n            }\n          }, message.content), React.createElement(\"span\", {\n            className: \"ReaderView-senderName\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 195,\n              columnNumber: 23\n            }\n          }, _this5.state.script.getSenderNameFromID(message.senderId)), React.createElement(\"div\", {\n            className: \"ReaderView-reactionEmojis\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 197,\n              columnNumber: 23\n            }\n          }, emojis.map(function (emoji, index) {\n            return React.createElement(\"div\", {\n              key: index,\n              className: \"ReaderView-reactionEmoji\",\n              onClick: function onClick(e) {\n                return _this5.reactionClicked(emoji.name, message.id, e);\n              },\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 199,\n                columnNumber: 27\n              }\n            }, React.createElement(Emoji, {\n              emoji: emoji.name,\n              set: emoji.set,\n              size: emoji.size,\n              key: emoji.name,\n              className: \"ReaderView-reactionEmoji\",\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 204,\n                columnNumber: 29\n              }\n            }));\n          }))));\n        }))), React.createElement(\"div\", {\n          className: \"ReaderView-readerReaction--wrapper\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 219,\n            columnNumber: 13\n          }\n        }, React.createElement(\"span\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 220,\n            columnNumber: 15\n          }\n        }, \"reactions:\"), React.createElement(\"span\", {\n          className: \"ReaderView-readerReaction\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 221,\n            columnNumber: 15\n          }\n        }, \" \", this.getReaderReactionFromMsg())), React.createElement(\"div\", {\n          className: \"ReaderView-navigation\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 223,\n            columnNumber: 13\n          }\n        }, React.createElement(\"div\", {\n          className: \"ReaderView-navigation--wrapper\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 224,\n            columnNumber: 15\n          }\n        }, React.createElement(\"div\", {\n          className: \"previous-button\",\n          onClick: this.handlePreviousClick,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 225,\n            columnNumber: 17\n          }\n        }, React.createElement(\"i\", {\n          className: \"fas fa-arrow-left\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 226,\n            columnNumber: 19\n          }\n        })), React.createElement(\"div\", {\n          className: \"play-pause-button\",\n          onClick: this.handlePlayPauseClick,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 228,\n            columnNumber: 17\n          }\n        }, this.state.isPlaying ? React.createElement(\"i\", {\n          className: \"fas fa-pause\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 230,\n            columnNumber: 21\n          }\n        }) : React.createElement(\"i\", {\n          className: \"fas fa-play\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 231,\n            columnNumber: 21\n          }\n        })), React.createElement(\"div\", {\n          className: \"next-button\",\n          onClick: this.handleNextClick,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 234,\n            columnNumber: 17\n          }\n        }, React.createElement(\"i\", {\n          className: \"fas fa-arrow-right\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 235,\n            columnNumber: 19\n          }\n        }))))));\n      } else {\n        return React.createElement(\"div\", {\n          className: \"ReaderView\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 244,\n            columnNumber: 9\n          }\n        }, \"loading scriptsss\");\n      }\n    }\n  }]);\n  return ConnectedReaderView;\n}(Component);\nvar mapStateToProps = function mapStateToProps(state) {\n  return {};\n};\nvar ReaderView = withRouter(connect(mapStateToProps)(ConnectedReaderView));\nexport default withRouter(ReaderView);","map":{"version":3,"names":["React","Component","connect","withRouter","Script","Emoji","emojis","name","set","size","className","ConnectedReaderView","props","handlePreviousClick","clearTimeout","state","timeoutId","updateCurrentNode","currentNodeIndex","handlePlayPauseClick","setState","prevState","isPlaying","handleNextClick","getScriptName","selectThisScene","sceneId","selectedSceneId","allMessages","script","getAllMessagesAsNodes","reactionClicked","emojiName","messageId","event","currentTarget","classList","add","updateReaderReaction","getReaderReactionFromMsg","reactionArray","forEach","message","getReaderReactionMap","has","id","toString","push","get","readerEmojiReactions","map","emoji","index","scriptId","window","location","pathname","replaceAll","textyng","grabScriptFromFirebase","then","prevProps","nextNode","getNthMessageNode","setTimeout","slice","getTotalNumScenes","tslmsg","length","getScenes","scene","isImg","url","isAudio","isVideo","content","getSenderNameFromID","senderId","e","mapStateToProps","ReaderView"],"sources":["/Users/jdavid/Documents/textyng/src/components/ReaderView/ReaderView.js"],"sourcesContent":["import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { withRouter } from \"react-router-dom\";\nimport Script from \"../Script/Script.js\";\nimport { Emoji } from 'emoji-mart'\n\nimport \"./ReaderView.css\";\n\nconst emojis = [\n  {name: \"exploding_head\", set: \"twitter\", size: 24, className: \"ReaderView-reactionEmoji\"},\n  {name: \"relaxed\", set: \"twitter\", size: 24, className: \"ReaderView-reactionEmoji\"},\n  {name: \"astonished\", set: \"twitter\", size: 24, className: \"ReaderView-reactionEmoji\"},\n  {name: \"pensive\", set: \"twitter\", size: 24, className: \"ReaderView-reactionEmoji\"},\n  {name: \"angry\", set: \"twitter\", size: 24, className: \"ReaderView-reactionEmoji\"},\n  {name: \"scream\", set: \"twitter\", size: 24, className: \"ReaderView-reactionEmoji\"},\n  {name: \"kissing_heart\", set: \"twitter\", size: 24, className: \"ReaderView-reactionEmoji\"},\n  {name: \"rolling_on_the_floor_laughing\", set: \"twitter\", size: 24, className: \"ReaderView-reactionEmoji\"},\n]\n\nclass ConnectedReaderView extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      script: null,\n      allMessages: [],\n      currentNodeIndex: 0,\n      selectedSceneId: 1,\n      timeoutId: null,\n      isPlaying: true,\n    };\n  }\n\n  componentDidMount() {\n    let scriptId = window.location.pathname.replaceAll(\"/readerview/\", \"\");\n\n    if (scriptId !== \"\") {\n      var textyng = new Script(scriptId);\n      textyng\n        .grabScriptFromFirebase(scriptId)\n        .then(() => {\n          this.setState(\n            {\n              script: textyng,\n            },\n            () => {\n              this.updateCurrentNode();\n            }\n          );\n        });\n    }\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (prevState.currentNodeIndex !== this.state.currentNodeIndex && this.state.isPlaying) {\n      const nextNode = this.state.script.getNthMessageNode(this.state.currentNodeIndex);\n      this.setState({\n        timeoutId: setTimeout(() => {\n          this.setState({\n            allMessages: this.state.script.getAllMessagesAsNodes().slice(0, this.state.currentNodeIndex),\n            selectedSceneId: nextNode.sceneId || this.state.script.getTotalNumScenes()\n          });\n        }, nextNode.tslmsg * 100)\n      });\n    }\n  }\n\n  updateCurrentNode(index = this.state.currentNodeIndex + 1) {\n    if (index >= this.state.script.getAllMessagesAsNodes().length) {\n        return;\n    }\n    clearTimeout(this.state.timeoutId);\n    const nextNode = this.state.script.getNthMessageNode(index);\n    this.setState({\n      currentNodeIndex: index,\n      allMessages: this.state.script.getAllMessagesAsNodes().slice(0, index),\n      selectedSceneId: nextNode.sceneId || this.state.script.getTotalNumScenes(),\n      timeoutId: setTimeout(() => {\n        this.updateCurrentNode();\n      }, nextNode.tslmsg * 100),\n    });\n  }\n\n  handlePreviousClick = () => {\n    clearTimeout(this.state.timeoutId);\n    this.updateCurrentNode(this.state.currentNodeIndex - 1);\n  };\n\n  handlePlayPauseClick = () => {\n    this.setState((prevState) => {\n      if (prevState.isPlaying) {\n        clearTimeout(this.state.timeoutId);\n      } else {\n        this.updateCurrentNode();\n      }\n      return { isPlaying: !prevState.isPlaying };\n    });\n  };\n\n  handleNextClick = () => {\n    clearTimeout(this.state.timeoutId);\n    this.updateCurrentNode();\n  };\n\n  getScriptName = (name) => {\n    return name[1]\n  }\n\n  selectThisScene = (sceneId) => {\n    this.setState({\n      selectedSceneId: sceneId,\n      allMessages: this.state.script.getAllMessagesAsNodes(),\n    })\n  }\n\n  reactionClicked = (emojiName, messageId, event) => {\n    event.currentTarget.classList.add('shake');\n    this.state.script.updateReaderReaction(emojiName, messageId)\n  }\n\n  getReaderReactionFromMsg = () => {\n    let reactionArray = [];\n    this.state.allMessages.forEach(message => {\n      if(this.state.script.getReaderReactionMap().has(message.id.toString())) {\n        reactionArray.push(...this.state.script.getReaderReactionMap().get(message.id.toString()));\n      }\n    });\n\n    let readerEmojiReactions = reactionArray.map((emoji, index) => (\n      <Emoji\n        emoji={emoji}\n        set={\"twitter\"}\n        size={24}\n        key={index}\n        className=\"ReaderView-reactionEmoji\"\n      />\n    ));\n\n    // console.log(\"readerEmojiReactions\", readerEmojiReactions)\n\n    return readerEmojiReactions\n  }\n\n  render() {\n\t\tif(this.state.allMessages && this.state.allMessages.length > 0){\n\t\t\treturn (\n        <div className=\"ReaderView\">\n          <div className=\"ReaderView-container l-container\">\n            <div className=\"ReaderView-title\">\n              {this.state.script.getScriptName()}\n            </div>\n            <div className=\"ReaderView-scenes\">\n              {this.state.script.getScenes()\n              .map((scene, index) =>\n                scene.id == this.state.selectedSceneId ? (\n                  <div key={index} onClick={() => this.selectThisScene(scene.id)} className=\"ReaderView-scene ReaderView-scene--currentScene\">\n                    {scene.name}\n                  </div>\n                ) : (\n                  <div key={index} onClick={() => this.selectThisScene(scene.id)} className=\"ReaderView-scene\">\n                    {scene.name}\n                  </div>\n                )\n              )}\n            </div>\n            <div className=\"ReaderView-textView\">\n              <div id=\"ReaderView-chatArea-id\" className=\"ReaderView-chatArea\">\n                {this.state.allMessages\n                .map((message, index) => (\n                  (message.sceneId == this.state.selectedSceneId)\n                  &&\n                  <div key={index} className=\"ReaderView-chatArea-msg\">\n                    {message.isImg &&\n                      <img\n                        className=\"ReaderView-imgMsg\"\n                        src={message.url}\n                      />\n                    }\n                    {message.isAudio &&\n                      <audio\n                        className=\"ReaderView-audioMsg\"\n                        src={message.url}\n                        controls\n                      />\n                    }\n                    {message.isVideo &&\n                      <video\n                        className=\"ReaderView-videoMsg\"\n                        src={message.url}\n                        controls\n                      />\n                    }\n                    <div>\n                      <span>{message.content}</span>\n                      <span className=\"ReaderView-senderName\">{this.state.script.getSenderNameFromID(message.senderId)}</span>\n                      \n                      <div className=\"ReaderView-reactionEmojis\">\n                        {emojis.map((emoji, index)=> \n                          <div\n                            key={index}\n                            className=\"ReaderView-reactionEmoji\"\n                            onClick={(e) => this.reactionClicked(emoji.name, message.id, e)}\n                          >\n                            <Emoji \n                              emoji={emoji.name}\n                              set={emoji.set} \n                              size={emoji.size} \n                              key={emoji.name} \n                              className=\"ReaderView-reactionEmoji\"\n                            />\n                          </div>\n                        )}\n                      </div>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </div>\n            <div className=\"ReaderView-readerReaction--wrapper\">\n              <span>reactions:</span> \n              <span className=\"ReaderView-readerReaction\"> {this.getReaderReactionFromMsg()}</span>                       \n            </div>\n            <div className=\"ReaderView-navigation\">\n              <div className=\"ReaderView-navigation--wrapper\">\n                <div className=\"previous-button\" onClick={this.handlePreviousClick}>\n                  <i className=\"fas fa-arrow-left\"></i>\n                </div>\n                <div className=\"play-pause-button\" onClick={this.handlePlayPauseClick}>\n                  {this.state.isPlaying ? \n                    <i className=\"fas fa-pause\"></i> : \n                    <i className=\"fas fa-play\"></i>\n                  }\n                </div>\n                <div className=\"next-button\" onClick={this.handleNextClick}>\n                  <i className=\"fas fa-arrow-right\"></i>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n    \t);\n\t\t}else{\n\t\t\treturn (\n        <div className=\"ReaderView\">\n\t\t\t\t\tloading scriptsss\n        </div>\n    \t);\n\t\t}\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {};\n};\n\nlet ReaderView = withRouter(connect(mapStateToProps)(ConnectedReaderView));\nexport default withRouter(ReaderView);\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}